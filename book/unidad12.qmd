# Proyecto: API de Tareas con Django Rest Framework

## Explicación:

En este proyecto, construiremos una API utilizando Django Rest Framework para gestionar tareas. La API permitirá a los usuarios crear, actualizar, listar y eliminar tareas. Utilizaremos Django Rest Framework para definir los modelos, las vistas y las URL necesarias para interactuar con la API.

## Qué se necesita conocer:

- Conocimientos básicos de Python.
- Familiaridad con Django y Django Rest Framework.
- Entorno de desarrollo configurado con Django y Django Rest Framework.

## Estructura del Proyecto:

```markdown
proyecto_api_tareas/
├── api_tareas/
│   ├── migrations/
│   ├── templates/
│   ├── __init__.py
│   ├── admin.py
│   ├── apps.py
│   ├── models.py
│   ├── serializers.py
│   ├── tests.py
│   └── views.py
├── proyecto_api_tareas/
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py
│   ├── urls.py
│   └── wsgi.py
├── db.sqlite3
└── manage.py
```

## Código:

```python
#models.py:
from django.db import models

class Tarea(models.Model):
    titulo = models.CharField(max_length=100)
    descripcion = models.TextField()
    fecha_creacion = models.DateTimeField(auto_now_add=True)
    completada = models.BooleanField(default=False)

    def __str__(self):
        return self.titulo
```

```python
#serializers.py:

from rest_framework import serializers
from .models import Tarea

class TareaSerializer(serializers.ModelSerializer):
    class Meta:
        model = Tarea
        fields = '__all__'
```
```python
#views.py:
from rest_framework import viewsets
from .models import Tarea
from .serializers import TareaSerializer

class TareaViewSet(viewsets.ModelViewSet):
    queryset = Tarea.objects.all()
    serializer_class = TareaSerializer

    urls.py (api_tareas):
```
```python
from rest_framework.routers import DefaultRouter
from .views import TareaViewSet

router = DefaultRouter()
router.register(r'tareas', TareaViewSet)

urlpatterns = router.urls
```
A continuación en el archivo **settings.py** agregar **'rest_framework'** y **'api_tareas'** en **INSTALLED_APPS**.

:::{.callout-important}
## Actividad Práctica:

Configura un proyecto Django y una aplicación llamada 'api_tareas'.

Define el modelo Tarea en models.py con los campos necesarios.

Crea un serializador en serializers.py para el modelo Tarea.

Implementa las vistas en views.py utilizando Django Rest Framework.

Configura las URLs en urls.py para las vistas de la API.

Migrar y ejecutar el servidor para probar la API utilizando el navegador o herramientas como Postman.
:::

## Explicación de la Actividad:

Este proyecto permite a los participantes aplicar los conocimientos adquiridos en Django y Django Rest Framework para crear una API de gestión de tareas. Aprenden cómo definir modelos, serializadores, vistas y URLs en Django Rest Framework para construir una API completa. Les ayuda a comprender cómo desarrollar aplicaciones web con APIs utilizando tecnologías modernas.