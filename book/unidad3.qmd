# Introducción a Python

## Distintas formas de trabajar con Python

## Contenido

 de programación versátil que ofrece diferentes formas de interactuar con él. Aprenderemos las dos formas principales de trabajar con Python: **el intérprete interactivo** y los **scripts de Python**.

## Conceptos Clave:

### Intérprete Interactivo: 

Permite ejecutar instrucciones de Python en tiempo real y ver los resultados inmediatamente en la consola.

### Scripts de Python: 

Son archivos que contienen una serie de instrucciones de Python que se pueden ejecutar en conjunto.

### Ambientes Virtuales 

Son entornos aislados que permiten tener instalaciones y bibliotecas de Python separadas para diferentes proyectos.

### Ejemplo

```python
>>> 2 + 3 # <1>
5

# suma.py # <2>
numero1 = 5
numero2 = 7
resultado = numero1 + numero2
print("El resultado de la suma es:", resultado)
# CTRL + S para guardar # <3>
```
1. Uso del intérprete interactivo
2. Ejecución de un script de Python
3. Guarda este código en un archivo llamado "suma.py"

## Explicación

El intérprete interactivo permite ejecutar expresiones de Python directamente en la consola y ver los resultados en tiempo real.

Los scripts de Python son archivos que contienen un conjunto de instrucciones. En este ejemplo, se muestra cómo crear un script simple que calcula la suma de dos números y lo imprime en la consola.

::: {.callout-important}

### Actividad Práctica

Abre el intérprete interactivo de Python y realiza algunas operaciones matemáticas simples.

Crea un archivo llamado "operaciones.py" y escribe un programa que realice operaciones aritméticas básicas y las muestre en la consola.
::: 

## Explicación de la Actividad

Esta actividad permite a los participantes experimentar con el intérprete interactivo de Python y crear su propio script para realizar operaciones matemáticas.

## Las bases de Python

### Contenido

En esta lección, exploraremos las bases fundamentales de Python. Aprenderemos sobre las variables, tipos de datos y operadores básicos que forman la base de cualquier programa en Python.

## Conceptos Clave

### Variables

Son nombres que se utilizan para almacenar valores en la memoria de la computadora.

### Tipos de Datos

Incluyen enteros, flotantes, cadenas, booleanos y más. Cada tipo de dato tiene sus propias características y operaciones.

### Operadores

Incluyen operadores aritméticos, de comparación y lógicos que se utilizan para realizar diferentes tipos de cálculos y comparaciones.

### Ejemplo

``` python

# Variables y tipos de datos
nombre = "Juan"
edad = 25
altura = 1.75
es_mayor_de_edad = True

# Operadores aritméticos
suma = 5 + 3
resta = 10 - 2
multiplicacion = 4 * 6
division = 15 / 3

# Operadores de comparación
igual = 5 == 5
mayor_que = 10 > 5
menor_que = 7 < 12

# Operadores lógicos
and_logico = True and False
or_logico = True or False
not_logico = not True
```

## Explicación:

Las variables se utilizan para almacenar información, como el nombre, la edad, la altura y si una persona es mayor de edad.

Los operadores aritméticos se utilizan para realizar cálculos matemáticos básicos.

Los operadores de comparación se utilizan para comparar valores y devuelven un valor booleano (verdadero o falso).

Los operadores lógicos se utilizan para combinar expresiones booleanas y realizar operaciones lógicas.

::: {.callout-important}
### Actividad Práctica:

Crea variables que almacenen información sobre ti, como tu nombre, edad y altura.

Realiza operaciones aritméticas y utiliza operadores de comparación para comparar valores.

Combina expresiones booleanas utilizando operadores lógicos y observa los resultados.
::: 

## Explicación de la Actividad

Esta actividad permite a los participantes aplicar los conceptos de variables, tipos de datos y operadores en ejemplos prácticos. Les ayuda a comprender cómo trabajar con diferentes tipos de datos y cómo realizar operaciones básicas en Python.

## Identación

### Contenido

En Python, la identación (sangría) juega un papel crucial en la estructura y organización del código. Aprenderemos cómo se utiliza la identación para delimitar bloques de código y mejorar la legibilidad.

## Conceptos Clave

### Identación

- Espacios o tabulaciones al comienzo de una línea que indican la estructura del código.
- Bloques de Código: Conjuntos de instrucciones que se agrupan juntas y se ejecutan en conjunto.
- PEP 8: Guía de estilo para la escritura de código en Python que recomienda el uso de cuatro espacios para la identación.

### Ejemplo

``` python
# Uso de la identación en un condicional
numero = 10

if numero > 5:
    print("El número es mayor que 5")
else:
    print("El número no es mayor que 5")
```
## Explicación

- En este ejemplo, la identación se utiliza para delimitar los bloques de código dentro de las instrucciones "if" y "else".
- La identación es crucial para que Python sepa qué instrucciones están dentro de un bloque y cuáles están fuera.

::: {.callout-important}

### Actividad Práctica:

Escribe un programa que solicite al usuario su edad y muestre un mensaje según si es mayor de 18 años o no.

Intenta cambiar la identación incorrectamente y observa cómo afecta al funcionamiento del programa.
::: 

## Explicación de la Actividad.

Esta actividad permite a los participantes comprender la importancia de la identación en Python al trabajar con bloques de código como los condicionales. Les ayuda a desarrollar el hábito de utilizar la identación adecuada para mantener el código organizado y legible.

## Comentarios

### Contenido

Los comentarios son una herramienta importante en la programación para añadir explicaciones y notas en el código. Aprenderemos cómo agregar comentarios en Python y cómo pueden mejorar la comprensión del código.

## Conceptos Clave:

### Comentarios

Son notas en el código que no se ejecutan y se utilizan para explicar el propósito y funcionamiento de partes del programa.

### Comentarios de una línea

Se crean con el símbolo "#" y abarcan una sola línea.

### Comentarios de múltiples líneas

Se crean entre triple comillas (""" o ''') y pueden abarcar múltiples líneas.

## Ejemplo

```python
# Este es un comentario de una línea

"""
Este es un comentario
de múltiples líneas.
Puede abarcar varias líneas.
"""

numero = 42  # Este comentario está después de una instrucción
```

## Explicación:

Los comentarios son ignorados por el intérprete y no afectan la ejecución del código.

Los comentarios son útiles para documentar el código, explicar partes difíciles de entender o dejar notas para otros programadores.

::: {.callout-important}

Actividad Práctica:

Escribe un programa que realice una tarea sencilla y agrega comentarios para explicar lo que hace cada parte.

Escribe un comentario de múltiples líneas que explique el propósito general de tu programa.
::: 

## Explicación de la Actividad

Esta actividad permite a los participantes practicar la adición de comentarios en su código para mejorar la legibilidad y la comprensión. Les ayuda a desarrollar la habilidad de documentar su código de manera efectiva para ellos mismos y para otros programadores.

## Variables

### Contenido

Las variables son fundamentales en la programación ya que permiten almacenar y manipular datos. Aprenderemos cómo declarar y utilizar variables en Python.

## Conceptos Clave:

### Variables

Nombres que representan ubicaciones de memoria donde se almacenan datos.

### Declaración de Variables.

- Asignación de un valor a un nombre utilizando el operador "=".
- Convenciones de Nombres: Siguen reglas para ser descriptivos y seguir una estructura (por ejemplo, letras minúsculas y guiones bajos para espacios).

## Ejemplo

``` python
nombre = "Ana"
edad = 30
saldo_bancario = 1500.75
es_mayor_de_edad = True
```

## Explicación:

En este ejemplo, se declaran variables para almacenar el nombre de una persona, su edad, su saldo bancario y un valor booleano que indica si es mayor de edad.

Los nombres de variables son descriptivos y siguen la convención de nombres recomendada (letras minúsculas y guiones bajos para espacios).

::: {.callout-important}

### Actividad Práctica

Crea variables para almacenar información personal, como tu ciudad, tu edad y tu ocupación.

Declara variables para almacenar cantidades numéricas, como el precio de un producto y la cantidad de unidades disponibles.
::: 

## Explicación de la Actividad

Esta actividad permite a los participantes practicar la declaración de variables en Python y aplicar el concepto de convenciones de nombres. 

Les ayuda a comprender cómo almacenar y acceder a datos utilizando variables descriptivas y significativas.

## Múltiples Variables

### Contenido:

En Python, es posible asignar valores a múltiples variables en una sola línea. Aprenderemos cómo declarar y utilizar múltiples variables de manera eficiente.

## Conceptos Clave:

### Asignación Múltiple

Permite asignar valores a varias variables en una línea.

### Desempaquetado de Valores

Se pueden asignar valores de una lista o tupla a múltiples variables en una sola operación.

### Intercambio de Valores

Se pueden intercambiar los valores de dos variables utilizando asignación múltiple.

## Ejemplo

```python
nombre, edad, altura = "María", 28, 1.65
productos = ("Manzanas", "Peras", "Uvas")
producto1, producto2, producto3 = productos
```
## Explicación:

En el primer ejemplo, se utilizó la asignación múltiple para declarar tres variables en una sola línea.

En el segundo ejemplo, se desempaquetaron los valores de una tupla en variables individuales.

::: {.callout-important}
### Actividad Práctica:

Crea una lista con los nombres de tus tres colores favoritos.

Utiliza la asignación múltiple para asignar los valores de la lista a tres variables individuales.

## Explicación de la Actividad

Esta actividad permite a los participantes practicar la asignación múltiple y el desempaquetado de valores. 

Les ayuda a comprender cómo trabajar eficientemente con múltiples variables y cómo aprovechar estas técnicas para simplificar el código.

## Concatenación

### Contenido:

La concatenación es la unión de cadenas de texto. Aprenderemos cómo combinar cadenas de texto en Python para crear mensajes más complejos.

## Conceptos Clave:

### Concatenación: 

Operación que combina dos o más cadenas de texto para formar una cadena más larga.

### Operador +

Se utiliza para concatenar cadenas de texto.

### Conversión a Cadena

Es necesario convertir valores no string a cadenas antes de concatenarlos.

## Ejemplo

```python
nombre = "Luisa"
mensaje = "Hola, " + nombre + ". ¿Cómo estás?"
edad = 25
mensaje_edad = "Tienes " + str(edad) + " años."
```

## Explicación:

En este ejemplo, se utilizó el operador "+" para concatenar cadenas de texto.

La variable "edad" se convirtió a una cadena utilizando la función "str()" antes de concatenarla.

::: {.callout-important}
### Actividad Práctica:

Crea una variable con tu comida favorita.
Utiliza la concatenación para crear un mensaje que incluya tu comida favorita.
::: 

## Explicación de la Actividad

Esta actividad permite a los participantes practicar la concatenación de cadenas de texto y comprender cómo construir mensajes más complejos utilizando variables y texto. Les ayuda a mejorar su capacidad para crear mensajes personalizados en sus programas.