[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Python 2023",
    "section": "",
    "text": "Bienvenida\n¡Bienvenidos al Curso Completo de Python, analizaremos desde los fundamentos hasta aplicaciones prácticas!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "index.html#qué-es-este-curso",
    "href": "index.html#qué-es-este-curso",
    "title": "Python 2023",
    "section": "¿Qué es este Curso?",
    "text": "¿Qué es este Curso?\n\n\n\n\n\nEste curso exhaustivo te llevará desde los fundamentos básicos de la programación hasta la creación de aplicaciones prácticas utilizando el lenguaje de programación Python. A través de una combinación de teoría y ejercicios prácticos, te sumergirás en los conceptos esenciales de la programación y avanzarás hacia la construcción de proyectos reales. Desde la instalación de herramientas hasta la creación de una API con Django Rest Framework, este curso te proporcionará una comprensión sólida y práctica de Python y su aplicación en el mundo real.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "index.html#a-quién-está-dirigido",
    "href": "index.html#a-quién-está-dirigido",
    "title": "Python 2023",
    "section": "¿A quién está dirigido?",
    "text": "¿A quién está dirigido?\n\n\n\n\n\nEste curso está diseñado para principiantes y aquellos con poca o ninguna experiencia en programación. No importa si eres un estudiante curioso, un profesional que busca cambiar de carrera o simplemente alguien que desea aprender a programar: este curso es para ti. Desde adolescentes hasta adultos, todos son bienvenidos a participar y explorar el emocionante mundo de la programación a través de Python.",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Python 2023",
    "section": "¿Cómo contribuir?",
    "text": "¿Cómo contribuir?\n\n\n\n\n\nValoramos tu participación en este curso. Si encuentras errores, deseas sugerir mejoras o agregar contenido adicional, ¡nos encantaría escucharte! Puedes contribuir a través de nuestra plataforma en línea, donde puedes compartir tus comentarios y sugerencias. Juntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la programación.\nEste libro ha sido creado con el objetivo de brindar acceso gratuito y universal al conocimiento. Estará disponible en línea para que cualquiera, sin importar su ubicación o circunstancias, pueda acceder y aprender a su propio ritmo.\n¡Esperamos que disfrutes este emocionante viaje de aprendizaje y descubrimiento en el mundo de la programación con Python!",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Bienvenida</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.1.html#conceptos-clave",
    "href": "unidades/unidad1/unidad1.1.html#conceptos-clave",
    "title": "Introducción general a la Programación",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nInstrucciones\nSon comandos específicos que le indican a la computadora qué hacer. Pueden ser simples, como imprimir un mensaje en pantalla, o complejas, como realizar cálculos matemáticos.\n\n\nLenguajes de Programación.\n\nSon sistemas de comunicación entre humanos y máquinas. Cada lenguaje tiene reglas sintácticas y semánticas que determinan cómo se escriben y ejecutan las instrucciones.\n\n\nAlgoritmos\n\nSon conjuntos ordenados de instrucciones diseñados para resolver un problema específico. Los algoritmos son la base de la programación y se utilizan para desarrollar software eficiente.\n\n\nDepuración\n\nEs el proceso de identificar y corregir errores en el código. Los programadores pasan tiempo depurando para asegurarse de que sus programas funcionen correctamente.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción general a la Programación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.1.html#ejemplo",
    "href": "unidades/unidad1/unidad1.1.html#ejemplo",
    "title": "Introducción general a la Programación",
    "section": "Ejemplo:",
    "text": "Ejemplo:\n1print(\"Hola, bienvenido al mundo de la programación.\")\n\n1\n\nEste es un ejemplo sencillo de un programa en Python que imprime un mensaje en pantalla.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción general a la Programación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.1.html#explicación",
    "href": "unidades/unidad1/unidad1.1.html#explicación",
    "title": "Introducción general a la Programación",
    "section": "Explicación",
    "text": "Explicación\nEn Python, los comentarios comienzan con el símbolo #. No afectan la ejecución del programa, pero son útiles para documentar el código.\nLa línea print(\"Hola, bienvenido al mundo de la programación.\") es una instrucción de impresión. La función print() muestra el texto entre paréntesis en la consola.\n\n\n\n\n\n\nTip\n\n\n\nActividad Práctica\nEscribe un programa que solicite al usuario su nombre y luego imprima un mensaje de bienvenida personalizado.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción general a la Programación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.1.html#explicación-de-la-actividad",
    "href": "unidades/unidad1/unidad1.1.html#explicación-de-la-actividad",
    "title": "Introducción general a la Programación",
    "section": "Explicación de la Actividad",
    "text": "Explicación de la Actividad\nEl programa utilizará la función input() para recibir la entrada del usuario. Luego, utilizará la entrada proporcionada para imprimir un mensaje de bienvenida personalizado.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Introducción general a la Programación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.2.html#conceptos-clave",
    "href": "unidades/unidad1/unidad1.2.html#conceptos-clave",
    "title": "Instalación de Python",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nPython\n\n\n\n\n\nLenguaje de programación de alto nivel que se utiliza para desarrollar aplicaciones web, científicas, de automatización y más.\n\n\nInterprete\n\n\n\n\n\nPython es un lenguaje interpretado, lo que significa que se ejecuta línea por línea en tiempo real.\n\n\nIDE\n\n\n\n\n\nLos entornos de desarrollo integrados (IDE) como Visual Studio Code (VS Code) o PyCharm brindan herramientas para escribir, depurar y ejecutar código de manera más eficiente.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación de Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.2.html#ejemplo",
    "href": "unidades/unidad1/unidad1.2.html#ejemplo",
    "title": "Instalación de Python",
    "section": "Ejemplo",
    "text": "Ejemplo\nNo se necesita código para esta lección, ya que se trata de instrucciones para la instalación de Python en diferentes sistemas operativos.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación de Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.2.html#explicación",
    "href": "unidades/unidad1/unidad1.2.html#explicación",
    "title": "Instalación de Python",
    "section": "Explicación",
    "text": "Explicación\nPara instalar Python en sistemas Windows, macOS y Linux, se pueden seguir las instrucciones detalladas proporcionadas en el sitio web oficial de Python www.python.org/downloads/.\nLa instalación de Python generalmente incluye el intérprete de Python y una serie de herramientas y bibliotecas estándar que hacen que sea fácil comenzar a programar.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nInstala Python en tu sistema operativo siguiendo las instrucciones del sitio web oficial de Python. Luego, verifica que Python esté correctamente instalado ejecutando el intérprete y escribiendo el siguiente código:\nprint(\"Python se ha instalado correctamente.\")",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación de Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.2.html#explicación-de-la-actividad",
    "href": "unidades/unidad1/unidad1.2.html#explicación-de-la-actividad",
    "title": "Instalación de Python",
    "section": "Explicación de la Actividad",
    "text": "Explicación de la Actividad\nEsta actividad permite a los participantes aplicar lo aprendido instalando Python en su propio sistema y ejecutando un programa sencillo para confirmar que la instalación fue exitosa.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Instalación de Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad1/unidad1.3.html",
    "href": "unidades/unidad1/unidad1.3.html",
    "title": "Uso del REPL, PEP 8 y el Zen de Python",
    "section": "",
    "text": "El REPL (Read-Eval-Print Loop).\nDefinición y Propósito del REPL.\n\nEl REPL (Read-Eval-Print Loop) es una herramienta interactiva que permite ejecutar código Python de forma inmediata y ver los resultados de las operaciones en tiempo real. Es una excelente manera de probar pequeños fragmentos de código, experimentar y depurar sin necesidad de escribir un programa completo.\n\nUso Básico del REPL\nPara iniciar el REPL, simplemente abre una terminal o línea de comandos y escribe python o python3 (dependiendo de tu instalación) seguido de Enter. Esto te llevará al entorno interactivo de Python.\n\n\nEjemplos de Interacción con el REPL\n# Ejemplo 1: Realizar cálculos simples\n&gt;&gt;&gt; 5 + 3\n8\n\n# Ejemplo 2: Definir variables y realizar operaciones\n&gt;&gt;&gt; x = 10\n&gt;&gt;&gt; y = 5\n&gt;&gt;&gt; x * y\n50\n\n# Ejemplo 3: Trabajar con cadenas de texto\n&gt;&gt;&gt; mensaje = \"Hola, mundo!\"\n&gt;&gt;&gt; mensaje.upper()\n'HOLA, MUNDO!'\n\n# Ejemplo 4: Importar módulos y usar funciones\n&gt;&gt;&gt; import math\n&gt;&gt;&gt; math.sqrt(16)\n4.0\n\n\nPEP 8: Guía de Estilo de Python.\n\n\n\n\n\n¿Qué es PEP 8 y Por Qué es Importante?\nPEP 8 (Python Enhancement Proposal 8) es una guía de estilo que establece convenciones para escribir código Python legible y consistente. La adopción de PEP 8 es importante porque facilita la colaboración en proyectos, mejora la legibilidad del código y ayuda a mantener una base de código ordenada y coherente.\nConvenciones de Nombres\nPEP 8 establece reglas para nombrar variables, funciones, clases y módulos en Python. Algunas convenciones clave incluyen:\n\nLas variables y funciones deben usar minúsculas y palabras separadas por guiones bajos (snake_case).\nLas clases deben usar CamelCase (con la primera letra en mayúscula). Los módulos deben tener nombres cortos y en minúsculas.\n\nReglas de Formato y Estilo\nPEP 8 también define reglas de formato, como el uso de espacios en lugar de tabulaciones, la longitud máxima de línea y la organización de importaciones.\nHerramientas para Verificar el Cumplimiento de PEP 8\nExisten herramientas como flake8 y complementos para editores de código que pueden analizar el código en busca de posibles violaciones de PEP 8 y proporcionar sugerencias de corrección. 2.4.3. El Zen de Python\n\n\nIntroducción al Zen de Python (PEP 20).\n\n\n\n\n\nEl Zen de Python es un conjunto de principios y filosofía de diseño que guían el desarrollo de Python. Estos principios se pueden acceder desde el intérprete de Python utilizando el siguiente comando:\nimport this\nLos principios del Zen de Python proporcionan orientación sobre cómo escribir código Python de manera clara y elegante.\nPrincipios y Filosofía de Diseño de Python\nAlgunos de los principios más destacados del Zen de Python incluyen:\n\nLa legibilidad cuenta: El código debe ser legible para los humanos, ya que se lee con más frecuencia de lo que se escribe.\nExplícito es mejor que implícito: El código debe ser claro y no dejar lugar a ambigüedades.\nLa simplicidad vence a la complejidad: Debe preferirse la simplicidad en el diseño y la implementación.\nLos errores nunca deben pasar en silencio: Los errores deben manejarse adecuadamente y, si es posible, informar de manera explícita.\n\n\n\nEjercicios Prácticos\n\nEjercicio 1: Uso del REPL para Realizar Cálculos Simples\n\n\nAbre el REPL de Python.\nRealiza los siguientes cálculos:\n\nSuma: 10 + 5\nResta: 20 - 7\nMultiplicación: 8 * 4\nDivisión: 15 / 3\n\n\n\nEjercicio 2: Verificación de Cumplimiento de PEP 8 en Código Python\nEscribe un pequeño programa en Python que incluya variables, funciones y comentarios.\nUtiliza la herramienta flake8 o un complemento de tu editor de código para verificar si tu código cumple con las reglas de PEP 8.\nCorrige cualquier violación de PEP 8 y vuelve a verificar el código.\nEjercicio 3: Exploración y Reflexión sobre los Principios del Zen de Python\nEjecuta el comando import this en el REPL para acceder a los principios del Zen de Python.\nLee y reflexiona sobre cada uno de los principios.\nEscribe un breve párrafo sobre cómo un principio específico del Zen de Python puede aplicarse al desarrollo de software.\n\n\n\n\n\n\n\nTip\n\n\n\nActividad Práctica\n\nDesarrolla un pequeño programa Python que siga las pautas de PEP 8 y refleje los principios del Zen de Python en su diseño y estilo de codificación. Asegúrate de que el código sea legible y cumpla con las convenciones de nombres y formato de PEP 8.\nEsta subunidad proporciona a los estudiantes una comprensión más profunda de las herramientas y las convenciones de estilo que se utilizan en la programación en Python. Además, les ayuda a reflexionar sobre la filosofía de diseño de Python y cómo aplicarla en la práctica.\n\n\n\n\n\nExplicación\nEsta actividad te invita a desarrollar un pequeño programa en Python que siga las pautas de PEP 8 y refleje los principios del Zen de Python en su diseño y estilo de codificación. La importancia de esta tarea radica en aprender a escribir código que sea limpio, legible y siga las convenciones de la comunidad de Python.\n\nCumplir con PEP 8: PEP 8 es el estándar de estilo de código para Python, y seguirlo es una práctica recomendada en la comunidad de programadores. Tu programa debe seguir las convenciones de formato, nombres de variables, estructura de código, entre otros aspectos que se describen en PEP 8.\nReflejar el Zen de Python: El Zen de Python es una colección de principios filosóficos que guían el diseño del lenguaje Python. Algunos de estos principios incluyen la legibilidad del código, la simplicidad y la importancia de los casos especiales. Tu programa debe reflejar estos principios en su diseño y estilo de codificación.\nLegibilidad y Comentarios: Asegúrate de que tu código sea legible para otras personas. Usa nombres de variables descriptivos, agrega comentarios explicativos cuando sea necesario y sigue las mejores prácticas para hacer que tu código sea fácil de entender.\nAplicación Práctica: Esta actividad te brinda la oportunidad de aplicar los conceptos de estilo de código y filosofía de diseño de Python en un proyecto real. Esto es importante ya que en la programación colaborativa, otros desarrolladores deben poder entender y trabajar con tu código de manera eficiente.\n\nAl completar esta actividad, habrás mejorado tus habilidades en la escritura de código Python de alta calidad y te habrás familiarizado con las convenciones y filosofía de diseño de Python. Recuerda que escribir código limpio es una habilidad esencial para cualquier programador.",
    "crumbs": [
      "Unidad 1: Introducción a Python",
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Uso del REPL, PEP 8 y el Zen de Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.1.html#identación",
    "href": "unidades/unidad2/unidad2.1.html#identación",
    "title": "Identación y Comentarios",
    "section": "Identación",
    "text": "Identación",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Identación y Comentarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.1.html#conceptos-clave",
    "href": "unidades/unidad2/unidad2.1.html#conceptos-clave",
    "title": "Identación y Comentarios",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nIdentación\n\nEspacios o tabulaciones al comienzo de una línea que indican la estructura del código.\nBloques de Código: Conjuntos de instrucciones que se agrupan juntas y se ejecutan en conjunto.\nPEP 8: Guía de estilo para la escritura de código en Python que recomienda el uso de cuatro espacios para la identación.\n\nEjemplo:\n# Uso de la identación en un condicional\nnumero = 10\n\nif numero &gt; 5:\n    print(\"El número es mayor que 5\")\nelse:\n    print(\"El número no es mayor que 5\")\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nEscribe un programa que solicite al usuario su edad y muestre un mensaje según si es mayor de 18 años o no.\n\n\n\n\n\nPosible solución\n\nResumen:\nEsta actividad permite a los participantes comprender la importancia de la identación en Python al trabajar con bloques de código como los condicionales. Les ayuda a desarrollar el hábito de utilizar la identación adecuada para mantener el código organizado y legible.\n# Programa que solicita la edad y muestra un mensaje\nedad = int(input(\"Ingrese su edad: \"))\n\nif edad &gt; 18:\n    print(\"Eres mayor de edad.\")\nelse:\n    print(\"Eres menor de edad.\")\n¿Qué hicimos?\n\nSe solicita la edad al usuario y se almacena en la variable edad.\nSe utiliza un condicional if para verificar si la edad es mayor que 18.\nSi la edad es mayor que 18, se muestra “Eres mayor de edad”.\nSi la edad es menor o igual a 18, se muestra “Eres menor de edad”.",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Identación y Comentarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.1.html#comentarios",
    "href": "unidades/unidad2/unidad2.1.html#comentarios",
    "title": "Identación y Comentarios",
    "section": "Comentarios",
    "text": "Comentarios",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Identación y Comentarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.1.html#conceptos-clave-1",
    "href": "unidades/unidad2/unidad2.1.html#conceptos-clave-1",
    "title": "Identación y Comentarios",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nComentarios\n\nSon notas en el código que no se ejecutan y se utilizan para explicar el propósito y funcionamiento de partes del programa.\nComentarios de una línea: Se crean con el símbolo “#” y abarcan una sola línea.\nComentarios de múltiples líneas: Se crean entre triple comillas (““” o ’’’) y pueden abarcar múltiples líneas.\n\nEjemplo:\n# Este es un comentario de una línea\n\n\"\"\"\nEste es un comentario\nde múltiples líneas.\nPuede abarcar varias líneas.\n\"\"\"\n\nnumero = 42  # Este comentario está después de una instrucción\n\n\n\n\n\n\nActividad Práctica\n\n\n\nEscribe un programa que realice una tarea sencilla y agrega comentarios para explicar lo que hace cada parte. Escribe un comentario de múltiples líneas que explique el propósito general de tu programa.\n\n\n\n\nPosible solución\n\n# Este programa calcula el área de un triángulo\n# solicitando la base y la altura al usuario.\n\n# Solicitar la base y almacenarla en la variable 'base'\nbase = float(input(\"Ingrese la base del triángulo: \"))\n\n# Solicitar la altura y almacenarla en la variable 'altura'\naltura = float(input(\"Ingrese la altura del triángulo: \"))\n\n# Calcular el área del triángulo\narea = 0.5 * base * altura\n\n# Mostrar el resultado\nprint(f\"El área del triángulo es: {area}\")",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Identación y Comentarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.1.html#qué-aprendimos",
    "href": "unidades/unidad2/unidad2.1.html#qué-aprendimos",
    "title": "Identación y Comentarios",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn este tema, aprendimos la importancia de la identación en Python para estructurar nuestro código correctamente. La identación nos permite definir bloques de código, como en los condicionales, de manera clara y legible.\nTambién aprendimos cómo agregar comentarios en Python para documentar nuestro código. Los comentarios son esenciales para explicar el propósito y el funcionamiento de las partes del programa y facilitan la colaboración entre programadores.",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>6</span>  <span class='chapter-title'>Identación y Comentarios</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.2.html#variables",
    "href": "unidades/unidad2/unidad2.2.html#variables",
    "title": "Variables y Variables Múltiples",
    "section": "Variables",
    "text": "Variables\nLas variables son fundamentales en la programación ya que permiten almacenar y manipular datos. Aprenderemos cómo declarar y utilizar variables en Python.\n\nConceptos Clave\nVariables\n\nNombres que representan ubicaciones de memoria donde se almacenan datos.\n\nDeclaración de Variables\n\nAsignación de un valor a un nombre utilizando el operador “=”.\nConvenciones de Nombres: Siguen reglas para ser descriptivos y seguir una estructura (por ejemplo, letras minúsculas y guiones bajos para espacios).\n\nEjemplo:\nnombre = \"Ana\"\nedad = 30\nsaldo_bancario = 1500.75\nes_mayor_de_edad = True\nEn este ejemplo, se declaran variables para almacenar el nombre de una persona, su edad, su saldo bancario y un valor booleano que indica si es mayor de edad.\nLos nombres de variables son descriptivos y siguen la convención de nombres recomendada (letras minúsculas y guiones bajos para espacios).\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea variables para almacenar información personal, como tu ciudad, tu edad y tu ocupación.\nDeclara variables para almacenar cantidades numéricas, como el precio de un producto y la cantidad de unidades disponibles.",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Variables y Variables Múltiples</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.2.html#explicación-de-la-actividad.",
    "href": "unidades/unidad2/unidad2.2.html#explicación-de-la-actividad.",
    "title": "Variables y Variables Múltiples",
    "section": "Explicación de la Actividad.",
    "text": "Explicación de la Actividad.\nEsta actividad permite a los participantes practicar la declaración de variables en Python y aplicar el concepto de convenciones de nombres. Les ayuda a comprender cómo almacenar y acceder a datos utilizando variables descriptivas y significativas. Múltiples Variables\nEn Python, es posible asignar valores a múltiples variables en una sola línea. Aprenderemos cómo declarar y utilizar múltiples variables de manera eficiente.\n\nConceptos Clave\nAsignación Múltiple\n\nPermite asignar valores a varias variables en una línea.\n\nDesempaquetado de Valores\n\nSe pueden asignar valores de una lista o tupla a múltiples variables en una sola operación.\n\nIntercambio de Valores\n\nSe pueden intercambiar los valores de dos variables utilizando asignación múltiple.\n\nEjemplo:\nnombre, edad, altura = \"María\", 28, 1.65\nproductos = (\"Manzanas\", \"Peras\", \"Uvas\")\nproducto1, producto2, producto3 = productos\n\n\nExplicación:\n\nEn el primer ejemplo, se utilizó la asignación múltiple para declarar tres variables en una sola línea.\nEn el segundo ejemplo, se desempaquetaron los valores de una tupla en variables individuales.\n\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una lista con los nombres de tus tres colores favoritos.\nUtiliza la asignación múltiple para asignar los valores de la lista a tres variables individuales.\n\n\n\n\n\nExplicación de la Actividad\nEsta actividad permite a los participantes practicar la asignación múltiple y el desempaquetado de valores. Les ayuda a comprender cómo trabajar eficientemente con múltiples variables y cómo aprovechar estas técnicas para simplificar el código.",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>7</span>  <span class='chapter-title'>Variables y Variables Múltiples</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.3.html#conceptos-clave",
    "href": "unidades/unidad2/unidad2.3.html#conceptos-clave",
    "title": "Concatenación",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\nConcatenación: La concatenación es la unión de cadenas de texto. Aprenderemos cómo combinar cadenas de texto en Python para crear mensajes más complejos.\nOperador +: Se utiliza para concatenar cadenas de texto.\nConversión a Cadena: Es necesario convertir valores no string a cadenas antes de concatenarlos.",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Concatenación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad2/unidad2.3.html#ejemplo",
    "href": "unidades/unidad2/unidad2.3.html#ejemplo",
    "title": "Concatenación",
    "section": "Ejemplo",
    "text": "Ejemplo\nnombre = \"Luisa\"\nmensaje = \"Hola, \" + nombre + \". ¿Cómo estás?\"\nedad = 25\nmensaje_edad = \"Tienes \" + str(edad) + \" años.\"\n\nExplicación:\nEn este ejemplo, se utilizó el operador “+” para concatenar cadenas de texto. La variable “edad” se convirtió a una cadena utilizando la función “str()” antes de concatenarla.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una variable con tu comida favorita.\nUtiliza la concatenación para crear un mensaje que incluya tu comida favorita.\n\n\n\n\n\nExplicación de la Actividad:\nEsta actividad permite a los participantes practicar la concatenación de cadenas de texto y comprender cómo construir mensajes más complejos utilizando variables y texto. Les ayuda a mejorar su capacidad para crear mensajes personalizados en sus programas.",
    "crumbs": [
      "Unidad 2: Introducción a la Programación con Python",
      "<span class='chapter-number'>8</span>  <span class='chapter-title'>Concatenación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.1.html#conceptos-clave",
    "href": "unidades/unidad3/unidad3.1.html#conceptos-clave",
    "title": "String y Números",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\nString\n\n\n\n\n\nUn string es una secuencia de caracteres alfanuméricos. Se pueden definir utilizando comillas simples o dobles.\nNúmeros Enteros (int)\n\n\n\n\n\nLos números enteros representan valores numéricos enteros, ya sean positivos o negativos.\nNúmeros de Punto Flotante (float)\n\n\n\n\n\nLos números de punto flotante representan valores numéricos con decimales.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>String y Números</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.1.html#ejemplo",
    "href": "unidades/unidad3/unidad3.1.html#ejemplo",
    "title": "String y Números",
    "section": "Ejemplo",
    "text": "Ejemplo\n# Strings\nmensaje = \"Hola, bienvenido al curso de Python.\"\nnombre = 'María'\n\n# Números\nedad = 25\nsaldo = 1500.75\n\nExplicación:\nEn este ejemplo, se crean variables que almacenan strings y números. Los strings se definen utilizando comillas simples o dobles, y los números enteros y de punto flotante se asignan directamente a variables.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una variable con el título de tu canción favorita.\nAsigna tu edad a una variable y tu altura a otra variable.\nCombina las variables para crear un mensaje personalizado.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la creación de strings y trabajar con números enteros y de punto flotante. Les ayuda a comprender cómo almacenar y manipular diferentes tipos de datos en Python.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>String y Números</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.1.html#qué-aprendimos",
    "href": "unidades/unidad3/unidad3.1.html#qué-aprendimos",
    "title": "String y Números",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\nEn esta lección, aprendimos sobre los dos tipos de datos fundamentales en Python: strings y números. Aprendimos cómo crear y trabajar con strings utilizando comillas simples o dobles. También exploramos dos tipos numéricos clave: números enteros (int) y números de punto flotante (float). Estos conceptos son esenciales para manejar información en Python y forman la base de muchos programas y aplicaciones.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>9</span>  <span class='chapter-title'>String y Números</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.2.html#conceptos-clave",
    "href": "unidades/unidad3/unidad3.2.html#conceptos-clave",
    "title": "Listas y Tuplas",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nListas\n\n\n\n\n\nLas listas son secuencias ordenadas de elementos que pueden ser de diferentes tipos. Permiten almacenar varios elementos en una sola variable.\n\n\nTuplas\n\n\n\n\n\nLas tuplas son similares a las listas, pero son inmutables, lo que significa que no se pueden modificar después de ser creadas.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Listas y Tuplas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.2.html#ejemplo",
    "href": "unidades/unidad3/unidad3.2.html#ejemplo",
    "title": "Listas y Tuplas",
    "section": "Ejemplo",
    "text": "Ejemplo\n# Listas\nfrutas = [\"manzana\", \"banana\", \"naranja\", \"uva\"]\nprimer_fruta = frutas[0]\nsegunda_fruta = frutas[1]\n\n# Tuplas\ncoordenadas = (3, 5)\nx = coordenadas[0]\ny = coordenadas[1]\n\nExplicación:\nEn este ejemplo, se crea una lista de frutas y una tupla de coordenadas. Se accede a elementos individuales de la lista y la tupla utilizando índices.\nLos índices comienzan desde 0, por lo que la primera fruta tiene el índice 0.\n\n\n\n\n\n\nActividad Práctica (Listas):\n\n\n\n\nCrea una lista con los nombres de tus tres películas favoritas.\nAccede al segundo elemento de la lista e imprímelo en la consola.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la creación de listas y el acceso a elementos utilizando índices. Les ayuda a comprender cómo organizar y acceder a múltiples elementos en una sola variable.\n\n\n\n\n\n\nActividad Práctica (Tuplas):\n\n\n\n\nCrea una tupla con las estaciones del año.\nIntenta modificar un elemento de la tupla y observa el error que se produce.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la creación de tuplas y comprender la diferencia entre listas y tuplas en términos de inmutabilidad. Les ayuda a comprender cómo utilizar tuplas cuando necesitan almacenar datos que no deben cambiar.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Listas y Tuplas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.2.html#qué-aprendimos",
    "href": "unidades/unidad3/unidad3.2.html#qué-aprendimos",
    "title": "Listas y Tuplas",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\nEn esta lección, aprendimos sobre dos tipos de estructuras de datos en Python: listas y tuplas.\nListas: Son secuencias ordenadas de elementos que pueden modificarse. Se accede a los elementos utilizando índices.\nTuplas: Son similares a las listas, pero son inmutables, lo que significa que no pueden modificarse después de su creación. También se accede a los elementos utilizando índices.\nEstas estructuras nos permiten almacenar y organizar datos de manera eficiente en Python, y la elección entre listas y tuplas depende de si necesitamos datos modificables o inmutables en nuestros programas.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>10</span>  <span class='chapter-title'>Listas y Tuplas</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.3.html#diccionarios",
    "href": "unidades/unidad3/unidad3.3.html#diccionarios",
    "title": "Diccionarios y Booleanos",
    "section": "Diccionarios",
    "text": "Diccionarios\n\n\n\n\n\n\nConceptos Clave\n\nDiccionarios\n\nLos diccionarios son estructuras de datos que almacenan pares clave-valor.\n\n\nClaves\nSon los nombres o etiquetas utilizados para acceder a los valores en el diccionario.\n\n\nValores\nSon los datos asociados a cada clave en el diccionario.\n\n\n\nEjemplo\n# Creación de un diccionario\npersona = {\n    \"nombre\": \"Juan\",\n    \"edad\": 30,\n    \"ciudad\": \"México\"\n}\n\n# Acceso a valores utilizando claves\nnombre = persona[\"nombre\"]\nedad = persona[\"edad\"]\n\n\nExplicación:\nEn este ejemplo, se crea un diccionario que almacena información de una persona, como nombre, edad y ciudad.\nSe accede a los valores del diccionario utilizando las claves correspondientes.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea un diccionario que almacene información de tus libros favoritos, incluyendo título y autor.\nAccede a los valores del diccionario utilizando las claves y muestra la información en la consola.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la creación de diccionarios y acceder a los valores utilizando las claves. Les ayuda a comprender cómo organizar datos en pares clave-valor y cómo acceder a la información de manera eficiente.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Diccionarios y Booleanos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.3.html#booleanos",
    "href": "unidades/unidad3/unidad3.3.html#booleanos",
    "title": "Diccionarios y Booleanos",
    "section": "Booleanos",
    "text": "Booleanos",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Diccionarios y Booleanos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.3.html#conceptos-clave-1",
    "href": "unidades/unidad3/unidad3.3.html#conceptos-clave-1",
    "title": "Diccionarios y Booleanos",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\nBooleanos\n\nTipo de dato que representa valores de verdad (True o False).\n\nExpresiones Lógicas: Combinaciones de valores booleanos utilizando operadores lógicos como and, or y not. Ejemplo\n# Variables booleanas\nes_mayor_de_edad = True\ntiene_tarjeta = False\n\n# Expresiones lógicas\npuede_ingresar = es_mayor_de_edad and tiene_tarjeta\n\nExplicación:\nEn este ejemplo, se utilizan variables booleanas para representar si alguien es mayor de edad y si tiene una tarjeta.\nSe utiliza una expresión lógica para evaluar si alguien puede ingresar basado en ambas condiciones.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea variables booleanas que representen si tienes una mascota y si te gusta el deporte.\nUtiliza expresiones lógicas para determinar si puedes llevar a tu mascota a un lugar que requiere tu atención durante un partido de tu deporte favorito.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar el uso de variables booleanas y expresiones lógicas para tomar decisiones basadas en condiciones booleanas. Les ayuda a comprender cómo trabajar con valores de verdad y cómo utilizarlos para evaluar situaciones en el código.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>11</span>  <span class='chapter-title'>Diccionarios y Booleanos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.4.html#conceptos-clave",
    "href": "unidades/unidad3/unidad3.4.html#conceptos-clave",
    "title": "Range",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nrange\n\nTipo de dato utilizado para generar secuencias de números en un rango.\n\n\n\nParámetros de range\n\nSe pueden especificar el valor inicial, valor final y paso de la secuencia.\n\n\n\nConversión a Listas\n\nEs posible convertir un objeto range en una lista utilizando la función list().",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Range</span>"
    ]
  },
  {
    "objectID": "unidades/unidad3/unidad3.4.html#ejemplo",
    "href": "unidades/unidad3/unidad3.4.html#ejemplo",
    "title": "Range",
    "section": "Ejemplo",
    "text": "Ejemplo\n# Generación de secuencias de números\nsecuencia1 = range(5)          # 0, 1, 2, 3, 4\nsecuencia2 = range(2, 10)      # 2, 3, 4, 5, 6, 7, 8, 9\nsecuencia3 = range(1, 11, 2)   # 1, 3, 5, 7, 9\n\n# Conversión a lista\nlista_secuencia1 = list(secuencia1)\n\nExplicación:\nEn este ejemplo, se utilizan diferentes valores para crear secuencias de números utilizando el tipo de dato range.\nLa función list() se utiliza para convertir una secuencia de range en una lista.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una secuencia de números del 10 al 20 con un paso de 2.\nConvierte la secuencia de números en una lista y muestra los elementos en la consola.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la creación de secuencias de números utilizando range y cómo convertirlas en listas para trabajar con los elementos individualmente. Les ayuda a comprender cómo generar secuencias de números en diferentes rangos.",
    "crumbs": [
      "Unidad 3: Tipos de Datos",
      "<span class='chapter-number'>12</span>  <span class='chapter-title'>Range</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.1.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.1.html#conceptos-clave",
    "title": "Introducción a If",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nControl de Flujo\nManejo de la ejecución del código basado en condiciones.\n\n\nEstructura if\nPermite ejecutar un bloque de código si una condición es verdadera.\n\n\nBloque de Código\nConjunto de instrucciones que se ejecutan si la condición es verdadera.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introducción a If</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.1.html#ejemplo",
    "href": "unidades/unidad4/unidad4.1.html#ejemplo",
    "title": "Introducción a If",
    "section": "Ejemplo",
    "text": "Ejemplo\nedad = 18\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad.\")\n\nExplicación:\nEn este ejemplo, se utiliza la estructura if para verificar si la variable “edad” es mayor o igual a 18.\nSi la condición es verdadera, se ejecuta el bloque de código que muestra un mensaje.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una variable que represente tu puntuación en un juego.\nUtiliza una estructura if para mostrar un mensaje diferente según si tu puntuación es mayor o igual a 100.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la utilización de la estructura if para tomar decisiones basadas en condiciones. Les ayuda a comprender cómo ejecutar diferentes bloques de código según la situación y cómo utilizar el control de flujo en sus programas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introducción a If</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.1.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.1.html#qué-aprendimos",
    "title": "Introducción a If",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn este tema, aprendimos los conceptos fundamentales del control de flujo en programación y cómo utilizar la estructura if para ejecutar código condicionalmente. Ahora somos capaces de tomar decisiones en nuestros programas basadas en condiciones específicas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>13</span>  <span class='chapter-title'>Introducción a If</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.2.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.2.html#conceptos-clave",
    "title": "If y Condicionales",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nEstructura elif\nPermite verificar una condición adicional si la condición anterior es falsa.\n\n\nEstructura else\nDefine un bloque de código que se ejecuta si todas las condiciones anteriores son falsas.\n\n\nAnidación de Estructuras if\nEs posible anidar múltiples estructuras if para manejar situaciones más complejas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>If y Condicionales</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.2.html#ejemplo",
    "href": "unidades/unidad4/unidad4.2.html#ejemplo",
    "title": "If y Condicionales",
    "section": "Ejemplo",
    "text": "Ejemplo\npuntaje = 85\n\nif puntaje &gt;= 90:\n    print(\"¡Excelente trabajo!\")\nelif puntaje &gt;= 70:\n    print(\"Buen trabajo.\")\nelse:\n    print(\"Necesitas mejorar.\")\n\nExplicación:\nEn este ejemplo, se utiliza la estructura if, elif y else para evaluar diferentes rangos de puntajes y mostrar mensajes correspondientes.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una variable que represente tu calificación en un examen.\nUtiliza una estructura if, elif y else para mostrar mensajes diferentes según la calificación obtenida.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar el uso de la estructura if, elif y else para manejar múltiples condiciones y decisiones en sus programas. Les ayuda a comprender cómo ejecutar diferentes bloques de código en función de los resultados de las pruebas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>If y Condicionales</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.2.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.2.html#qué-aprendimos",
    "title": "If y Condicionales",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn este tema, aprendimos a utilizar la estructura if, elif y else para manejar múltiples condiciones y ejecutar código basado en resultados específicos. También comprendimos cómo anidar estructuras if para manejar situaciones más complejas en la programación.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>14</span>  <span class='chapter-title'>If y Condicionales</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.3.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.3.html#conceptos-clave",
    "title": "If, elif y else",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nEstructura elif\nPermite verificar una condición adicional si la condición anterior es falsa.\n\n\nEstructura else\nDefine un bloque de código que se ejecuta si todas las condiciones anteriores son falsas.\n\n\nAnidación de Estructuras if\nEs posible anidar múltiples estructuras if para manejar situaciones más complejas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>If, elif y else</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.3.html#ejemplo",
    "href": "unidades/unidad4/unidad4.3.html#ejemplo",
    "title": "If, elif y else",
    "section": "Ejemplo",
    "text": "Ejemplo\npuntaje = 85\n\nif puntaje &gt;= 90:\n    print(\"¡Excelente trabajo!\")\nelif puntaje &gt;= 70:\n    print(\"Buen trabajo.\")\nelse:\n    print(\"Necesitas mejorar.\")\n\nExplicación:\nEn este ejemplo, se utiliza la estructura if, elif y else para evaluar diferentes rangos de puntajes y mostrar mensajes correspondientes.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una variable que represente tu calificación en un examen.\nUtiliza una estructura if, elif y else para mostrar mensajes diferentes según la calificación obtenida.\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar el uso de la estructura if, elif y else para manejar múltiples condiciones y decisiones en sus programas. Les ayuda a comprender cómo ejecutar diferentes bloques de código en función de los resultados de las pruebas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>If, elif y else</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.3.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.3.html#qué-aprendimos",
    "title": "If, elif y else",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo utilizar la estructura if, elif y else para tomar decisiones basadas en múltiples condiciones. Esto nos permite ejecutar diferentes bloques de código según diferentes situaciones. También exploramos la anidación de estructuras if, lo que nos permite manejar situaciones aún más complejas en la programación.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>15</span>  <span class='chapter-title'>If, elif y else</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.4.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.4.html#conceptos-clave",
    "title": "And y Or",
    "section": "Conceptos Clave:",
    "text": "Conceptos Clave:\n\nOperador and\nRetorna True si ambas condiciones son verdaderas.\n\n\nOperador or\nRetorna True si al menos una de las condiciones es verdadera.\n\n\nCombinación de Condiciones\nLos operadores and y or permiten combinar múltiples condiciones en una sola expresión.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>And y Or</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.4.html#ejemplo",
    "href": "unidades/unidad4/unidad4.4.html#ejemplo",
    "title": "And y Or",
    "section": "Ejemplo:",
    "text": "Ejemplo:\nedad = 20\ntiene_permiso = True\n\nif edad &gt;= 18 and tiene_permiso:\n    print(\"Puedes ingresar.\")\nelse:\n    print(\"No puedes ingresar.\")\n\nExplicación:\nEn este ejemplo, se utiliza el operador and para evaluar si la edad es mayor o igual a 18 y si el usuario tiene permiso.\nSi ambas condiciones son verdaderas, se permite el ingreso.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea dos variables que representen si un usuario tiene una cuenta premium y si su suscripción está activa.\nUtiliza una estructura if y el operador and para determinar si el usuario tiene acceso premium.\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar la combinación de condiciones utilizando los operadores and y or. Les ayuda a comprender cómo crear expresiones más complejas para tomar decisiones basadas en múltiples condiciones en sus programas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>And y Or</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.4.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.4.html#qué-aprendimos",
    "title": "And y Or",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo utilizar los operadores lógicos and y or para combinar condiciones y crear expresiones más complejas en nuestras estructuras de control de flujo. Estos operadores son útiles cuando necesitamos tomar decisiones basadas en múltiples condiciones en nuestros programas.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>16</span>  <span class='chapter-title'>And y Or</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.5.html#introducción-a-while",
    "href": "unidades/unidad4/unidad4.5.html#introducción-a-while",
    "title": "Introducción a While.",
    "section": "Introducción a While",
    "text": "Introducción a While\nEn esta lección, comenzaremos a explorar la estructura de control de flujo while, que nos permite crear bucles que se ejecutan repetidamente mientras se cumple una condición.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Introducción a While.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.5.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.5.html#conceptos-clave",
    "title": "Introducción a While.",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nBucle While\nUn bucle que se ejecuta mientras una condición sea verdadera.\n\n\nCondición\nLa expresión que se evalúa para determinar si el bucle debe continuar ejecutándose.\n\n\nBloque de Código\nEl conjunto de instrucciones que se ejecutan dentro del bucle while.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Introducción a While.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.5.html#ejemplo",
    "href": "unidades/unidad4/unidad4.5.html#ejemplo",
    "title": "Introducción a While.",
    "section": "Ejemplo",
    "text": "Ejemplo\ncontador = 0\n\nwhile contador &lt; 5:\n    print(\"Contador:\", contador)\n    contador += 1\n\nExplicación:\nEn este ejemplo, se utiliza un bucle while para imprimir el valor del contador mientras sea menor que 5.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea un bucle while que pida al usuario ingresar un número positivo menor que 10.\nUtiliza la sentencia break para salir del bucle una vez que el usuario ingrese un número válido.\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar el uso de la sentencia break para controlar la ejecución de un bucle while y evitar bucles infinitos. Les ayuda a comprender cómo manejar situaciones en las que es necesario salir de un bucle antes de que la condición sea falsa.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Introducción a While.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.5.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.5.html#qué-aprendimos",
    "title": "Introducción a While.",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos los conceptos clave de la estructura de control de flujo while. Descubrimos cómo crear bucles que se ejecutan mientras se cumple una condición y cómo utilizarlos en situaciones prácticas en la programación.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>17</span>  <span class='chapter-title'>Introducción a While.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.6.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.6.html#conceptos-clave",
    "title": "While loop.",
    "section": "Conceptos Clave:",
    "text": "Conceptos Clave:\n\nSentencia break:\nSe utiliza para salir de un bucle antes de que la condición sea falsa.\n\n\nBucles Infinitos:\nSi no se maneja adecuadamente, un bucle while puede ejecutarse infinitamente.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>While loop.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.6.html#ejemplo",
    "href": "unidades/unidad4/unidad4.6.html#ejemplo",
    "title": "While loop.",
    "section": "Ejemplo:",
    "text": "Ejemplo:\ncontador = 0\n\nwhile True:\n    print(\"Contador:\", contador)\n    contador += 1\n    if contador &gt;= 5:\n        break\n\nExplicación:\nEn este ejemplo, se utiliza un bucle while que se ejecuta infinitamente.\nSe utiliza la sentencia break para salir del bucle cuando el contador llega a 5.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\n\nCrea un bucle while que pida al usuario ingresar un número positivo menor que 10.\nUtiliza la sentencia break para salir del bucle una vez que el usuario ingrese un número válido.\n\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar el uso de la sentencia break para controlar la ejecución de un bucle while y evitar bucles infinitos. Les ayuda a comprender cómo manejar situaciones en las que es necesario salir de un bucle antes de que la condición sea falsa.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>While loop.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.6.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.6.html#qué-aprendimos",
    "title": "While loop.",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo utilizar la estructura while para crear bucles en Python que se ejecutan mientras se cumpla una condición. También aprendimos a utilizar la sentencia break para salir de un bucle antes de que la condición sea falsa. Los bucles while son útiles cuando necesitamos ejecutar un bloque de código repetidamente hasta que se cumpla una condición específica.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>18</span>  <span class='chapter-title'>While loop.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.7.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.7.html#conceptos-clave",
    "title": "While, break y continue.",
    "section": "Conceptos Clave:",
    "text": "Conceptos Clave:\n\nSentencia continue\nSe utiliza para saltar a la siguiente iteración del bucle sin ejecutar el resto del código en esa iteración.\n\n\nSaltar Iteraciones\nLa sentencia continue permite omitir ciertas iteraciones basadas en una condición.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>While, break y continue.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.7.html#ejemplo",
    "href": "unidades/unidad4/unidad4.7.html#ejemplo",
    "title": "While, break y continue.",
    "section": "Ejemplo",
    "text": "Ejemplo\ncontador = 0\n\nwhile contador &lt; 5:\n    contador += 1\n    if contador == 3:\n        continue\n    print(\"Contador:\", contador)\n\nExplicación:\nEn este ejemplo, se utiliza un bucle while para imprimir el valor del contador.\nSe utiliza la sentencia continue para omitir la iteración cuando el contador es igual a 3.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea un bucle while que imprima los números del 1 al 10, pero omite la impresión del número 5.\nUtiliza la sentencia continue para lograr esto.\n\n\n\n\nExplicación:\nEsta actividad permite a los participantes practicar el uso de la sentencia continue para omitir iteraciones específicas en un bucle while. Les ayuda a comprender cómo controlar la ejecución de un bucle y realizar acciones selectivas en cada iteración.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>While, break y continue.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.7.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.7.html#qué-aprendimos",
    "title": "While, break y continue.",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo utilizar la sentencia continue en un bucle while para saltar a la siguiente iteración sin ejecutar el resto del código en esa iteración. Esto es útil cuando queremos omitir ciertas iteraciones basadas en una condición específica. El control preciso de las iteraciones en un bucle puede ser esencial para realizar tareas específicas en un programa.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>19</span>  <span class='chapter-title'>While, break y continue.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.8.html#conceptos-clave",
    "href": "unidades/unidad4/unidad4.8.html#conceptos-clave",
    "title": "For Loop",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nBucle For\nUn bucle que itera a través de una secuencia de elementos y ejecuta un bloque de código para cada elemento.\n\n\nIteración\nCada ejecución del bloque de código en un bucle for se llama iteración.\n\n\nElemento de la Secuencia\nLos elementos individuales en la secuencia que se está recorriendo.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>For Loop</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.8.html#ejemplo",
    "href": "unidades/unidad4/unidad4.8.html#ejemplo",
    "title": "For Loop",
    "section": "Ejemplo",
    "text": "Ejemplo\nfrutas = [\"manzana\", \"banana\", \"cereza\"]\n\nfor fruta in frutas:\n    print(fruta)\n\nExplicación:\nEn este ejemplo, utilizamos un bucle for para iterar a través de la lista frutas e imprimimos cada fruta en la consola.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una lista de números del 1 al 5 y utiliza un bucle for para imprimir el cuadrado de cada número.\n\n\n\n\nExplicación:\nEsta actividad te permite practicar cómo usar un bucle for para recorrer una secuencia de números y realizar operaciones en cada elemento. Los bucles for son muy útiles para procesar datos en una variedad de situaciones de programación.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>For Loop</span>"
    ]
  },
  {
    "objectID": "unidades/unidad4/unidad4.8.html#qué-aprendimos",
    "href": "unidades/unidad4/unidad4.8.html#qué-aprendimos",
    "title": "For Loop",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo usar un bucle for para iterar a través de una secuencia de elementos en Python. Comprendimos los conceptos clave relacionados con los bucles for y cómo aplicarlos en la escritura de código.",
    "crumbs": [
      "Unidad 4: Control de Flujo",
      "<span class='chapter-number'>20</span>  <span class='chapter-title'>For Loop</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/unidad5.1.html#conceptos-clave",
    "href": "unidades/unidad5/unidad5.1.html#conceptos-clave",
    "title": "Introducción a Funciones",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nFunción\nUn bloque de código reutilizable que realiza una tarea específica cuando se llama.\n\n\nDefinición de Función\nCrear una función especificando su nombre, parámetros y cuerpo.\n\n\nLlamada de Función\nEjecutar una función para que realice su tarea específica.",
    "crumbs": [
      "Unidad 5: Funciones y Recursividad",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introducción a Funciones</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/unidad5.1.html#ejemplo",
    "href": "unidades/unidad5/unidad5.1.html#ejemplo",
    "title": "Introducción a Funciones",
    "section": "Ejemplo",
    "text": "Ejemplo\n# Definición de una función\ndef saludar(nombre):\n    print(\"¡Hola, \" + nombre + \"!\")\n\n# Llamada de función\nsaludar(\"Juan\")\n\nExplicación:\nEn este ejemplo, definimos una función llamada saludar que toma un parámetro nombre e imprime un saludo personalizado. Luego, llamamos a esta función con el nombre “Juan”.\n\n\n\n\n\n\nTip\n\n\n\nActividad Práctica\nCrea una función llamada calcular_area_rectangulo que tome dos parámetros: largo y ancho. La función debe calcular y devolver el área de un rectángulo. Luego, llama a la función con valores diferentes para largo y ancho y muestra el resultado.\n\n\n\n\nExplicación:\nEsta actividad te permite practicar cómo definir funciones con parámetros y cómo utilizarlas para realizar cálculos específicos. Las funciones son una parte fundamental de la programación, ya que permiten organizar y reutilizar el código de manera efectiva.",
    "crumbs": [
      "Unidad 5: Funciones y Recursividad",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introducción a Funciones</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/unidad5.1.html#qué-aprendimos",
    "href": "unidades/unidad5/unidad5.1.html#qué-aprendimos",
    "title": "Introducción a Funciones",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos qué son las funciones en Python y cómo definirlas y usarlas en nuestros programas. Comprendimos los conceptos clave relacionados con las funciones y cómo aplicarlos en la escritura de código.",
    "crumbs": [
      "Unidad 5: Funciones y Recursividad",
      "<span class='chapter-number'>21</span>  <span class='chapter-title'>Introducción a Funciones</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/unidad5.2.html#conceptos-clave",
    "href": "unidades/unidad5/unidad5.2.html#conceptos-clave",
    "title": "Recursividad",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nRecursividad\nUna técnica en la que una función se llama a sí misma para resolver un problema más grande.\n\n\nCaso Base\nUn caso en el que la función recursiva se detiene y no se llama a sí misma nuevamente.\n\n\nLlamada Recursiva\nLa acción de una función llamándose a sí misma.",
    "crumbs": [
      "Unidad 5: Funciones y Recursividad",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Recursividad</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/unidad5.2.html#ejemplo",
    "href": "unidades/unidad5/unidad5.2.html#ejemplo",
    "title": "Recursividad",
    "section": "Ejemplo",
    "text": "Ejemplo\n# Función recursiva para calcular el factorial\ndef factorial(n):\n    # Caso base\n    if n == 1:\n        return 1\n    # Llamada recursiva\n    else:\n        return n * factorial(n - 1)\n\nresultado = factorial(5)\nprint(\"El factorial de 5 es:\", resultado)\n\nExplicación:\nEn este ejemplo, definimos una función llamada factorial que calcula el factorial de un número n. Utilizamos la recursividad para dividir el problema en partes más pequeñas hasta llegar al caso base (cuando n es igual a 1). Luego, multiplicamos los resultados de las llamadas recursivas para obtener el factorial.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una función recursiva llamada sumatoria que calcule la suma de los números del 1 al n. Utiliza la recursividad para resolver este problema y luego llama a la función con diferentes valores de n para calcular sumatorias diferentes.\n\n\n\n\nExplicación:\nEsta actividad te permite practicar el concepto de recursividad al resolver un problema diferente. La recursividad es especialmente útil cuando un problema se puede descomponer en subproblemas similares.",
    "crumbs": [
      "Unidad 5: Funciones y Recursividad",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Recursividad</span>"
    ]
  },
  {
    "objectID": "unidades/unidad5/unidad5.2.html#qué-aprendimos",
    "href": "unidades/unidad5/unidad5.2.html#qué-aprendimos",
    "title": "Recursividad",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos qué es la recursividad y cómo funciona. Comprendimos los conceptos clave de la recursividad, incluyendo el caso base y las llamadas recursivas. La recursividad es una técnica poderosa que se utiliza en muchos algoritmos y problemas de programación.",
    "crumbs": [
      "Unidad 5: Funciones y Recursividad",
      "<span class='chapter-number'>22</span>  <span class='chapter-title'>Recursividad</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.1.html#conceptos-clave-en-poo",
    "href": "unidades/unidad6/unidad6.1.html#conceptos-clave-en-poo",
    "title": "Programación Orientada a Objetos (POO)",
    "section": "Conceptos Clave en POO",
    "text": "Conceptos Clave en POO\n\nObjetos\nLos objetos son instancias de clases y representan entidades del mundo real. Pueden tener atributos que describen sus características y métodos que definen su comportamiento.\nEjemplo:\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        print(f\"Hola, mi nombre es {self.nombre} y tengo {self.edad} años.\")\n\npersona1 = Persona(\"Juan\", 25)\npersona1.saludar()\nEn este ejemplo, hemos creado una clase llamada “Persona”. La clase tiene un constructor (init) que inicializa los atributos “nombre” y “edad” de la persona. También tiene un método llamado “saludar” que muestra un mensaje con el nombre y la edad de la persona.\n\n\nClases\nLas clases son plantillas o moldes que definen la estructura y el comportamiento de los objetos. En una clase, puedes especificar qué atributos y métodos tendrán sus objetos.\nEjemplo:\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\n    def mostrar_info(self):\n        print(f\"Marca: {self.marca}, Modelo: {self.modelo}\")\n\ncoche1 = Coche(\"Toyota\", \"Camry\")\ncoche1.mostrar_info()\nEn este ejemplo, hemos creado una clase llamada “Coche” que tiene atributos “marca” y “modelo”. También tiene un método “mostrar_info” que imprime la información del coche.\n\n\nAtributos\nLos atributos son características o propiedades de un objeto que almacenan datos.\nEjemplo:\nclass Producto:\n    def __init__(self, nombre, precio):\n        self.nombre = nombre\n        self.precio = precio\n\nproducto1 = Producto(\"Teléfono\", 500)\nprint(f\"Producto: {producto1.nombre}, Precio: {producto1.precio}\")\nEn este ejemplo, hemos creado una clase “Producto” con atributos “nombre” y “precio”.\n\n\nMétodos\nLos métodos son funciones definidas en una clase que representan el comportamiento de los objetos de esa clase.\nEjemplo:\nclass Perro:\n    def __init__(self, nombre, raza):\n        self.nombre = nombre\n        self.raza = raza\n\n    def ladrar(self):\n        print(f\"{self.nombre} está ladrando.\")\n\nperro1 = Perro(\"Max\", \"Labrador\")\nperro1.ladrar()\nEn este ejemplo, hemos creado una clase “Perro” con el método “ladrar” que muestra un mensaje cuando un perro ladra.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una clase “Libro” que represente libros con atributos como “título” y “autor”. Luego, implementa un método llamado “mostrar_info” que imprima los atributos del libro. A continuación, crea una instancia de la clase “Libro” y llama al método “mostrar_info” para mostrar la información del libro.\n\n\n\n\nExplicación:\nEsta actividad te permitirá practicar la creación de clases y objetos, así como comprender cómo la Programación Orientada a Objetos nos ayuda a modelar y organizar nuestros programas de manera más efectiva.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Programación Orientada a Objetos (POO)</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.1.html#qué-aprendimos",
    "href": "unidades/unidad6/unidad6.1.html#qué-aprendimos",
    "title": "Programación Orientada a Objetos (POO)",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\n\nAprendimos los conceptos fundamentales de la Programación Orientada a Objetos (POO).\nComprendimos cómo definir clases y objetos en Python.\nPracticamos la creación de atributos y métodos en una clase.\nRealizamos una actividad práctica para aplicar los conocimientos adquiridos en la creación de una clase y su uso.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>23</span>  <span class='chapter-title'>Programación Orientada a Objetos (POO)</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.2.html#instancias-de-clase",
    "href": "unidades/unidad6/unidad6.2.html#instancias-de-clase",
    "title": "Objetos y Clases",
    "section": "Instancias de Clase",
    "text": "Instancias de Clase\nCuando se crea un objeto a partir de una clase, se crea una instancia de esa clase. Cada instancia es independiente y puede tener sus propios valores de atributos.\nEjemplo:\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\ncoche1 = Coche(\"Toyota\", \"Camry\")\ncoche2 = Coche(\"Honda\", \"Civic\")\nEn este ejemplo, hemos creado dos instancias de la clase “Coche” (coche1 y coche2) con diferentes valores de atributos “marca” y “modelo”. Atributos de Instancia\nLos atributos de instancia son características específicas de un objeto que se almacenan como variables en la instancia. Cada objeto puede tener sus propios valores de atributos.\nEjemplo:\nclass Estudiante:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\nestudiante1 = Estudiante(\"Ana\", 20)\nestudiante2 = Estudiante(\"Juan\", 22)\nEn este ejemplo, hemos creado dos instancias de la clase “Estudiante” con atributos “nombre” y “edad” que son específicos para cada estudiante.\n\nMétodos de Instancia\nLos métodos de instancia son funciones definidas en la clase que operan en los atributos de la instancia. Cada objeto puede llamar a los métodos de instancia para realizar acciones específicas.\nEjemplo:\nclass Gato:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def maullar(self):\n        print(f\"{self.nombre} está maullando.\")\n\ngato1 = Gato(\"Mittens\")\ngato2 = Gato(\"Whiskers\")\n\ngato1.maullar()\ngato2.maullar()\nEn este ejemplo, hemos creado dos instancias de la clase “Gato” y llamado al método “maullar” en cada gato para que realicen la acción específica.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una clase Rectángulo con atributos “ancho” y “alto”. Luego, implementa un método llamado “calcular_area” que calcule y retorne el área del rectángulo (ancho * alto).\n\n\n\n\nEjemplo de Clase Rectángulo\n\nResumen:\nEn este ejemplo, crearemos una clase llamada “Rectángulo” con atributos “ancho” y “alto”. Implementaremos un método llamado “calcular_area” que calculará y retornará el área del rectángulo (ancho * alto). Luego, crearemos dos instancias de la clase “Rectángulo” con diferentes dimensiones y mostraremos el área de cada rectángulo.\nResolución:\nclass Rectangulo:\n    def __init__(self, ancho, alto):\n        self.ancho = ancho\n        self.alto = alto\n\n    def calcular_area(self):\n        return self.ancho * self.alto\n\n# Crear dos instancias de Rectangulo\nrectangulo1 = Rectangulo(5, 10)\nrectangulo2 = Rectangulo(3, 7)\n\n# Calcular el área de cada rectángulo\narea1 = rectangulo1.calcular_area()\narea2 = rectangulo2.calcular_area()\n\n# Mostrar el área de cada rectángulo\nprint(f\"Área del Rectángulo 1: {area1}\")\nprint(f\"Área del Rectángulo 2: {area2}\")\nExplicación:\n\nDefinimos la clase “Rectangulo” con un constructor init que toma dos argumentos: “ancho” y “alto”. Estos argumentos se utilizan para inicializar los atributos de instancia “ancho” y “alto”.\nImplementamos un método de instancia llamado “calcular_area” que calcula el área del rectángulo multiplicando el ancho por el alto y lo retorna.\nCreamos dos instancias de la clase “Rectangulo” con diferentes dimensiones (5x10 y 3x7).\nCalculamos el área de cada rectángulo llamando al método “calcular_area” en cada instancia.\nMostramos el área de cada rectángulo en la consola.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Objetos y Clases</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.2.html#qué-aprendimos",
    "href": "unidades/unidad6/unidad6.2.html#qué-aprendimos",
    "title": "Objetos y Clases",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\n\nAprendimos los conceptos fundamentales de la Programación Orientada a Objetos (POO).\nComprendimos cómo definir clases y objetos en Python.\nPracticamos la creación de atributos y métodos de instancia en una clase.\nRealizamos una actividad práctica para aplicar los conocimientos adquiridos en la creación de una clase y su uso.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>24</span>  <span class='chapter-title'>Objetos y Clases</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.3.html#conceptos-clave",
    "href": "unidades/unidad6/unidad6.3.html#conceptos-clave",
    "title": "Métodos",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nMétodos de Clase\nLos métodos de clase son funciones definidas dentro de una clase que operan en los atributos de instancia. Cada instancia de la clase puede llamar a estos métodos para realizar acciones específicas.\n\n\nAcceso a Atributos\nDentro de un método, se puede acceder a los atributos de instancia utilizando “self.atributo”. Esto permite manipular y utilizar los valores de los atributos dentro de los métodos.\nEjemplo\n# Ejemplo de código en Python\n# Puede incluir múltiples bloques de código si es necesario.\n\nclass Cuadrado:\n    def __init__(self, lado):\n        self.lado = lado\n\n    def calcular_area(self):\n        area = self.lado ** 2\n        return area\n\n# Crear una instancia de Cuadrado\ncuadrado1 = Cuadrado(4)\n\n# Calcular y mostrar el área del cuadrado\narea_cuadrado = cuadrado1.calcular_area()\nprint(f\"Área del Cuadrado: {area_cuadrado}\")\n\n\nExplicación\nEn este ejemplo, hemos definido una clase “Cuadrado” con un método “calcular_area”. El método accede al atributo de instancia “lado” utilizando “self.lado” y calcula el área del cuadrado.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una clase Triángulo con atributos “base” y “altura”, y un método “calcular_area” que calcule y retorne el área del triángulo (base * altura / 2).\n\n\n\n\nEjemplo de Clase Triángulo\n\nResumen:\nEn esta actividad, crearemos una clase llamada “Triángulo” con atributos “base” y “altura”. Implementaremos un método llamado “calcular_area” que calculará y retornará el área del triángulo (base * altura / 2). Luego, crearemos una instancia de la clase “Triángulo” con dimensiones específicas y mostraremos el área del triángulo.\nResolución:\nclass Triangulo:\n    def __init__(self, base, altura):\n        self.base = base\n        self.altura = altura\n\n    def calcular_area(self):\n        return (self.base * self.altura) / 2\n\n# Crear una instancia de Triángulo\ntriangulo1 = Triangulo(6, 8)\n\n# Calcular el área del triángulo\narea_triangulo = triangulo1.calcular_area()\n\n# Mostrar el área del triángulo\nprint(f\"Área del Triángulo: {area_triangulo}\")\n\n\nExplicación:\n\nDefinimos la clase “Triángulo” con un constructor init que toma dos argumentos: “base” y “altura”. Estos argumentos se utilizan para inicializar los atributos de instancia “base” y “altura”.\nImplementamos un método de instancia llamado “calcular_area” que calcula el área del triángulo utilizando la fórmula (base * altura) / 2 y lo retorna.\nCreamos una instancia de la clase “Triángulo” con dimensiones específicas (base 6 y altura 8).\nCalculamos el área del triángulo llamando al método “calcular_area” en la instancia.\nMostramos el área del triángulo en la consola.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Métodos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.3.html#qué-aprendimos",
    "href": "unidades/unidad6/unidad6.3.html#qué-aprendimos",
    "title": "Métodos",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, hemos profundizado en el concepto de métodos en la programación orientada a objetos. Aprendimos cómo definir y utilizar métodos en una clase, y cómo acceder a los atributos de instancia dentro de los métodos.\nAhora tenemos una comprensión más sólida de cómo las clases pueden tener no solo atributos, sino también comportamientos definidos por métodos.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>25</span>  <span class='chapter-title'>Métodos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.4.html#conceptos-clave",
    "href": "unidades/unidad6/unidad6.4.html#conceptos-clave",
    "title": "Self, Eliminar Propiedades y Objetos",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nSelf\nLa palabra clave “self” se refiere al objeto actual en un método de clase. Permite acceder y manipular los atributos de instancia dentro de ese método.\n\n\nEliminar Atributos\nSe puede eliminar un atributo de instancia utilizando la palabra clave “del”.\n\n\nEliminar Objetos\nPara eliminar un objeto y liberar memoria, se utiliza la función “del” seguida del nombre del objeto.\nEjemplo\n# Ejemplo de código en Python\n# Puede incluir múltiples bloques de código si es necesario.\n\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def presentarse(self):\n        print(f\"Me llamo {self.nombre} y tengo {self.edad} años.\")\n\n# Crear una instancia de Persona\npersona1 = Persona(\"Carlos\", 28)\n\n# Llamar al método para presentarse\npersona1.presentarse()\n\n\nExplicación\nEn este ejemplo, “self” se utiliza para acceder a los atributos “nombre” y “edad” dentro del método “presentarse”.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una clase Estudiante con atributos “nombre” y “edad”, y un método “mostrar_info” para mostrar la información del estudiante.\n\n\n\n\nEjemplo de Clase Estudiante\n\nResumen:\nEste ejemplo demuestra cómo crear una clase Estudiante con atributos, un método para mostrar información y cómo eliminar atributos de instancia.\n# Clase Estudiante\nclass Estudiante:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def mostrar_info(self):\n        print(f\"Estudiante: {self.nombre}, Edad: {self.edad}\")\n\n# Crear una instancia de Estudiante\nestudiante1 = Estudiante(\"María\", 22)\n\n# Llamar al método para mostrar la información\nestudiante1.mostrar_info()\n\n# Eliminar el atributo 'nombre' de la instancia\ndel estudiante1.nombre\n\n# Intentar acceder al atributo eliminado generará un error\n# estudiante1.mostrar_info()\nExplicación:\n\nHemos definido una clase llamada Estudiante con un constructor (init) que toma dos atributos: nombre y edad. 2. Estos atributos representan el nombre y la edad del estudiante.\nLa clase Estudiante también tiene un método llamado mostrar_info que imprime la información del estudiante en un formato específico.\nLuego, hemos creado una instancia estudiante1 de la clase Estudiante con el nombre “María” y la edad 22.\nHemos llamado al método mostrar_info en la instancia estudiante1, lo que muestra la información del estudiante en la consola.\nFinalmente, hemos utilizado la palabra clave del para eliminar el atributo nombre de la instancia estudiante1.\nEsto se hace para mostrar cómo eliminar un atributo de instancia.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Self, Eliminar Propiedades y Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.4.html#qué-aprendimos",
    "href": "unidades/unidad6/unidad6.4.html#qué-aprendimos",
    "title": "Self, Eliminar Propiedades y Objetos",
    "section": "¿Qué aprendimos?:",
    "text": "¿Qué aprendimos?:\nEn esta lección, hemos profundizado en el uso de “self” en los métodos de clase, cómo eliminar atributos de instancia y objetos en Python, y cómo gestionar la memoria.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>26</span>  <span class='chapter-title'>Self, Eliminar Propiedades y Objetos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.5.html#conceptos-clave",
    "href": "unidades/unidad6/unidad6.5.html#conceptos-clave",
    "title": "Herencia",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nHerencia\nLa herencia es un mecanismo que permite que una clase herede atributos y métodos de otra clase base. Esto facilita la creación de jerarquías de clases y la reutilización de código.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Herencia</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.5.html#ejemplo",
    "href": "unidades/unidad6/unidad6.5.html#ejemplo",
    "title": "Herencia",
    "section": "Ejemplo",
    "text": "Ejemplo\n# Ejemplo de código en Python\n# Puede incluir múltiples bloques de código si es necesario.\n\nclass Animal:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def saludar(self):\n        print(f\"{self.nombre} saluda\")\n\nclass Perro(Animal):\n    def ladrar(self):\n        print(f\"{self.nombre} está ladrando\")\n\n# Crear una instancia de la clase Perro\nperro1 = Perro(\"Buddy\")\n\n# Llamar a métodos de la clase base y derivada\nperro1.saludar()\nperro1.ladrar()\n\nExplicación\nEn este ejemplo, tenemos una clase base “Animal” con un constructor y un método “saludar”. Luego, creamos una clase derivada “Perro” que hereda de “Animal” y agrega su propio método “ladrar”. Las instancias de “Perro” heredan los atributos y métodos de “Animal”.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una clase Figura con un atributo “color” y un método “mostrar_color” para mostrar el color de la figura.\nCrea una clase derivada Circulo que herede de “Figura” y agregue un atributo “radio” y un método “calcular_area” para calcular el área del círculo.\n\n\n\n\nPosible solución\n\nResumen:\nEn este código, se crea una clase base llamada “Figura” que tiene un atributo “color” y un método “mostrar_color”. Luego, se define una clase derivada “Circulo” que hereda de “Figura” y agrega un atributo “radio” y un método “calcular_area”. Se crea una instancia de “Circulo”, se muestra su color y se calcula su área.\n# Definición de la clase base \"Figura\" con un constructor que toma el atributo \"color\".\nclass Figura:\n    def __init__(self, color):\n        self.color = color\n\n    # Método en la clase base para mostrar el color de la figura.\n    def mostrar_color(self):\n        print(f\"Color: {self.color}\")\n\n# Definición de la clase derivada \"Circulo\" que hereda de \"Figura\" y agrega un atributo \"radio\".\nclass Circulo(Figura):\n    def __init__(self, color, radio):\n        # Llamamos al constructor de la clase base \"Figura\" utilizando \"super()\".\n        super().__init__(color)\n        self.radio = radio\n\n    # Método en la clase derivada para calcular el área del círculo.\n    def calcular_area(self):\n        area = 3.14 * self.radio ** 2\n        return area\n\n# Creación de una instancia de la clase \"Circulo\" llamada \"circulo1\" con color \"Rojo\" y radio 5.\ncirculo1 = Circulo(\"Rojo\", 5)\n\n# Llamada al método \"mostrar_color\" de la clase base para mostrar el color del círculo.\ncirculo1.mostrar_color()\n\n# Llamada al método \"calcular_area\" de la clase derivada para calcular el área del círculo.\narea = circulo1.calcular_area()\n\n# Imprimir el resultado del cálculo del área.\nprint(f\"Área del círculo: {area}\")\n\n\nExplicación:\nEn esta actividad, creamos una clase base “Figura” con un atributo “color” y un método “mostrar_color”. Luego, creamos una clase derivada “Circulo” que hereda de “Figura” y agrega un atributo “radio” y un método “calcular_area”. Las instancias de “Circulo” heredan los atributos y métodos de “Figura” y extienden su funcionalidad.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Herencia</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.5.html#qué-aprendimos",
    "href": "unidades/unidad6/unidad6.5.html#qué-aprendimos",
    "title": "Herencia",
    "section": "¿Qué aprendimos?:",
    "text": "¿Qué aprendimos?:\nEn esta lección, hemos explorado el concepto de herencia en la programación orientada a objetos y cómo crear clases derivadas que heredan atributos y métodos de una clase base. Esto nos permite reutilizar código y establecer relaciones jerárquicas entre clases.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>27</span>  <span class='chapter-title'>Herencia</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.6.html#conceptos-clave",
    "href": "unidades/unidad6/unidad6.6.html#conceptos-clave",
    "title": "Polimorfismo",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nPolimorfismo\nEl polimorfismo es un principio de la programación orientada a objetos que permite que objetos de diferentes clases sean tratados como objetos de una clase base común.\n\n\nMétodos Polimórficos\nSon métodos que pueden ser implementados de manera diferente en las clases derivadas, pero tienen el mismo nombre y firma en la clase base.\n\n\nSobreescritura de Métodos\nLa sobreescritura de métodos es la capacidad de una clase derivada para proporcionar una implementación específica de un método heredado de la clase base.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Polimorfismo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.6.html#ejemplo",
    "href": "unidades/unidad6/unidad6.6.html#ejemplo",
    "title": "Polimorfismo",
    "section": "Ejemplo",
    "text": "Ejemplo\nclass Animal:\n    def sonido(self):\n        pass\n\nclass Perro(Animal):\n    def sonido(self):\n        return \"Guau\"\n\nclass Gato(Animal):\n    def sonido(self):\n        return \"Miau\"\n\ndef hacer_sonar(animal):\n    print(animal.sonido())\n\n# Crear instancias de las clases\nperro = Perro()\ngato = Gato()\n\n# Llamar a la función con objetos de diferentes clases\nhacer_sonar(perro)  # Salida: Guau\nhacer_sonar(gato)   # Salida: Miau\nEn este ejemplo, tenemos una clase base “Animal” con un método “sonido”. Luego, creamos dos clases derivadas “Perro” y “Gato” que heredan de “Animal” y sobrescriben el método “sonido” para proporcionar su propio sonido característico.\nLa función “hacer_sonar” toma un objeto de la clase “Animal” como argumento y llama a su método “sonido”. A pesar de que se pasan objetos de diferentes clases (“Perro” y “Gato”), el polimorfismo permite que el método “sonido” adecuado se ejecute para cada objeto.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea una clase “Vehiculo” con un método “arrancar” que imprima “El vehículo arranca”. Luego, crea clases derivadas “Coche” y “Motocicleta” que sobrescriban el método “arrancar” para proporcionar un mensaje específico para cada tipo de vehículo.\n\n\n\n\nSolución\n\nResumen:\nDefinición de la Clase Base - “Vehiculo”: Creamos una clase base llamada “Vehiculo”, que representa vehículos en general. Esta clase base tiene un método llamado “arrancar” que imprimirá “El vehículo arranca” cuando se llame.\nDefinición de la Clase Derivada - “Coche”: Creamos una clase derivada llamada “Coche” que hereda de la clase base “Vehiculo”. La clase “Coche” sobrescribe el método “arrancar” para proporcionar una implementación específica: imprimir “El coche arranca” cuando se llame. Definición de la Clase Derivada - “Motocicleta”: Creamos otra clase derivada llamada “Motocicleta” que también hereda de la clase base “Vehiculo”.\nAl igual que la clase “Coche”, la clase “Motocicleta” sobrescribe el método “arrancar” para proporcionar una implementación específica: imprimir “La motocicleta arranca” cuando se llame.\nclass Vehiculo:\n    def arrancar(self):\n        print(\"El vehículo arranca\")\n\nclass Coche(Vehiculo):\n    def arrancar(self):\n        print(\"El coche arranca\")\n\nclass Motocicleta(Vehiculo):\n    def arrancar(self):\n        print(\"La motocicleta arranca\")\nExplicación:\n\nDefinimos la clase base “Animal” que tiene un método “sonido” vacío utilizando la declaración pass. Esta clase base servirá como base para las clases derivadas “Perro” y “Gato”.\nDefinimos la clase derivada “Perro” que hereda de “Animal” mediante (Animal). Esta clase sobrescribe el método “sonido” para que devuelva “Guau” cuando se llama.\nSimilar a la clase “Perro”, definimos la clase derivada “Gato” que hereda de “Animal” y sobrescribe el método “sonido” para que devuelva “Miau”.\nCreamos una función llamada “hacer_sonar” que toma un objeto de la clase “Animal” como argumento y llama a su método “sonido”. Esto permite tratar objetos de diferentes clases como si fueran de la misma clase base.\nCreamos instancias “perro” y “gato” de las clases “Perro” y “Gato”, respectivamente.\nLlamamos a la función “hacer_sonar” con objetos de diferentes clases (“perro” y “gato”). A pesar de que son objetos de clases diferentes, el polimorfismo permite que el método “sonido” adecuado se ejecute para cada objeto. En el caso de “perro”, imprime “Guau”, y en el caso de “gato”, imprime “Miau”.\nEl polimorfismo nos permite tratar objetos de clases derivadas de manera uniforme cuando comparten una clase base común, lo que facilita el diseño y la flexibilidad de nuestros programas.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Polimorfismo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.6.html#qué-aprendimos",
    "href": "unidades/unidad6/unidad6.6.html#qué-aprendimos",
    "title": "Polimorfismo",
    "section": "¿Qué aprendimos?:",
    "text": "¿Qué aprendimos?:\nEn esta lección, hemos explorado el concepto de polimorfismo en la programación orientada a objetos y cómo permite tratar objetos de diferentes clases de manera uniforme. Además, hemos visto cómo se implementa el polimorfismo a través de métodos polimórficos y la sobreescritura de métodos en clases derivadas.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>28</span>  <span class='chapter-title'>Polimorfismo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.7.html#atributos-privados",
    "href": "unidades/unidad6/unidad6.7.html#atributos-privados",
    "title": "Encapsulación",
    "section": "Atributos Privados:",
    "text": "Atributos Privados:\nEn Python, se utiliza una convención de nombres para marcar atributos como privados agregando un guion bajo al principio del nombre (por ejemplo, _nombre).",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.7.html#métodos-privados",
    "href": "unidades/unidad6/unidad6.7.html#métodos-privados",
    "title": "Encapsulación",
    "section": "Métodos Privados:",
    "text": "Métodos Privados:\nDe manera similar, los métodos privados se marcan agregando un guion bajo al principio del nombre del método (por ejemplo, _calcular()).",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.7.html#métodos-de-acceso-getters-y-setters",
    "href": "unidades/unidad6/unidad6.7.html#métodos-de-acceso-getters-y-setters",
    "title": "Encapsulación",
    "section": "Métodos de Acceso (Getters y Setters):",
    "text": "Métodos de Acceso (Getters y Setters):\nLos métodos de acceso permiten controlar el acceso a los atributos privados de una clase. Los métodos “get” obtienen el valor de un atributo y los métodos “set” lo modifican.\nEjemplo:\nclass CuentaBancaria:\n    def __init__(self, saldo):\n        # Atributo privado con un guion bajo al principio\n        self._saldo = saldo\n\n    # Método de acceso (Getter)\n    def obtener_saldo(self):\n        return self._saldo\n\n    # Método de acceso (Setter)\n    def depositar(self, cantidad):\n        if cantidad &gt; 0:\n            self._saldo += cantidad\n\n    # Método de acceso (Setter)\n    def retirar(self, cantidad):\n        if cantidad &gt; 0 and cantidad &lt;= self._saldo:\n            self._saldo -= cantidad\n\n# Crear una instancia de la clase CuentaBancaria\ncuenta = CuentaBancaria(1000)\n\n# Acceder al saldo utilizando el método de acceso\nprint(\"Saldo inicial:\", cuenta.obtener_saldo())\n\n# Realizar un depósito\ncuenta.depositar(500)\nprint(\"Saldo después del depósito:\", cuenta.obtener_saldo())\n\n# Realizar un retiro\ncuenta.retirar(200)\nprint(\"Saldo después del retiro:\", cuenta.obtener_saldo())\n\nExplicación:\nEn este ejemplo, la clase CuentaBancaria utiliza la convención de nombres con un guion bajo para marcar el atributo _saldo como privado. Los métodos obtener_saldo, depositar, y retirar proporcionan una interfaz pública para interactuar con la cuenta bancaria mientras ocultan los detalles internos.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una clase Estudiante con un atributo privado _nombre. Implementa métodos de acceso get_nombre y set_nombre para obtener y establecer el nombre del estudiante.\n\n\n\n\nSolución\n\nResumen:\nEn este código, se define una clase Estudiante con un atributo privado de _nombre y métodos de acceso (get_nombre y set_nombre) para obtener y cambiar el nombre del estudiante.\nclass Estudiante:\n    def __init__(self, nombre):\n        # Atributo privado con un guion bajo al principio\n        self._nombre = nombre\n\n    # Método de acceso (Getter)\n    def get_nombre(self):\n        return self._nombre\n\n    # Método de acceso (Setter)\n    def set_nombre(self, nuevo_nombre):\n        if len(nuevo_nombre) &gt; 0:\n            self._nombre = nuevo_nombre\n\n# Crea una instancia de la clase Estudiante con nombre \"Juan\"\nestudiante = Estudiante(\"Juan\")\n\n# Acceder al nombre utilizando el método de acceso get_nombre\nprint(\"Nombre del estudiante:\", estudiante.get_nombre())\n\n# Cambiar el nombre utilizando el método de acceso set_nombre\nestudiante.set_nombre(\"María\")\n# Imprimir el nombre después del cambio\nprint(\"Nombre del estudiante después del cambio:\", estudiante.get_nombre())\nExplicación:\n\nEn este código, se crea una clase Estudiante con un atributo privado _nombre y dos métodos de acceso (get_nombre y set_nombre).\nEl método get_nombre permite obtener el nombre del estudiante, y el método set_nombre permite cambiar el nombre si la nueva cadena de nombre tiene una longitud mayor que 0.\nSe crea una instancia de la clase Estudiante con el nombre “Juan”, se imprime el nombre inicial utilizando get_nombre, se cambia el nombre a “María” utilizando set_nombre, y se imprime el nombre nuevamente después del cambio.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad6/unidad6.7.html#qué-aprendimos-en-esta-actividad",
    "href": "unidades/unidad6/unidad6.7.html#qué-aprendimos-en-esta-actividad",
    "title": "Encapsulación",
    "section": "¿Qué Aprendimos en esta Actividad?",
    "text": "¿Qué Aprendimos en esta Actividad?\nEsta actividad te ayudará a practicar la encapsulación en Python utilizando métodos de acceso y atributos privados.",
    "crumbs": [
      "Unidad 6: Programación Orientada a Objetos",
      "<span class='chapter-number'>29</span>  <span class='chapter-title'>Encapsulación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.1.html#qué-aprendimos",
    "href": "unidades/unidad7/unidad7.1.html#qué-aprendimos",
    "title": "Introducción a Módulos en Python",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\nEn esta lección, aprendimos a trabajar con módulos en Python, cómo importarlos en nuestros programas y cómo crear funciones reutilizables en módulos separados. También practicamos la importación y uso de módulos mediante una actividad práctica. La encapsulación es un concepto clave en la programación orientada a objetos (POO) que se refiere a la ocultación de los detalles internos de una clase y a la provisión de una interfaz pública para interactuar con ella. La encapsulación se implementa en Python utilizando convenciones de nombres para marcar atributos y métodos como privados, y mediante el uso de métodos de acceso (getters y setters) para controlar el acceso a los atributos privados.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>30</span>  <span class='chapter-title'>Introducción a Módulos en Python</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.2.html#pasos-para-crear-un-módulo",
    "href": "unidades/unidad7/unidad7.2.html#pasos-para-crear-un-módulo",
    "title": "Creando Nuestro Primer Módulo",
    "section": "Pasos para Crear un Módulo:",
    "text": "Pasos para Crear un Módulo:\n\nCrea un archivo de Python con la extensión .py.\nDefine funciones y/o clases en el archivo.\nGuarda el archivo en una ubicación accesible.\n\nEjemplo:\n# operaciones.py\n\ndef suma(a, b):\n    return a + b\n\ndef resta(a, b):\n    return a - b\n\nclass Calculadora:\n    def multiplicacion(self, a, b):\n        return a * b\n## Creando Nuestro Primer Módulo\nEn esta lección, aprenderemos a crear nuestro propio módulo en Python. Crearemos un módulo que contenga funciones y clases para realizar operaciones matemáticas básicas.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Creando Nuestro Primer Módulo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.2.html#pasos-para-crear-un-módulo-1",
    "href": "unidades/unidad7/unidad7.2.html#pasos-para-crear-un-módulo-1",
    "title": "Creando Nuestro Primer Módulo",
    "section": "Pasos para Crear un Módulo:",
    "text": "Pasos para Crear un Módulo:\n\nCrea un archivo de Python con la extensión .py.\nDefine funciones y clases en el archivo.\nGuarda el archivo en una ubicación accesible.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Creando Nuestro Primer Módulo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.2.html#ejemplo",
    "href": "unidades/unidad7/unidad7.2.html#ejemplo",
    "title": "Creando Nuestro Primer Módulo",
    "section": "Ejemplo:",
    "text": "Ejemplo:\n# En el archivo operaciones.py\ndef suma(a, b):\n    return a + b\n\ndef resta(a, b):\n    return a - b\n\nclass Calculadora:\n    def multiplicacion(self, a, b):\n        return a * b",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Creando Nuestro Primer Módulo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.2.html#explicación",
    "href": "unidades/unidad7/unidad7.2.html#explicación",
    "title": "Creando Nuestro Primer Módulo",
    "section": "Explicación:",
    "text": "Explicación:\nEn este ejemplo, se crea un módulo llamado operaciones.py.\nSe define una función suma y una función resta, junto con una clase Calculadora que tiene un método multiplicacion.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\n\nCrea un módulo llamado geometria con funciones para calcular el área de un círculo y el perímetro de un cuadrado.\nEn otro archivo, importa el módulo geometria y utiliza las funciones para realizar cálculos geométricos.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Creando Nuestro Primer Módulo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.2.html#explicación-de-la-actividad",
    "href": "unidades/unidad7/unidad7.2.html#explicación-de-la-actividad",
    "title": "Creando Nuestro Primer Módulo",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de módulos con funciones y clases. Les ayuda a comprender cómo organizar diferentes funcionalidades en módulos separados y cómo importar esas funcionalidades en otros archivos.\nEn este ejemplo, creamos un módulo llamado operaciones.py. Dentro de este módulo, definimos dos funciones, suma y resta, que realizan operaciones matemáticas básicas. También creamos una clase Calculadora con un método multiplicacion para llevar a cabo multiplicaciones.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea un módulo llamado geometria con funciones para calcular el área de un círculo y el perímetro de un cuadrado.\n\n\n\nExplicación:\nEsta actividad te permitirá practicar la creación de módulos con funciones. Debes crear un módulo llamado geometria.py que contenga dos funciones: una para calcular el área de un círculo y otra para calcular el perímetro de un cuadrado. Luego, importa este módulo en otro archivo y utiliza las funciones para realizar cálculos geométricos.\n\n\nSolución\n\nLa solución a la actividad práctica implica crear el módulo geometria.py con las funciones calcular_area_circulo y calcular_perimetro_cuadrado. Luego, importa este módulo en otro archivo y utiliza las funciones para realizar cálculos geométricos.\n# geometria.py\n\nimport math\n\ndef calcular_area_circulo(radio):\n    return math.pi * radio**2\n\ndef calcular_perimetro_cuadrado(lado):\n    return 4 * lado\n# archivo_principal.py\n\nimport geometria\n\nradio_circulo = 5\nlado_cuadrado = 4\n\narea = geometria.calcular_area_circulo(radio_circulo)\nperimetro = geometria.calcular_perimetro_cuadrado(lado_cuadrado)\n\nprint(f\"Área del círculo: {area}\")\nprint(f\"Perímetro del cuadrado: {perimetro}\")\nExplicación paso a paso de la Solución:\n\nCreamos el módulo geometria.py que contiene dos funciones, calcular_area_circulo y calcular_perimetro_cuadrado, para calcular el área de un círculo y el perímetro de un cuadrado, respectivamente.\nEn el archivo principal (archivo_principal.py), importamos el módulo geometria.\nDefinimos valores para el radio de un círculo (radio_circulo) y el lado de un cuadrado (lado_cuadrado).\nUtilizamos las funciones del módulo geometria para calcular el área del círculo y el perímetro del cuadrado.\nImprimimos los resultados de los cálculos.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Creando Nuestro Primer Módulo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.2.html#qué-aprendimos",
    "href": "unidades/unidad7/unidad7.2.html#qué-aprendimos",
    "title": "Creando Nuestro Primer Módulo",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\nEn esta lección, aprendimos a crear nuestro propio módulo en Python y cómo organizar funciones y clases en él. También practicamos la importación de módulos en otros archivos y cómo utilizar las funcionalidades proporcionadas por esos módulos. La creación de módulos es una técnica fundamental para mantener nuestro código organizado y promover la reutilización de código.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>31</span>  <span class='chapter-title'>Creando Nuestro Primer Módulo</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.3.html#qué-aprendimos",
    "href": "unidades/unidad7/unidad7.3.html#qué-aprendimos",
    "title": "Renombrando Módulos y Seleccionando Elementos",
    "section": "¿Qué Aprendimos?",
    "text": "¿Qué Aprendimos?\nEn esta lección, aprendimos dos técnicas útiles al trabajar con módulos en Python:\nRenombrar Módulos al Importar: Pudimos asignar un nombre más corto o legible a un módulo al importarlo. Esto hace que nuestro código sea más claro y fácil de entender.\nSeleccionar Elementos Específicos para Importar: Aprendimos cómo importar solo las funciones o clases necesarias de un módulo en lugar de importar todo el módulo. Esto puede ayudar a reducir la cantidad de código innecesario en nuestro programa.\nEstas técnicas nos proporcionan un mayor control sobre cómo interactuamos con los módulos, lo que puede hacer que nuestro código sea más eficiente y legible.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>32</span>  <span class='chapter-title'>Renombrando Módulos y Seleccionando Elementos</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.4.html#conceptos-clave",
    "href": "unidades/unidad7/unidad7.4.html#conceptos-clave",
    "title": "Seleccionando lo Importado y Pip",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nSeleccionar Elementos para Importar\nCuando importamos módulos en Python, podemos seleccionar elementos específicos, como funciones o clases, en lugar de importar todo el módulo.\n\n\npip (Python Package Installer)\npip es una herramienta de línea de comandos que se utiliza para instalar, actualizar y desinstalar paquetes de Python. Los paquetes son conjuntos de módulos y recursos que se utilizan para ampliar la funcionalidad de Python.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Seleccionando lo Importado y Pip</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.4.html#ejemplo---instalando-un-paquete-con-pip",
    "href": "unidades/unidad7/unidad7.4.html#ejemplo---instalando-un-paquete-con-pip",
    "title": "Seleccionando lo Importado y Pip",
    "section": "Ejemplo - Instalando un Paquete con Pip",
    "text": "Ejemplo - Instalando un Paquete con Pip\npip install requests\nEn este ejemplo, utilizamos pip para instalar el paquete requests, que es comúnmente utilizado para hacer solicitudes HTTP en Python.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nUtiliza pip para instalar el paquete matplotlib, que se utiliza para trazar gráficos en Python.\nEn tu archivo de código, importa la función plot de matplotlib.pyplot y crea un gráfico simple.\n\n\n\n\nEjemplo de Instalación de Paquete con Pip\n\nResumen:\nEn este ejemplo, instalaremos el paquete requests utilizando la herramienta pip.\npip install requests\nExplicación:\n\nUtilizamos la línea de comando y el comando pip install seguido del nombre del paquete (requests) para instalarlo.\nUna vez instalado, podemos importar y utilizar el paquete en nuestros programas Python para realizar solicitudes HTTP de manera sencilla.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Seleccionando lo Importado y Pip</span>"
    ]
  },
  {
    "objectID": "unidades/unidad7/unidad7.4.html#qué-aprendimos",
    "href": "unidades/unidad7/unidad7.4.html#qué-aprendimos",
    "title": "Seleccionando lo Importado y Pip",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos a seleccionar elementos específicos para importar de un módulo en Python, lo que nos permite utilizar solo las funcionalidades que necesitamos en nuestro código. También aprendimos sobre pip, una herramienta esencial para instalar paquetes externos que amplían las capacidades de Python.",
    "crumbs": [
      "Unidad 7: Módulos y Bases de Datos",
      "<span class='chapter-number'>33</span>  <span class='chapter-title'>Seleccionando lo Importado y Pip</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.1.html#conceptos-clave",
    "href": "unidades/unidad8/unidad8.1.html#conceptos-clave",
    "title": "Introducción a Django",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\nDjango es un marco de desarrollo web basado en Python que sigue el patrón de diseño Model Template View (MTV).\nLa arquitectura de Django se basa en proyectos y aplicaciones.\nUn proyecto Django puede contener varias aplicaciones que se pueden reutilizar en diferentes proyectos.\nEjemplo\n# Creación de un proyecto Django llamado \"mi_proyecto\"\ndjango-admin startproject mi_proyecto\n\n# Creación de una aplicación dentro del proyecto\ncd mi_proyecto\npython manage.py startapp mi_aplicacion\n\nExplicación\nEn este ejemplo, hemos creado un proyecto Django llamado mi_proyecto utilizando el comando django-admin startproject.\nLuego, dentro del proyecto, creamos una aplicación llamada mi_aplicacion utilizando python manage.py startapp.\nDjango organiza el código en proyectos y aplicaciones para mantenerlo modular y reutilizable.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea un proyecto Django llamado “blog”.\nDentro del proyecto, crea una aplicación llamada “articulos”.\nVerifica la estructura de carpetas generada por Django y explora los archivos creados.\n\n\n\n\n\nSolución\n\nResumen:\nEn esta actividad práctica, se creará un proyecto Django llamado blog y se generará una aplicación llamada articulos dentro de ese proyecto. Luego, se explorará la estructura de carpetas y los archivos generados por Django.\nCódigo:\nPara crear el proyecto Django y la aplicación, sigue estos pasos:\n\nAbre una terminal o línea de comandos.\nNavega hasta la ubicación donde desees crear el proyecto “blog”.\nEjecuta los siguientes comandos:\n\n# Crear un proyecto Django llamado \"blog\"\ndjango-admin startproject blog\n\n# Cambia al directorio del proyecto\ncd blog\n\n# Crear una aplicación llamada \"articulos\"\npython manage.py startapp articulos\nExplicación:\n\nUtilizamos el comando django-admin startproject para crear un nuevo proyecto Django llamado blog. Esto generará la estructura de carpetas y los archivos iniciales del proyecto.\nLuego, cambiamos al directorio del proyecto utilizando cd blog.\nFinalmente, utilizamos el comando python manage.py startapp para crear una aplicación llamada articulos dentro del proyecto blog. Esto generará la estructura de carpetas y archivos iniciales para la aplicación.\n\nUna vez completados estos pasos, tendrás un proyecto blog con una aplicación articulos lista para desarrollar.\nPuedes explorar la estructura de carpetas y archivos generados en el proyecto blog y la aplicación articulos para comprender mejor cómo se organiza un proyecto Django y cómo se crean las aplicaciones dentro de él. Esto proporciona la base para desarrollar una aplicación web utilizando Django.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Introducción a Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.1.html#qué-aprendimos",
    "href": "unidades/unidad8/unidad8.1.html#qué-aprendimos",
    "title": "Introducción a Django",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos los conceptos básicos de Django y cómo crear proyectos y aplicaciones en Django. También exploramos la estructura de carpetas generada por Django y su enfoque en la modularidad.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>34</span>  <span class='chapter-title'>Introducción a Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.2.html#conceptos-clave",
    "href": "unidades/unidad8/unidad8.2.html#conceptos-clave",
    "title": "Creación de una Vista Hola Mundo en Django",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nVista\n\n\n\n\n\nEn Django, una vista es una función que toma una solicitud web y devuelve una respuesta. Se utiliza para definir qué contenido se muestra en una página web.\n\n\nPlantillas\nLas plantillas en Django son archivos HTML que permiten la presentación de datos dinámicos. Se utilizan para generar la interfaz de usuario de una aplicación web.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Creación de una Vista Hola Mundo en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.2.html#ejemplo",
    "href": "unidades/unidad8/unidad8.2.html#ejemplo",
    "title": "Creación de una Vista Hola Mundo en Django",
    "section": "Ejemplo",
    "text": "Ejemplo\n# En el archivo views.py de la aplicación Django\nfrom django.http import HttpResponse\n\ndef hola_mundo(request):\n    return HttpResponse(\"¡Hola Mundo!\")\n\nExplicación\nEn este ejemplo, hemos creado una vista llamada hola_mundo en Django. Esta vista toma una solicitud web y devuelve una respuesta que consiste en el mensaje “¡Hola Mundo!”.\n\n\nUrls.py\n\n\n\n\n\nAhora podemos configurar una URL para que apunte a esta vista, de modo que cuando un usuario acceda a esa URL, verá el mensaje “¡Hola Mundo!” en la página.\n# En el archivo urls.py de la aplicación Django\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('hola-mundo/', views.hola_mundo, name='hola_mundo'),\n]\nConfiguración del archivo settings.py\nINSTALLED_APPS = [\n    # ...\n    'hola_mundo_app',\n    # ...\n]\nArchivo urls.py del proyecto principal\n\n\n\n\n\nfrom django.contrib import admin\nfrom django.urls import include, path\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('hola-mundo/', include('hola_mundo_app.urls')),\n]\n\n\n\n\n\n\nTip\n\n\n\nActividad Práctica\n\nCrea una aplicación Django llamada “hola_mundo_app” en tu proyecto.\nCrea una vista similar a la vista hola_mundo en esta lección en el archivo views.py de la aplicación “hola_mundo_app”.\nConfigura una URL para que apunte a esta vista en el archivo urls.py de la aplicación “hola_mundo_app”.\nEjecuta tu servidor Django y accede a la URL correspondiente para ver el mensaje “¡Hola Mundo!” en tu navegador.\n\n\n\n\n\nSolución\n\nResumen:\nHemos creado una vista en Django que muestra el mensaje “¡Hola Mundo!” en la página web.\nResolución:\n\nCreamos una vista llamada hola_mundo en views.py.\n\n# En el archivo views.py de la aplicación \"hola_mundo_app\"\nfrom django.http import HttpResponse\n\ndef hola_mundo_personalizado(request):\n    return HttpResponse(\"¡Hola Mundo Personalizado!\")\n\nConfiguramos una URL para esta vista en urls.py.\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('hola-mundo/', views.hola_mundo_personalizado, name='hola_mundo_personalizado'),\n]\n\nAccedimos a la URL en un navegador para ver el mensaje.\n\npython manage.py runserver\n\nUtiliza el navegador para consultar la siguiente url http://localhost:8000/hola-mundo/\n\nExplicación:\nLa vista hola_mundo es una función que toma una solicitud web y devuelve una respuesta que contiene el mensaje “¡Hola Mundo!”. Configuramos una URL para que los usuarios puedan acceder a esta vista y ver el mensaje en la página.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Creación de una Vista Hola Mundo en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.2.html#qué-aprendimos",
    "href": "unidades/unidad8/unidad8.2.html#qué-aprendimos",
    "title": "Creación de una Vista Hola Mundo en Django",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo crear una vista en Django y cómo configurar una URL para mostrar contenido en una página web. También vimos cómo se utiliza la plantilla de la vista para generar la respuesta que se muestra al usuario.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>35</span>  <span class='chapter-title'>Creación de una Vista Hola Mundo en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.3.html#conceptos-clave",
    "href": "unidades/unidad8/unidad8.3.html#conceptos-clave",
    "title": "Model Template View en Django.",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nModelo (Model).\n\n\n\n\n\nEl Modelo en Django define la estructura de la base de datos y cómo se almacenan los datos. Cada modelo corresponde a una tabla en la base de datos.\n\n\nPlantilla (Template).\n\n\n\n\n\nLas Plantillas en Django son archivos HTML que definen la estructura visual de las páginas web. Permiten la presentación de datos a los usuarios.\n\n\nVista (View)\nLas Vistas en Django controlan qué datos se muestran en una página web y cómo se presentan. Se encargan de la lógica de negocio y trabajan con los modelos y plantillas.\nEjemplo\n# Definición de un modelo para una tarea en Django\nfrom django.db import models\n\nclass Tarea(models.Model):\n    titulo = models.CharField(max_length=200)\n    descripcion = models.TextField()\n    fecha_creacion = models.DateTimeField('fecha de creación')\n# Creación de una plantilla HTML para mostrar la lista de tareas\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lista de Tareas&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Tareas Pendientes&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for tarea in lista_tareas %}\n            &lt;li&gt;{{ tarea.titulo }}&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\n# Creación de una vista en Django para mostrar la lista de tareas\nfrom django.shortcuts import render\nfrom .models import Tarea\n\ndef lista_tareas(request):\n    tareas = Tarea.objects.all()\n    return render(request, 'lista_tareas.html', {'lista_tareas': tareas})\n\n\nExplicación\nEn este ejemplo, hemos definido un modelo Tarea que representa una tarea en nuestra base de datos. Luego, creamos una plantilla HTML lista_tareas.html que muestra una lista de tareas. Finalmente, creamos una vista lista_tareas que recupera todas las tareas y las muestra utilizando la plantilla.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea un modelo Django llamado Nota que tenga un campo para el título y otro para el contenido de la nota.\nCrea una plantilla HTML llamada lista_notas.html que muestre una lista de notas.\nCrea una vista en Django llamada lista_notas que recupere todas las notas y las muestre utilizando la plantilla.\n\n\n\n\n\nSolucion\n\nResumen:\nEn esta actividad práctica, se creará un modelo Django llamado “Nota” con campos para el título y el contenido de la nota. Luego, se creará una plantilla HTML llamada “lista_notas.html” para mostrar una lista de notas. Finalmente, se creará una vista Django llamada “lista_notas” que recuperará todas las notas y las mostrará utilizando la plantilla.\nCódigo:\n\nCrear el Modelo Django Nota:\n\nEn el archivo models.py de la aplicación correspondiente (generalmente llamada “articulos”), define el modelo “Nota” con campos para el título y el contenido de la nota:\nfrom django.db import models\n\nclass Nota(models.Model):\n    titulo = models.CharField(max_length=200)\n    contenido = models.TextField()\n\n    def __str__(self):\n        return self.titulo\n\n    Crear la Plantilla HTML \"lista_notas.html\":\nDentro de la carpeta de la aplicación (articulos en este ejemplo), crea una carpeta llamada templates si aún no existe. Luego, crea un archivo HTML llamado lista_notas.html en la carpeta “templates” con el siguiente contenido:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;Lista de Notas&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Lista de Notas&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for nota in notas %}\n            &lt;li&gt;{{ nota.titulo }}&lt;/li&gt;\n            &lt;p&gt;{{ nota.contenido }}&lt;/p&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nCrear la Vista Django lista_notas:\n\nEn el archivo views.py de la aplicación (articulos en este ejemplo), crea una vista llamada lista_notas que recupere todas las notas y las pase a la plantilla lista_notas.html:\nfrom django.shortcuts import render\nfrom .models import Nota\n\ndef lista_notas(request):\n    notas = Nota.objects.all()\n    return render(request, 'lista_notas.html', {'notas': notas})\nExplicación:\n\nHemos creado un modelo Django llamado Nota que contiene dos campos: titulo y contenido.” El campo titulo es un CharField con una longitud máxima de 200 caracteres, y el campo contenido es un TextField para almacenar el contenido más extenso de la nota.\nCreamos una plantilla HTML llamada lista_notas.html que se utilizará para mostrar la lista de notas. En esta plantilla, utilizamos etiquetas de plantilla de Django ({% for … %}) para iterar sobre todas las notas y mostrar tanto el título como el contenido de cada nota.\nCreamos una vista Django llamada lista_notas en el archivo views.py. En esta vista, recuperamos todas las notas utilizando Nota.objects.all() y luego pasamos las notas a la plantilla lista_notas.html como un contexto para que puedan mostrarse en la página.\n\nCon estos pasos, hemos configurado un modelo, una plantilla y una vista para mostrar una lista de notas en una aplicación Django.\nAhora puedes acceder a la vista lista_notas en tu aplicación para ver la lista de notas en la plantilla correspondiente.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Model Template View en Django.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.3.html#qué-aprendimos",
    "href": "unidades/unidad8/unidad8.3.html#qué-aprendimos",
    "title": "Model Template View en Django.",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nEn esta lección, aprendimos cómo se aplican los conceptos Modelo, Plantilla y Vista en Django para crear una lista de tareas. Entendemos cómo Django maneja la lógica de negocio y la presentación de datos de manera separada.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>36</span>  <span class='chapter-title'>Model Template View en Django.</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.4.html#conceptos-clave",
    "href": "unidades/unidad8/unidad8.4.html#conceptos-clave",
    "title": "Herencia de Plantillas y Bootstrap en Django",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nHerencia de Plantillas\nLa herencia de plantillas en Django permite definir una plantilla base con elementos comunes y extenderla para crear plantillas específicas para cada página.\n\n\nBootstrap.\n\n\n\n\n\nBootstrap es un marco de diseño de código abierto que proporciona estilos y componentes predefinidos para mejorar la apariencia y la usabilidad de un sitio web.\nEjemplo\n# Plantilla base llamada \"base.html\"\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;{% block title %}Mi Sitio Web{% endblock %}&lt;/title&gt;\n    &lt;link rel=\"stylesheet\" href=\"https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css\"&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;header&gt;\n            &lt;h1&gt;Mi Sitio Web&lt;/h1&gt;\n        &lt;/header&gt;\n        &lt;nav&gt;\n            &lt;ul class=\"nav\"&gt;\n                &lt;li class=\"nav-item\"&gt;&lt;a class=\"nav-link\" href=\"/\"&gt;Inicio&lt;/a&gt;&lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;&lt;a class=\"nav-link\" href=\"/tareas/\"&gt;Tareas&lt;/a&gt;&lt;/li&gt;\n            &lt;/ul&gt;\n        &lt;/nav&gt;\n        &lt;main&gt;\n            {% block content %}{% endblock %}\n        &lt;/main&gt;\n    &lt;/div&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n# Plantilla para la página de inicio que hereda de \"base.html\"\n{% extends \"base.html\" %}\n\n{% block title %}Inicio - Mi Sitio Web{% endblock %}\n\n{% block content %}\n    &lt;h2&gt;Bienvenido a la página de inicio&lt;/h2&gt;\n    &lt;p&gt;Esta es la página de inicio de mi sitio web.&lt;/p&gt;\n{% endblock %}\n\n\nExplicación\nEn este ejemplo, hemos creado una plantilla base llamada base.html que define la estructura común de todas las páginas. Luego, creamos una plantilla específica para la página de inicio que hereda de base.html. Utilizamos Bootstrap para mejorar el aspecto de la página.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una plantilla base llamada base_notas.html que incluya un menú de navegación y un pie de página.\nCrea una plantilla específica llamada lista_notas.html que herede de base_notas.html y muestre una lista de notas utilizando Bootstrap.\n\n\n\n\n\nSolucion\n\nResumen:\nEn esta actividad práctica, se creará una plantilla base llamada “base_notas.html” que contendrá un menú de navegación y un pie de página. Luego, se creará una plantilla específica llamada “lista_notas.html” que heredará de “base_notas.html” y mostrará una lista de notas utilizando Bootstrap.\nCódigo:\n\nCrear la Plantilla Base “base_notas.html”:\n\nEn la carpeta de plantillas de tu aplicación (“articulos” en este ejemplo), crea un archivo llamado “base_notas.html” con el siguiente contenido:\n\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{% block title %}Título por Defecto{% endblock %}&lt;/title&gt;\n    &lt;!-- Agregar enlaces a Bootstrap y otros recursos aquí --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"#\"&gt;Mi Aplicación de Notas&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n                &lt;li class=\"nav-item active\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Inicio &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Notas&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;!-- Agregar más elementos de menú si es necesario --&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;div class=\"container\"&gt;\n        {% block content %}{% endblock %}\n    &lt;/div&gt;\n\n    &lt;footer class=\"footer mt-auto py-3\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;span class=\"text-muted\"&gt;© 2023 Mi Aplicación de Notas&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/footer&gt;\n    &lt;!-- Agregar enlaces a Bootstrap y otros recursos aquí --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nCrear la Plantilla Específica “lista_notas.html”:\n\nCrea un archivo llamado “lista_notas.html” en la misma carpeta de plantillas de tu aplicación (“articulos” en este ejemplo). Esta plantilla heredará de “base_notas.html” y mostrará una lista de notas utilizando Bootstrap:\n{% extends \"base_notas.html\" %}\n\n{% block title %}Lista de Notas{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Lista de Notas&lt;/h1&gt;\n    &lt;ul class=\"list-group\"&gt;\n        {% for nota in notas %}\n            &lt;li class=\"list-group-item\"&gt;{{ nota.titulo }}&lt;/li&gt;\n            &lt;p class=\"list-group-item\"&gt;{{ nota.contenido }}&lt;/p&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endblock %}\nExplicación:\n\nHemos creado una plantilla base llamada “base_notas.html” que incluye un menú de navegación en la parte superior y un pie de página en la parte inferior. Esta plantilla utiliza Bootstrap para el estilo del menú y el pie de página.\nLuego, hemos creado una plantilla específica llamada “lista_notas.html” que hereda de “base_notas.html” utilizando {% extends “base_notas.html” %}. Esto significa que “lista_notas.html” incluirá todo el contenido de “base_notas.html.”\nEn “lista_notas.html,” hemos definido bloques {% block … %} para personalizar el título de la página (“Lista de Notas”) y el contenido de la lista de notas. Dentro del bloque de contenido, iteramos sobre las notas y las mostramos utilizando clases de Bootstrap para dar formato a la lista.\n\nCon estos pasos, hemos creado una plantilla base reutilizable (“base_notas.html”) y una plantilla específica (“lista_notas.html”) que hereda de la base y muestra una lista de notas con estilo Bootstrap. Esto facilitará la creación de páginas similares en tu aplicación Django.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Herencia de Plantillas y Bootstrap en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.4.html#qué-aprendimos",
    "href": "unidades/unidad8/unidad8.4.html#qué-aprendimos",
    "title": "Herencia de Plantillas y Bootstrap en Django",
    "section": "¿Qué aprendimos?",
    "text": "¿Qué aprendimos?\nAprendimos cómo utilizar la herencia de plantillas en Django para crear un diseño consistente en nuestras páginas web y cómo integrar Bootstrap para mejorar la apariencia de la interfaz de usuario.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>37</span>  <span class='chapter-title'>Herencia de Plantillas y Bootstrap en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad8/unidad8.5.html#conceptos-clave",
    "href": "unidades/unidad8/unidad8.5.html#conceptos-clave",
    "title": "Creación de un CRUD de Tareas en Django",
    "section": "Conceptos Clave",
    "text": "Conceptos Clave\n\nCRUD\nCRUD es un acrónimo de “Crear, Leer, Actualizar, Eliminar” y se refiere a las operaciones básicas de manipulación de datos en una aplicación.\n\n\nFormularios en Django\nLos formularios en Django nos permiten crear y manejar formularios HTML de manera sencilla y eficiente.\nEjemplo\n\n# Creación de un modelo Django llamado \"Tarea\"\nfrom django.db import models\n\nclass Tarea(models.Model):\n    titulo = models.CharField(max_length=200)\n    descripcion = models.TextField()\n    fecha_creacion = models.DateTimeField('fecha de creación')\n# Creación de un formulario en Django para crear una tarea\nfrom django import forms\n\nclass TareaForm(forms.ModelForm):\n    class Meta:\n        model = Tarea\n        fields = ['titulo', 'descripcion', 'fecha_creacion']\n# Creación de una vista para listar, crear y actualizar tareas\nfrom django.shortcuts import render, get_object_or_404, redirect\nfrom .models import Tarea\nfrom .forms import TareaForm\n\ndef lista_tareas(request):\n    tareas = Tarea.objects.all()\n    return render(request, 'lista_tareas.html', {'lista_tareas': tareas})\n\ndef crear_tarea(request):\n    if request.method == \"POST\":\n        form = TareaForm(request.POST)\n        if form.is_valid():\n            tarea = form.save()\n            return redirect('detalle_tarea', pk=tarea.pk)\n    else:\n        form = TareaForm()\n    return render(request, 'crear_tarea.html', {'form': form})\n\ndef detalle_tarea(request, pk):\n    tarea = get_object_or_404(Tarea, pk=pk)\n    return render(request, 'detalle_tarea.html', {'tarea': tarea})\n# Creación de plantillas HTML para las vistas\n\n\nExplicación\nEn este ejemplo, hemos creado un modelo Tarea para representar las tareas en nuestra base de datos. Luego, creamos un formulario TareaForm utilizando formularios en Django. Además, creamos vistas para listar, crear y ver detalles de tareas. Las plantillas HTML correspondientes se utilizarán para renderizar las páginas web.\n\n\n\n\n\n\nActividad Práctica\n\n\n\n\nCrea una vista y un formulario para actualizar tareas existentes.\nAgrega una función para eliminar tareas.\nUtiliza las plantillas HTML para mostrar la lista de tareas, el formulario de creación y los detalles de la tarea.\n\n\n\n\n\nSolucion\n\nResumen:\nEn esta actividad práctica, se creará una plantilla base llamada “base_notas.html” que contendrá un menú de navegación y un pie de página. Luego, se creará una plantilla específica llamada “lista_notas.html” que heredará de “base_notas.html” y mostrará una lista de notas utilizando Bootstrap.\nCódigo:\n\nCrear la Plantilla Base “base_notas.html”:\n\nEn la carpeta de plantillas de tu aplicación (“articulos” en este ejemplo), crea un archivo llamado “base_notas.html” con el siguiente contenido:\n&lt;!DOCTYPE html&gt;\n&lt;html lang=\"es\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;title&gt;{% block title %}Título por Defecto{% endblock %}&lt;/title&gt;\n    &lt;!-- Agregar enlaces a Bootstrap y otros recursos aquí --&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;nav class=\"navbar navbar-expand-lg navbar-light bg-light\"&gt;\n        &lt;a class=\"navbar-brand\" href=\"#\"&gt;Mi Aplicación de Notas&lt;/a&gt;\n        &lt;button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarNav\" aria-controls=\"navbarNav\" aria-expanded=\"false\" aria-label=\"Toggle navigation\"&gt;\n            &lt;span class=\"navbar-toggler-icon\"&gt;&lt;/span&gt;\n        &lt;/button&gt;\n        &lt;div class=\"collapse navbar-collapse\" id=\"navbarNav\"&gt;\n            &lt;ul class=\"navbar-nav\"&gt;\n                &lt;li class=\"nav-item active\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Inicio &lt;span class=\"sr-only\"&gt;(current)&lt;/span&gt;&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;li class=\"nav-item\"&gt;\n                    &lt;a class=\"nav-link\" href=\"#\"&gt;Notas&lt;/a&gt;\n                &lt;/li&gt;\n                &lt;!-- Agregar más elementos de menú si es necesario --&gt;\n            &lt;/ul&gt;\n        &lt;/div&gt;\n    &lt;/nav&gt;\n\n    &lt;div class=\"container\"&gt;\n        {% block content %}{% endblock %}\n    &lt;/div&gt;\n\n    &lt;footer class=\"footer mt-auto py-3\"&gt;\n        &lt;div class=\"container\"&gt;\n            &lt;span class=\"text-muted\"&gt;© 2023 Mi Aplicación de Notas&lt;/span&gt;\n        &lt;/div&gt;\n    &lt;/footer&gt;\n    &lt;!-- Agregar enlaces a Bootstrap y otros recursos aquí --&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n\nCrear la Plantilla Específica “lista_notas.html”:\n\nCrea un archivo llamado “lista_notas.html” en la misma carpeta de plantillas de tu aplicación (“articulos” en este ejemplo). Esta plantilla heredará de “base_notas.html” y mostrará una lista de notas utilizando Bootstrap:\n{% extends \"base_notas.html\" %}\n\n{% block title %}Lista de Notas{% endblock %}\n\n{% block content %}\n    &lt;h1&gt;Lista de Notas&lt;/h1&gt;\n    &lt;ul class=\"list-group\"&gt;\n        {% for nota in notas %}\n            &lt;li class=\"list-group-item\"&gt;{{ nota.titulo }}&lt;/li&gt;\n            &lt;p class=\"list-group-item\"&gt;{{ nota.contenido }}&lt;/p&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n{% endblock %}\nExplicación:\n\nHemos creado una plantilla base llamada “base_notas.html” que incluye un menú de navegación en la parte superior y un pie de página en la parte inferior. Esta plantilla utiliza Bootstrap para el estilo del menú y el pie de página.\nLuego, hemos creado una plantilla específica llamada “lista_notas.html” que hereda de “base_notas.html” utilizando {% extends “base_notas.html” %}. Esto significa que “lista_notas.html” incluirá todo el contenido de “base_notas.html.”\nEn “lista_notas.html,” hemos definido bloques {% block … %} para personalizar el título de la página (“Lista de Notas”) y el contenido de la lista de notas. Dentro del bloque de contenido, iteramos sobre las notas y las mostramos utilizando clases de Bootstrap para dar formato a la lista.\n\nCon estos pasos, hemos creado una plantilla base reutilizable (“base_notas.html”) y una plantilla específica (“lista_notas.html”) que hereda de la base y muestra una lista de notas con estilo Bootstrap. Esto facilitará la creación de páginas similares en tu aplicación Django.\n\n\n\n¿Qué aprendimos?\nAprendimos cómo crear un CRUD de tareas en Django utilizando modelos, formularios y vistas. Entendemos cómo Django simplifica la creación de aplicaciones web interactivas.",
    "crumbs": [
      "Unidad 8: Frameworks",
      "<span class='chapter-number'>38</span>  <span class='chapter-title'>Creación de un CRUD de Tareas en Django</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#instalación-de-mysql",
    "href": "unidades/unidad9/unidad9.1.html#instalación-de-mysql",
    "title": "Introducción e Instalación",
    "section": "Instalación de MySQL:",
    "text": "Instalación de MySQL:\nDescargar e instalar MySQL desde el sitio oficial.\nConfigurar contraseña para el usuario ‘root’.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#instalación-de-postgresql",
    "href": "unidades/unidad9/unidad9.1.html#instalación-de-postgresql",
    "title": "Introducción e Instalación",
    "section": "Instalación de PostgreSQL:",
    "text": "Instalación de PostgreSQL:\nDescargar e instalar PostgreSQL desde el sitio oficial.\nConfigurar contraseña para el usuario ‘postgres’.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#instalación-de-mongodb",
    "href": "unidades/unidad9/unidad9.1.html#instalación-de-mongodb",
    "title": "Introducción e Instalación",
    "section": "Instalación de MongoDB:",
    "text": "Instalación de MongoDB:\nDescargar e instalar MongoDB desde el sitio oficial.\nConfigurar directorio de datos y logs.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#conexión-a-la-base-de-datos",
    "href": "unidades/unidad9/unidad9.1.html#conexión-a-la-base-de-datos",
    "title": "Introducción e Instalación",
    "section": "Conexión a la Base de Datos:",
    "text": "Conexión a la Base de Datos:\n\nMySQL y PostgreSQL:\nUsar bibliotecas como mysql-connector-python o psycopg2 para conectarse y realizar operaciones.\n\n\nMongoDB:\nUsar la biblioteca pymongo para conectarse y realizar operaciones.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#ejemplo---conexión-a-mysql",
    "href": "unidades/unidad9/unidad9.1.html#ejemplo---conexión-a-mysql",
    "title": "Introducción e Instalación",
    "section": "Ejemplo - Conexión a MySQL:",
    "text": "Ejemplo - Conexión a MySQL:\nimport mysql.connector\n\n# Conexión a la base de datos\nconn = mysql.connector.connect(\n    host=\"localhost\",\n    user=\"root\",\n    password=\"contraseña\",\n    database=\"basededatos\"\n)",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#ejemplo---conexión-a-mongodb",
    "href": "unidades/unidad9/unidad9.1.html#ejemplo---conexión-a-mongodb",
    "title": "Introducción e Instalación",
    "section": "Ejemplo - Conexión a MongoDB:",
    "text": "Ejemplo - Conexión a MongoDB:\nimport pymongo\n\n# Conexión al servidor MongoDB\nclient = pymongo.MongoClient(\"mongodb://localhost:27017/\")\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nInstala MySQL, PostgreSQL y MongoDB en tu entorno. Crea una base de datos en cada uno de los sistemas. Conéctate a cada una de las bases de datos utilizando las bibliotecas adecuadas. Realiza una consulta de prueba en cada sistema para verificar la conexión.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.1.html#explicación-de-la-actividad",
    "href": "unidades/unidad9/unidad9.1.html#explicación-de-la-actividad",
    "title": "Introducción e Instalación",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes adquirir experiencia práctica en la instalación de diferentes sistemas de bases de datos y en la conexión a estas bases de datos utilizando las bibliotecas correspondientes. Les ayuda a comprender cómo establecer una conexión exitosa y cómo preparar el entorno para las operaciones futuras en bases de datos.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>39</span>  <span class='chapter-title'>Introducción e Instalación</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.2.html#operaciones-en-mysql",
    "href": "unidades/unidad9/unidad9.2.html#operaciones-en-mysql",
    "title": "Bases de Datos en MySQL",
    "section": "Operaciones en MySQL:",
    "text": "Operaciones en MySQL:\n\nCrear una tabla:\nCREATE TABLE nombre (columna1 tipo, columna2 tipo);\n\n\nInsertar registros:\nINSERT INTO nombre (columna1, columna2) VALUES (valor1, valor2);\n\n\nConsultar registros:\nSELECT * FROM nombre;\n\n\nActualizar registros:\nUPDATE nombre SET columna = valor WHERE condicion;\n\n\nEliminar registros:\nDELETE FROM nombre WHERE condicion;\n\n\nEliminar tabla:\nDROP TABLE nombre;",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Bases de Datos en MySQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.2.html#ejemplo---creación-de-una-tabla-en-mysql",
    "href": "unidades/unidad9/unidad9.2.html#ejemplo---creación-de-una-tabla-en-mysql",
    "title": "Bases de Datos en MySQL",
    "section": "Ejemplo - Creación de una Tabla en MySQL:",
    "text": "Ejemplo - Creación de una Tabla en MySQL:\nCREATE TABLE empleados (\n    id INT PRIMARY KEY,\n    nombre VARCHAR(100),\n    salario DECIMAL(10, 2)\n);\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nConéctate a la base de datos MySQL.\nCrea una tabla ‘productos’ con las columnas ‘id’, ‘nombre’ y ‘precio’.\nInserta al menos dos registros en la tabla ‘productos’.\nRealiza una consulta para obtener todos los registros de la tabla ‘productos’.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Bases de Datos en MySQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.2.html#explicación-de-la-actividad",
    "href": "unidades/unidad9/unidad9.2.html#explicación-de-la-actividad",
    "title": "Bases de Datos en MySQL",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes aplicar los conocimientos adquiridos en la creación de tablas, inserción de registros y consultas en una base de datos MySQL. Les ayuda a ganar experiencia práctica en la manipulación de datos utilizando SQL en MySQL.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>40</span>  <span class='chapter-title'>Bases de Datos en MySQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.3.html#operaciones-en-postgresql",
    "href": "unidades/unidad9/unidad9.3.html#operaciones-en-postgresql",
    "title": "Crear y Eliminar Tablas en PostgreSQL",
    "section": "Operaciones en PostgreSQL:",
    "text": "Operaciones en PostgreSQL:\n\nCrear una tabla:\nCREATE TABLE nombre (columna1 tipo, columna2 tipo);\n\n\nInsertar registros:\nINSERT INTO nombre (columna1, columna2) VALUES (valor1, valor2);\n\n\nConsultar registros:\nSELECT * FROM nombre;\n\n\nActualizar registros:\nUPDATE nombre SET columna = valor WHERE condicion;\n\n\nEliminar registros:\nDELETE FROM nombre WHERE condicion;\n\n\nEliminar tabla:\nDROP TABLE nombre;",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Crear y Eliminar Tablas en PostgreSQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.3.html#ejemplo---creación-de-una-tabla-en-postgresql",
    "href": "unidades/unidad9/unidad9.3.html#ejemplo---creación-de-una-tabla-en-postgresql",
    "title": "Crear y Eliminar Tablas en PostgreSQL",
    "section": "Ejemplo - Creación de una Tabla en PostgreSQL:",
    "text": "Ejemplo - Creación de una Tabla en PostgreSQL:\nCREATE TABLE empleados (\n    id SERIAL PRIMARY KEY,\n    nombre VARCHAR(100),\n    salario DECIMAL(10, 2)\n);\n\n\n\n\n\n\nActividad Práctica\n\n\n\nConéctate a la base de datos PostgreSQL.\nCrea una tabla ‘clientes’ con las columnas ‘id’, ‘nombre’ y ‘email’.\nInserta al menos dos registros en la tabla ‘clientes’.\nRealiza una consulta para obtener todos los registros de la tabla ‘clientes’.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Crear y Eliminar Tablas en PostgreSQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.3.html#conéctate-a-la-base-de-datos-postgresql.",
    "href": "unidades/unidad9/unidad9.3.html#conéctate-a-la-base-de-datos-postgresql.",
    "title": "Crear y Eliminar Tablas en PostgreSQL",
    "section": "Conéctate a la base de datos PostgreSQL.",
    "text": "Conéctate a la base de datos PostgreSQL.\nCrea una tabla ‘clientes’ con las columnas ‘id’, ‘nombre’ y ‘email’.\nInserta al menos dos registros en la tabla ‘clientes’.\nRealiza una consulta para obtener todos los registros de la tabla ‘clientes’.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Crear y Eliminar Tablas en PostgreSQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.3.html#explicación-de-la-actividad",
    "href": "unidades/unidad9/unidad9.3.html#explicación-de-la-actividad",
    "title": "Crear y Eliminar Tablas en PostgreSQL",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes aplicar los conocimientos adquiridos en la creación de tablas, inserción de registros y consultas en una base de datos PostgreSQL. Les ayuda a ganar experiencia práctica en la manipulación de datos utilizando SQL en PostgreSQL.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>41</span>  <span class='chapter-title'>Crear y Eliminar Tablas en PostgreSQL</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.4.html#operaciones-en-mongodb",
    "href": "unidades/unidad9/unidad9.4.html#operaciones-en-mongodb",
    "title": "Operaciones Básicas en MongoDB",
    "section": "Operaciones en MongoDB:",
    "text": "Operaciones en MongoDB:\n\nInsertar documentos:\ndb.coleccion.insert({ campo1: valor1, campo2: valor2 });\n\n\nConsultar documentos:\ndb.coleccion.find();\n\n\nActualizar documentos:\ndb.coleccion.update({ campo: valor }, { $set: { campo_actualizado: nuevo_valor } });\n\n\nEliminar documentos:\ndb.coleccion.remove({ campo: valor });",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Operaciones Básicas en MongoDB</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.4.html#ejemplo---inserción-de-un-documento-en-mongodb",
    "href": "unidades/unidad9/unidad9.4.html#ejemplo---inserción-de-un-documento-en-mongodb",
    "title": "Operaciones Básicas en MongoDB",
    "section": "Ejemplo - Inserción de un Documento en MongoDB:",
    "text": "Ejemplo - Inserción de un Documento en MongoDB:\n// Insertar un documento en la colección 'productos'\ndb.productos.insert({ nombre: \"Camiseta\", precio: 20 });\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nConéctate a la base de datos MongoDB.\nInserta al menos dos documentos en la colección ‘productos’.\nRealiza una consulta para obtener todos los documentos de la colección ‘productos’.\nActualiza el precio de uno de los documentos en la colección.\nElimina un documento de la colección.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Operaciones Básicas en MongoDB</span>"
    ]
  },
  {
    "objectID": "unidades/unidad9/unidad9.4.html#explicación-de-la-actividad",
    "href": "unidades/unidad9/unidad9.4.html#explicación-de-la-actividad",
    "title": "Operaciones Básicas en MongoDB",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes aplicar los conocimientos adquiridos en la inserción, consulta, actualización y eliminación de documentos en una base de datos MongoDB. Les ayuda a ganar experiencia práctica en la manipulación de datos en una base de datos NoSQL.",
    "crumbs": [
      "Unidad 9: Introducción a Bases de Datos",
      "<span class='chapter-number'>42</span>  <span class='chapter-title'>Operaciones Básicas en MongoDB</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.1.html#conceptos-clave",
    "href": "unidades/unidad10/unidad10.1.html#conceptos-clave",
    "title": "Introducción a Data Science",
    "section": "Conceptos Clave:",
    "text": "Conceptos Clave:\n\nCiencia de Datos:\nProceso de extracción de conocimiento y perspectivas a partir de datos.\n\n\nUso de Python en Data Science:\nBibliotecas como NumPy, Pandas y Matplotlib.\n\n\nEjemplos de Aplicación:\nAnálisis de datos,\nVisualización,\nAprendizaje Automático,\netc.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Introducción a Data Science</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.1.html#ejemplo---uso-de-pandas-para-análisis-de-datos",
    "href": "unidades/unidad10/unidad10.1.html#ejemplo---uso-de-pandas-para-análisis-de-datos",
    "title": "Introducción a Data Science",
    "section": "Ejemplo - Uso de Pandas para Análisis de Datos:",
    "text": "Ejemplo - Uso de Pandas para Análisis de Datos:\nimport pandas as pd\n\ndata = {\n    'nombre': ['Juan', 'María', 'Pedro'],\n    'edad': [25, 30, 28]\n}\n\ndf = pd.DataFrame(data)\nprint(df)\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nInvestiga y elige un conjunto de datos disponible en línea.\nUtiliza la biblioteca Pandas para cargar y analizar los datos.\nRealiza un análisis simple, como calcular estadísticas descriptivas, en el conjunto de datos.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Introducción a Data Science</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.1.html#explicación-de-la-actividad",
    "href": "unidades/unidad10/unidad10.1.html#explicación-de-la-actividad",
    "title": "Introducción a Data Science",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes explorar la aplicación de Python en el campo de la Ciencia de Datos. Les ayuda a comprender cómo utilizar bibliotecas como Pandas para analizar datos y extraer información útil.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>43</span>  <span class='chapter-title'>Introducción a Data Science</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.2.html#qué-es-django",
    "href": "unidades/unidad10/unidad10.2.html#qué-es-django",
    "title": "Introducción a Django Framework",
    "section": "Qué es Django:",
    "text": "Qué es Django:\nDjango es un framework de desarrollo web de alto nivel y de código abierto.\nProporciona una estructura organizada para crear aplicaciones web de manera eficiente.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Introducción a Django Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.2.html#instalación-de-django",
    "href": "unidades/unidad10/unidad10.2.html#instalación-de-django",
    "title": "Introducción a Django Framework",
    "section": "Instalación de Django:",
    "text": "Instalación de Django:\n\nInstalar Django utilizando pip:\npip install django\n\n\nVerificar la instalación:\ndjango-admin --version",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Introducción a Django Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.2.html#creación-de-una-aplicación-web-básica",
    "href": "unidades/unidad10/unidad10.2.html#creación-de-una-aplicación-web-básica",
    "title": "Introducción a Django Framework",
    "section": "Creación de una Aplicación Web Básica:",
    "text": "Creación de una Aplicación Web Básica:\n\nCrear un nuevo proyecto:\ndjango-admin startproject proyecto .\n\n\nCrear una nueva aplicación dentro del proyecto:\npython manage.py startapp app",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Introducción a Django Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.2.html#ejemplo---creación-de-una-página-web-con-django",
    "href": "unidades/unidad10/unidad10.2.html#ejemplo---creación-de-una-página-web-con-django",
    "title": "Introducción a Django Framework",
    "section": "Ejemplo - Creación de una Página Web con Django:",
    "text": "Ejemplo - Creación de una Página Web con Django:\n# views.py\nfrom django.http import HttpResponse\n\ndef hola_mundo(request):\n    return HttpResponse(\"¡Hola, mundo!\")\n# urls.py\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('hola/', views.hola_mundo, name='hola_mundo'),\n]\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nInstala Django en tu entorno.\nCrea un proyecto llamado ‘blog’ y una aplicación llamada ‘articulos’.\nCrea una vista que muestre un mensaje de bienvenida en la página principal.\nConfigura una URL para acceder a la vista creada.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Introducción a Django Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.2.html#explicación-de-la-actividad",
    "href": "unidades/unidad10/unidad10.2.html#explicación-de-la-actividad",
    "title": "Introducción a Django Framework",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEsta actividad permite a los participantes experimentar con la creación de proyectos y aplicaciones utilizando Django. Les ayuda a comprender cómo estructurar una aplicación web utilizando este framework y cómo definir rutas y vistas para mostrar contenido en el navegador.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>44</span>  <span class='chapter-title'>Introducción a Django Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.3.html#administración-y-base-de-datos-en-django",
    "href": "unidades/unidad10/unidad10.3.html#administración-y-base-de-datos-en-django",
    "title": "Introducción a Django Framework y Django Rest Framework",
    "section": "Administración y Base de Datos en Django",
    "text": "Administración y Base de Datos en Django\n\nInterfaz de Administración de Django\nDjango proporciona una potente interfaz de administración que facilita la gestión de datos y contenido. Esta interfaz se genera automáticamente a partir de los modelos definidos en la aplicación.\n\n\n\n\n\n\nTip\n\n\n\nPara poder utilizar nustros modelos en la administración debemos registrarlos en el archivo admin.py de la aplicación.\nfrom django.contrib import admin\nfrom .models import Producto\n\nadmin.site.register(Producto)\n\n\nLos administradores del sitio pueden utilizar la interfaz para:\n\nAgregar, editar y eliminar registros de la base de datos.\nGestionar usuarios y permisos.\nRealizar otras tareas administrativas.\n\n\n\nORM de Django\nEl ORM (Mapeo Objeto-Relacional) de Django permite interactuar con la base de datos utilizando objetos Python en lugar de escribir consultas SQL directamente. Esto simplifica la gestión de datos y hace que el código sea más legible.\nPor ejemplo, para recuperar todos los productos de la base de datos, puedes hacer lo siguiente:\nproductos = Producto.objects.all()\nEsto devuelve una lista de objetos Producto que representan los registros de la tabla de productos en la base de datos.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introducción a Django Framework y Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.3.html#ejercicios-prácticos",
    "href": "unidades/unidad10/unidad10.3.html#ejercicios-prácticos",
    "title": "Introducción a Django Framework y Django Rest Framework",
    "section": "Ejercicios Prácticos",
    "text": "Ejercicios Prácticos\n\nEjercicio 1: Creación de un Modelo en Django\n\nCrear un modelo en Django para representar una entidad de su elección (por ejemplo, libros, películas, tareas, etc.).\nDefinir al menos tres campos para el modelo.\nEjecutar las migraciones para aplicar el modelo a la base de datos.\n\n# models.py\n\nfrom django.db import models\n\nclass Libro(models.Model):\n    titulo = models.CharField(max_length=100)\n    autor = models.CharField(max_length=50)\n    año_publicacion = models.IntegerField()\n    \n    def __str__(self):\n        return self.titulo\nDespués de definir el modelo, debes crear y aplicar las migraciones utilizando los siguientes comandos:\npython manage.py makemigrations\npython manage.py migrate\n\n\nEjercicio 2: Creación de una Vista y Plantilla en Django\n\nCrear una vista en Django que recupere datos de su modelo y los pase a una plantilla.\nCrear una plantilla HTML que muestre los datos en una página web.\nConfigurar una URL para acceder a la vista.\n\n# views.py\n\nfrom django.shortcuts import render\nfrom .models import Libro\n\ndef lista_libros(request):\n    libros = Libro.objects.all()\n    return render(request, 'myapp/lista_libros.html', {'libros': libros})\n&lt;!-- lista_libros.html --&gt;\n\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Lista de Libros&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Lista de Libros&lt;/h1&gt;\n    &lt;ul&gt;\n        {% for libro in libros %}\n        &lt;li&gt;{{ libro.titulo }} - {{ libro.autor }} ({{ libro.año_publicacion }})&lt;/li&gt;\n        {% empty %}\n        &lt;li&gt;No hay libros disponibles.&lt;/li&gt;\n        {% endfor %}\n    &lt;/ul&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n# urls.py\n\nfrom django.urls import path\nfrom . import views\n\nurlpatterns = [\n    path('libros/', views.lista_libros, name='lista_libros'),\n]\n\n\nEjercicio 3: Uso de la Interfaz de Administración de Django\n\nRegistrar el modelo creado en el Ejercicio 1 en la interfaz de administración de Django.\nUtilizar la interfaz de administración para agregar al menos dos registros de ejemplo.\n\nPrimero, asegúrate de haber registrado el modelo Libro en el archivo admin.py de tu aplicación:\n# admin.py\n\nfrom django.contrib import admin\nfrom .models import Libro\n\nadmin.site.register(Libro)\nLuego, puedes acceder a la interfaz de administración de Django en http://tu-sitio/admin/ para agregar registros de ejemplo.\n\n\nEjercicio 4: Uso del ORM de Django\n\nEscribir código Python para recuperar datos de su modelo utilizando el ORM de Django.\nMostrar los datos recuperados en la consola o en una página web.\n\nPuedes utilizar el siguiente código para recuperar y mostrar datos de libros utilizando el ORM de Django en una vista:\n# views.py\n\nfrom django.shortcuts import render\nfrom .models import Libro\n\ndef lista_libros(request):\n    libros = Libro.objects.all()\n    return render(request, 'lista_libros.html', {'libros': libros})\nEste código recupera todos los registros de la base de datos y los pasa a la plantilla para su representación.\nEstos ejercicios prácticos ayudarán a los estudiantes a aplicar los conceptos de modelos, vistas y plantillas en Django, así como a familiarizarse con la interfaz de administración y el ORM.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introducción a Django Framework y Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.3.html#api-de-libros-utilizando-django-rest-framework-drf.",
    "href": "unidades/unidad10/unidad10.3.html#api-de-libros-utilizando-django-rest-framework-drf.",
    "title": "Introducción a Django Framework y Django Rest Framework",
    "section": "API de libros utilizando Django Rest Framework (DRF).",
    "text": "API de libros utilizando Django Rest Framework (DRF).\nPara configurar y desarrollar este proyecto es necesario que realicemos los siguientes pasos:\n\nPaso 1: Configuración Inicial\nAsegúrate de tener Django Rest Framework instalado en tu entorno virtual. Puedes instalarlo usando pip:\npip install djangorestframework\nCrea un nuevo proyecto de Django si aún no lo has hecho:\ndjango-admin startproject proyecto_api\nLuego, crea una nueva aplicación dentro del proyecto:\ncd proyecto_api\npython manage.py startapp api\nAgrega rest_framework y api a la lista de aplicaciones en settings.py:\nINSTALLED_APPS = [\n        # ...\n        'rest_framework',\n        'api',\n    ]",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introducción a Django Framework y Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.3.html#paso-2-modelado-de-datos",
    "href": "unidades/unidad10/unidad10.3.html#paso-2-modelado-de-datos",
    "title": "Introducción a Django Framework y Django Rest Framework",
    "section": "Paso 2: Modelado de Datos",
    "text": "Paso 2: Modelado de Datos\nDefine el modelo de datos para los libros en el archivo api/models.py. Aquí tienes un ejemplo simple:\nfrom django.db import models\n\nclass Libro(models.Model):\n    titulo = models.CharField(max_length=100)\n    autor = models.CharField(max_length=100)\n    año_publicacion = models.PositiveIntegerField()\n\n    def __str__(self):\n        return self.titulo\nLuego, crea y aplica las migraciones para este modelo:\npython manage.py makemigrations\npython manage.py migrate\n\nPaso 3: Serialización\nCrea un serializador en el archivo api/serializers.py para convertir los objetos de modelo en datos JSON:\nfrom rest_framework import serializers\nfrom .models import Libro\n\nclass LibroSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Libro\n        fields = ['id', 'titulo', 'autor', 'año_publicacion']\n\n\nPaso 4: Vistas y Rutas\nEn api/views.py, define las vistas basadas en clases utilizando Django Rest Framework:\nfrom rest_framework import generics\nfrom .models import Libro\nfrom .serializers import LibroSerializer\n\nclass ListaLibros(generics.ListCreateAPIView):\n    queryset = Libro.objects.all()\n    serializer_class = LibroSerializer\n\nclass DetalleLibro(generics.RetrieveUpdateDestroyAPIView):\n    queryset = Libro.objects.all()\n    serializer_class = LibroSerializer\nLuego, configura las rutas en api/urls.py:\nfrom django.urls import path\nfrom .views import ListaLibros, DetalleLibro\n\nurlpatterns = [\n    path('libros/', ListaLibros.as_view(), name='lista_libros'),\n    path('libros/&lt;int:pk&gt;/', DetalleLibro.as_view(), name='detalle_libro'),\n]\n\n\nPaso 5: Configuración de URLs Principales\nEn el archivo proyecto_api/urls.py, incluye las rutas de la aplicación de API:\nfrom django.contrib import admin\nfrom django.urls import path, include\n\nurlpatterns = [\n    path('admin/', admin.site.urls),\n    path('api/', include('api.urls')),\n]\n\n\nPaso 6: Ejecutar el Servidor\nInicia el servidor de desarrollo:\npython manage.py runserver\n\n\nPaso 7: Prueba de la API\nAhora, puedes acceder a la API en las siguientes URL:\n\nLista de libros: http://localhost:8000/api/libros/\nDetalle de libro: http://localhost:8000/api/libros/id/\n\n\n\n\n\n\n\nTip\n\n\n\nEn el Detalle del Libro, es necesario cambiar el id por el número de identificación del libro que se desea consultar.\n\n\nPuedes utilizar herramientas como Postman, Thunder Cliente o Rappid API Client o simplemente un navegador web para probar las rutas y realizar operaciones CRUD en la API de libros.\nEste proyecto proporciona una base sólida para desarrollar una API de libros con Django Rest Framework. Puedes personalizarlo según tus necesidades y agregar autenticación u otras características según sea necesario.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introducción a Django Framework y Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.3.html#conclusiones",
    "href": "unidades/unidad10/unidad10.3.html#conclusiones",
    "title": "Introducción a Django Framework y Django Rest Framework",
    "section": "Conclusiones",
    "text": "Conclusiones\nEn esta unidad, hemos explorado Django y Django Rest Framework (DRF), dos poderosas herramientas para el desarrollo web con Python. Aquí están algunas conclusiones clave:\n\nDjango es un framework web de alto nivel que sigue el principio “baterías incluidas”. Proporciona una estructura sólida y conveniente para desarrollar aplicaciones web, incluyendo la administración de bases de datos, la autenticación de usuarios y un sistema de rutas robusto.\nDjango Rest Framework (DRF) es una extensión de Django que simplifica la creación de API REST. Proporciona clases y herramientas que permiten definir fácilmente puntos finales de API y serializar datos de manera eficiente.\nAlgunas ventajas de utilizar Django incluyen su gran comunidad, documentación extensa y la capacidad de construir aplicaciones web rápidamente.\nDRF es ideal para crear API RESTful de manera rápida y eficiente. Proporciona una capa de serialización que facilita la conversión de objetos de modelo en datos JSON.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introducción a Django Framework y Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.3.html#recomendaciones",
    "href": "unidades/unidad10/unidad10.3.html#recomendaciones",
    "title": "Introducción a Django Framework y Django Rest Framework",
    "section": "Recomendaciones",
    "text": "Recomendaciones\n\nAprender la Documentación: Tanto Django como DRF tienen documentación detallada. Aprovecha estos recursos para comprender las funcionalidades y las mejores prácticas.\nPracticar: La práctica es clave para dominar estas herramientas. Crea proyectos pequeños para aplicar lo que has aprendido.\nComunidad: La comunidad de Django es activa y solidaria. Únete a foros y grupos de discusión para obtener ayuda cuando la necesites.\nSeguridad: Django tiene características de seguridad incorporadas, pero debes estar atento a las mejores prácticas de seguridad web al desarrollar aplicaciones.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>45</span>  <span class='chapter-title'>Introducción a Django Framework y Django Rest Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#qué-es-flask",
    "href": "unidades/unidad10/unidad10.4.html#qué-es-flask",
    "title": "Introducción a Flask Framework",
    "section": "¿Qué es Flask?",
    "text": "¿Qué es Flask?\nFlask es un microframework web de Python que permite crear aplicaciones web de manera rápida y sencilla. A diferencia de los frameworks más grandes, como Django, Flask se centra en proporcionar solo lo esencial para crear aplicaciones web, dejando a los desarrolladores la libertad de elegir las herramientas y bibliotecas adicionales que deseen.\n\nVentajas de Usar Flask\n\nSimplicidad: Flask se destaca por su simplicidad y facilidad de uso. Su estructura minimalista hace que sea fácil de aprender y comprender.\nFlexibilidad: Aunque es minimalista, Flask es altamente personalizable. Los desarrolladores pueden elegir las extensiones y bibliotecas que mejor se adapten a sus necesidades.\nComunidad Activa: Flask cuenta con una comunidad activa de desarrolladores y una amplia documentación en línea.\nIdeal para Proyectos Pequeños y Medianos: Flask es perfecto para proyectos pequeños y medianos, prototipado rápido y aplicaciones que no requieren una gran cantidad de funcionalidades incorporadas.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#ecosistema-de-extensiones-de-flask",
    "href": "unidades/unidad10/unidad10.4.html#ecosistema-de-extensiones-de-flask",
    "title": "Introducción a Flask Framework",
    "section": "Ecosistema de Extensiones de Flask",
    "text": "Ecosistema de Extensiones de Flask\nFlask tiene un ecosistema de extensiones que permiten agregar funcionalidades específicas a las aplicaciones web. Estas extensiones abarcan áreas como autenticación de usuarios, bases de datos, manejo de formularios y más. Algunas extensiones populares son Flask-SQLAlchemy para trabajar con bases de datos y Flask-WTF para manejar formularios.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#instalación-de-flask",
    "href": "unidades/unidad10/unidad10.4.html#instalación-de-flask",
    "title": "Introducción a Flask Framework",
    "section": "Instalación de Flask",
    "text": "Instalación de Flask\n\nCómo Instalar Flask Usando pip\nPara comenzar a trabajar con Flask, primero debes instalarlo en tu entorno de desarrollo (virtualenv o docker). Puedes hacerlo utilizando la herramienta pip, que es el administrador de paquetes de Python.\nEjecuta el siguiente comando en tu terminal:\npip install flask\n\n\nCreación de un Entorno Virtual para Proyectos Flask.\n\n\n\n\n\n\nTip\n\n\n\nSe recomienda crear un entorno virtual para cada proyecto Flask.\n\n\n\n\n\n\n\n\nNote\n\n\n\nUn entorno virtual es un espacio aislado donde puedes instalar las dependencias específicas de tu proyecto sin interferir con otras aplicaciones.\n\n\nPara crear un entorno virtual, sigue estos pasos:\n\nAbre una terminal y navega hasta la carpeta de tu proyecto.\nEjecuta el siguiente comando para crear un entorno virtual.\n\npython3 -m venv venv\nActiva el entorno virtual:\nEn Windows:\nvenv\\Scripts\\activate\nEn Linux o macOS:\nsource venv/bin/activate\nAhora estás listo para trabajar en tu proyecto Flask en un entorno aislado.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#tu-primera-aplicación-en-flask",
    "href": "unidades/unidad10/unidad10.4.html#tu-primera-aplicación-en-flask",
    "title": "Introducción a Flask Framework",
    "section": "Tu Primera Aplicación en Flask",
    "text": "Tu Primera Aplicación en Flask\n\nCreación de una Aplicación Web Simple\nEn Flask, una aplicación web se crea mediante una instancia de la clase Flask. Aquí hay un ejemplo simple de cómo crear una aplicación web:\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef hello_world():\n    return '¡Hola, mundo!'\n\nif __name__ == '__main__':\n    app.run()\n\nImportamos la clase Flask de la biblioteca Flask.\nCreamos una instancia de Flask y la asignamos a la variable app.\nUsamos el decorador (app.route?)(‘/’) para definir una ruta en nuestra aplicación. En este caso, la ruta raíz ‘/’ se maneja con la función hello_world().\nCuando se ejecuta la aplicación (if name == ‘main’:), llamamos a app.run() para iniciar el servidor web.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#definición-de-rutas-y-vistas-en-flask",
    "href": "unidades/unidad10/unidad10.4.html#definición-de-rutas-y-vistas-en-flask",
    "title": "Introducción a Flask Framework",
    "section": "Definición de Rutas y Vistas en Flask",
    "text": "Definición de Rutas y Vistas en Flask\nEn Flask, las rutas se definen utilizando decoradores como (app.route?)(‘/’). Cada ruta está asociada a una función (vista) que se ejecuta cuando se accede a esa ruta en el navegador. Las vistas pueden devolver contenido HTML o cualquier otro tipo de respuesta web.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#plantillas-html-en-flask",
    "href": "unidades/unidad10/unidad10.4.html#plantillas-html-en-flask",
    "title": "Introducción a Flask Framework",
    "section": "Plantillas HTML en Flask",
    "text": "Plantillas HTML en Flask\nFlask permite renderizar plantillas HTML para generar páginas web dinámicas. Para esto, generalmente se usa una biblioteca llamada Jinja2. Las plantillas pueden incluir variables y lógica de presentación.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#manejo-de-formularios",
    "href": "unidades/unidad10/unidad10.4.html#manejo-de-formularios",
    "title": "Introducción a Flask Framework",
    "section": "Manejo de Formularios",
    "text": "Manejo de Formularios\n\nCreación y Procesamiento de Formularios en Flask\nLas aplicaciones web suelen requerir la entrada de datos de los usuarios a través de formularios. Flask facilita la creación y el procesamiento de formularios.\nPara crear un formulario en Flask, generalmente se define una clase que hereda de flask_wtf.FlaskForm.\nA través de esta clase, puedes definir los campos del formulario y las validaciones necesarias.\nEl siguiente es un ejemplo simple de cómo definir un formulario de inicio de sesión:\nfrom flask_wtf import FlaskForm\nfrom wtforms import StringField, PasswordField\nfrom wtforms.validators import DataRequired\n\nclass LoginForm(FlaskForm):\n    username = StringField('Nombre de Usuario', validators=[DataRequired()])\n    password = PasswordField('Contraseña', validators=[DataRequired()])\nEn este ejemplo, hemos creado un formulario LoginForm con dos campos: username y password. También hemos especificado que ambos campos son obligatorios.\n\n\nValidación de Datos del Formulario.\nFlask-WTF, una extensión de Flask, facilita la validación de los datos del formulario. En el ejemplo anterior, usamos el validador DataRequired() para asegurarnos de que los campos no estén vacíos.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#ejercicios-prácticos",
    "href": "unidades/unidad10/unidad10.4.html#ejercicios-prácticos",
    "title": "Introducción a Flask Framework",
    "section": "Ejercicios Prácticos",
    "text": "Ejercicios Prácticos\nEjercicio 1: Creación de una Aplicación Web Básica en Flask\nCrea una aplicación web simple en Flask que muestre un mensaje de bienvenida en la ruta raíz (“/”). Puedes personalizar el mensaje de bienvenida.\nfrom flask import Flask\n\napp = Flask(__name__)\n\n@app.route('/')\ndef welcome():\n    return '¡Bienvenido a mi aplicación web en Flask!'\n\nif __name__ == '__main__':\n    app.run()\nEste código crea una aplicación web en Flask que muestra un mensaje de bienvenida en la ruta raíz (“/”).\nEjercicio 2: Implementación de un Formulario en Flask\nExtiende la aplicación web anterior para incluir un formulario de contacto. Crea un formulario que solicite el nombre y el correo electrónico del usuario. Cuando el usuario envíe el formulario, muestra un mensaje de agradecimiento junto con los datos ingresados.\nfrom flask import Flask, render_template, request\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('index.html')\n\n@app.route('/submit', methods=['POST'])\ndef submit():\n    if request.method == 'POST':\n        name = request.form['name']\n        email = request.form['email']\n        return f'Thank you, {name}! Your email ({email}) has been received.'\n\nif __name__ == '__main__':\n    app.run()\nEn este ejercicio, hemos creado un formulario de contacto que solicita el nombre y el correo electrónico del usuario. Cuando el usuario envía el formulario, se muestra un mensaje de agradecimiento junto con los datos ingresados.\nEjercicio 3: Uso de una Plantilla HTML en una Aplicación Flask\nCrea una plantilla HTML que contenga un diseño básico para tu sitio web. Luego, utiliza Flask para renderizar esta plantilla y mostrarla en una ruta específica de tu aplicación.\nPrimero, crea una plantilla HTML llamada template.html en una carpeta llamada templates en el directorio de tu proyecto. El contenido de template.html podría ser el siguiente:\n&lt;!DOCTYPE html&gt;\n&lt;html&gt;\n&lt;head&gt;\n    &lt;title&gt;Mi Sitio Web&lt;/title&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;h1&gt;Bienvenido a mi sitio web&lt;/h1&gt;\n    &lt;p&gt;Este es un sitio web de ejemplo creado con Flask.&lt;/p&gt;\n&lt;/body&gt;\n&lt;/html&gt;\nLuego, modifica tu aplicación Flask para renderizar esta plantilla:\nfrom flask import Flask, render_template\n\napp = Flask(__name__)\n\n@app.route('/')\ndef index():\n    return render_template('template.html')\n\nif __name__ == '__main__':\n    app.run()\nEste código renderizará la plantilla HTML en la ruta raíz (“/”) de tu aplicación.\nPuedes personalizar estas soluciones según tus necesidades y preferencias de diseño. Además, asegúrate de tener la estructura de carpetas adecuada con la carpeta templates para almacenar tus plantillas HTML.\n\n\n\n\n\n\nTip\n\n\n\nActividad Práctica: Construcción de un Blog Simple en Flask.\nEn esta actividad práctica, construirás un blog básico utilizando Flask. El blog deberá permitir a los usuarios ver publicaciones, agregar nuevas publicaciones y editar publicaciones existentes. Aplicarás los conceptos aprendidos en esta unidad para desarrollar la aplicación.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#conclusiones",
    "href": "unidades/unidad10/unidad10.4.html#conclusiones",
    "title": "Introducción a Flask Framework",
    "section": "Conclusiones",
    "text": "Conclusiones\nHemos explorado Flask, un microframework web de Python que destaca por su simplicidad y flexibilidad. Flask proporciona una base sólida para desarrollar aplicaciones web desde cero y permite a los desarrolladores tomar decisiones sobre las herramientas y extensiones que desean utilizar. Algunas ventajas clave de Flask son su facilidad de aprendizaje, su comunidad activa y su capacidad para adaptarse a una variedad de proyectos.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad10/unidad10.4.html#recomendaciones-para-trabajar-con-flask",
    "href": "unidades/unidad10/unidad10.4.html#recomendaciones-para-trabajar-con-flask",
    "title": "Introducción a Flask Framework",
    "section": "Recomendaciones para Trabajar con Flask",
    "text": "Recomendaciones para Trabajar con Flask\nAprender Jinja2: Flask se combina frecuentemente con Jinja2, un motor de plantillas. Dominar Jinja2 te permitirá crear páginas web dinámicas y flexibles.\nExplorar Extensiones: Flask tiene una amplia gama de extensiones disponibles. Investiga las extensiones que pueden simplificar tareas comunes, como el manejo de bases de datos, la autenticación de usuarios y la validación de formularios.\nEstructura del Proyecto: A medida que tus proyectos con Flask crezcan, considera organizar tu código siguiendo una estructura de proyecto adecuada. Puedes separar las rutas, las vistas y las plantillas en directorios diferentes para mantener tu código limpio y organizado.\nDocumentación y Comunidad: Flask cuenta con una documentación detallada y una comunidad activa. Aprovecha estos recursos para aprender más y obtener ayuda cuando la necesites.",
    "crumbs": [
      "Unidad 10: Operaciones Básicas en Bases de Datos",
      "<span class='chapter-number'>46</span>  <span class='chapter-title'>Introducción a Flask Framework</span>"
    ]
  },
  {
    "objectID": "unidades/unidad11/unidad11.1.html#qué-se-necesita-conocer",
    "href": "unidades/unidad11/unidad11.1.html#qué-se-necesita-conocer",
    "title": "Explicación del Proyecto",
    "section": "Qué se necesita conocer:",
    "text": "Qué se necesita conocer:\n\nConocimientos básicos de Python.\nFamiliaridad con Django y Django Rest Framework.\nEntorno de desarrollo configurado con Django y Django Rest Framework.",
    "crumbs": [
      "Unidad 11: ¿Cómo me amplío con Python?",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Explicación del Proyecto</span>"
    ]
  },
  {
    "objectID": "unidades/unidad11/unidad11.1.html#estructura-del-proyecto",
    "href": "unidades/unidad11/unidad11.1.html#estructura-del-proyecto",
    "title": "Explicación del Proyecto",
    "section": "Estructura del Proyecto:",
    "text": "Estructura del Proyecto:\nproyecto_api_tareas/\n├── api_tareas/\n│   ├── migrations/\n│   ├── templates/\n│   ├── __init__.py\n│   ├── admin.py\n│   ├── apps.py\n│   ├── models.py\n│   ├── serializers.py\n│   ├── tests.py\n│   └── views.py\n├── proyecto_api_tareas/\n│   ├── __init__.py\n│   ├── asgi.py\n│   ├── settings.py\n│   ├── urls.py\n│   └── wsgi.py\n├── db.sqlite3\n└── manage.py",
    "crumbs": [
      "Unidad 11: ¿Cómo me amplío con Python?",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Explicación del Proyecto</span>"
    ]
  },
  {
    "objectID": "unidades/unidad11/unidad11.1.html#código",
    "href": "unidades/unidad11/unidad11.1.html#código",
    "title": "Explicación del Proyecto",
    "section": "Código:",
    "text": "Código:\n#models.py:\nfrom django.db import models\n\nclass Tarea(models.Model):\n    titulo = models.CharField(max_length=100)\n    descripcion = models.TextField()\n    fecha_creacion = models.DateTimeField(auto_now_add=True)\n    completada = models.BooleanField(default=False)\n\n    def __str__(self):\n        return self.titulo\n#serializers.py:\n\nfrom rest_framework import serializers\nfrom .models import Tarea\n\nclass TareaSerializer(serializers.ModelSerializer):\n    class Meta:\n        model = Tarea\n        fields = '__all__'\n#views.py:\nfrom rest_framework import viewsets\nfrom .models import Tarea\nfrom .serializers import TareaSerializer\n\nclass TareaViewSet(viewsets.ModelViewSet):\n    queryset = Tarea.objects.all()\n    serializer_class = TareaSerializer\n\n    urls.py (api_tareas):\nfrom rest_framework.routers import DefaultRouter\nfrom .views import TareaViewSet\n\nrouter = DefaultRouter()\nrouter.register(r'tareas', TareaViewSet)\n\nurlpatterns = router.urls\nA continuación en el archivo settings.py agregar ‘rest_framework’ y ‘api_tareas’ en INSTALLED_APPS.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nConfigura un proyecto Django y una aplicación llamada ‘api_tareas’.\nDefine el modelo Tarea en models.py con los campos necesarios.\nCrea un serializador en serializers.py para el modelo Tarea.\nImplementa las vistas en views.py utilizando Django Rest Framework.\nConfigura las URLs en urls.py para las vistas de la API.\nMigrar y ejecutar el servidor para probar la API utilizando el navegador o herramientas como Postman.",
    "crumbs": [
      "Unidad 11: ¿Cómo me amplío con Python?",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Explicación del Proyecto</span>"
    ]
  },
  {
    "objectID": "unidades/unidad11/unidad11.1.html#explicación-de-la-actividad",
    "href": "unidades/unidad11/unidad11.1.html#explicación-de-la-actividad",
    "title": "Explicación del Proyecto",
    "section": "Explicación de la Actividad:",
    "text": "Explicación de la Actividad:\nEste proyecto permite a los participantes aplicar los conocimientos adquiridos en Django y Django Rest Framework para crear una API de gestión de tareas. Aprenden cómo definir modelos, serializadores, vistas y URLs en Django Rest Framework para construir una API completa. Les ayuda a comprender cómo desarrollar aplicaciones web con APIs utilizando tecnologías modernas.",
    "crumbs": [
      "Unidad 11: ¿Cómo me amplío con Python?",
      "<span class='chapter-number'>47</span>  <span class='chapter-title'>Explicación del Proyecto</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio1.html",
    "href": "unidades/ejercicios/ejercicio1.html",
    "title": "Ejercicio 1:",
    "section": "",
    "text": "¿Cómo se define una variable en Python?\n\n\nRespuesta:\n\nSe define una variable en Python asignándole un nombre y un valor. Por ejemplo:\nnombre = \"Juan\"",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>48</span>  <span class='chapter-title'>Ejercicio 1:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio2.html",
    "href": "unidades/ejercicios/ejercicio2.html",
    "title": "Ejercicio 2:",
    "section": "",
    "text": "¿Cuál es el resultado de la siguiente expresión?\nx = 10\ny = 5\nresultado = x + y\nprint(resultado)\n\n\nRespuesta:\n\nEl resultado de la expresión es 15, ya que se suman los valores de las variables x (10) y y (5).",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>49</span>  <span class='chapter-title'>Ejercicio 2:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio3.html",
    "href": "unidades/ejercicios/ejercicio3.html",
    "title": "Ejercicio 3:",
    "section": "",
    "text": "¿Qué hace el siguiente fragmento de código?\nfrutas = [\"manzana\", \"banana\", \"naranja\"]\nfor fruta in frutas:\n    print(fruta)\n\n\nRespuesta:\n\nEl código recorre la lista frutas e imprime cada elemento en una línea separada:\nmanzana\nbanana\nnaranja",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>50</span>  <span class='chapter-title'>Ejercicio 3:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio4.html",
    "href": "unidades/ejercicios/ejercicio4.html",
    "title": "Ejercicio 4:",
    "section": "",
    "text": "¿Cuál es el valor de la variable resultado después de ejecutar el siguiente código?\nnumero = 7\nresultado = numero * 2\nresultado = resultado + 3\n\n\nRespuesta:\n\nEl valor de la variable resultado es 17, ya que se multiplica numero por 2 (14) y luego se le suma 3.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>51</span>  <span class='chapter-title'>Ejercicio 4:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio5.html",
    "href": "unidades/ejercicios/ejercicio5.html",
    "title": "Ejercicio 5:",
    "section": "",
    "text": "¿Qué tipo de dato es el resultado de la siguiente expresión?\nresultado = 10 / 2\n\n\nRespuesta:\n\nEl resultado es de tipo float (número de punto flotante), ya que la división produce un valor decimal.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>52</span>  <span class='chapter-title'>Ejercicio 5:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio6.html",
    "href": "unidades/ejercicios/ejercicio6.html",
    "title": "Ejercicio 6:",
    "section": "",
    "text": "¿Cómo se define una función en Python?\n\n\nRespuesta:\n\nUna función en Python se define utilizando la palabra clave def, seguida del nombre de la función y los parámetros entre paréntesis. Por ejemplo:\ndef saludar(nombre):\n    print(\"Hola,\", nombre)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>53</span>  <span class='chapter-title'>Ejercicio 6:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio7.html",
    "href": "unidades/ejercicios/ejercicio7.html",
    "title": "Ejercicio 7:",
    "section": "",
    "text": "¿Cuál es la salida de este código?\nnumero = 5\nif numero &gt; 0:\n    print(\"El número es positivo\")\nelse:\n    print(\"El número no es positivo\")\n\n\nRespuesta:\n\nLa salida es:\nEl número es positivo\nya que el valor de numero (5) es mayor que 0.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>54</span>  <span class='chapter-title'>Ejercicio 7:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio8.html",
    "href": "unidades/ejercicios/ejercicio8.html",
    "title": "Ejercicio 8:",
    "section": "",
    "text": "¿Qué hace el siguiente código?\nfor i in range(3):\n    print(i)\n\n\nRespuesta:\n\nEl código imprime los números del 0 al 2 en líneas separadas:\n0\n1\n2",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>55</span>  <span class='chapter-title'>Ejercicio 8:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio9.html",
    "href": "unidades/ejercicios/ejercicio9.html",
    "title": "Ejercicio 9:",
    "section": "",
    "text": "¿Cuál es el valor de la variable longitud después de ejecutar este código?\nfrase = \"Hola, mundo\"\nlongitud = len(frase)\n\n\nRespuesta:\n\nEl valor de la variable longitud será 11, ya que la función len() retorna la cantidad de caracteres en la cadena.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>56</span>  <span class='chapter-title'>Ejercicio 9:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio10.html",
    "href": "unidades/ejercicios/ejercicio10.html",
    "title": "Ejercicio 10:",
    "section": "",
    "text": "¿Cuál es la sintaxis correcta para importar la biblioteca math en Python?\n\n\nRespuesta:\n\nLa sintaxis correcta es:\nimport math",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>57</span>  <span class='chapter-title'>Ejercicio 10:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio11.html",
    "href": "unidades/ejercicios/ejercicio11.html",
    "title": "Ejercicio 11:",
    "section": "",
    "text": "¿Qué método se utiliza para agregar un elemento al final de una lista?\n\n\nRespuesta:\n\nEl método utilizado para agregar un elemento al final de una lista es append(). Por ejemplo:\nmi_lista = [1, 2, 3]\nmi_lista.append(4)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>58</span>  <span class='chapter-title'>Ejercicio 11:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio12.html",
    "href": "unidades/ejercicios/ejercicio12.html",
    "title": "Ejercicio 12:",
    "section": "",
    "text": "¿Cuál es el resultado de la siguiente expresión?\nresultado = 2 ** 3\n\n\nRespuesta:\n\nEl resultado de la expresión es 8, ya que 2 ** 3 representa la potencia de 2 elevado a la 3, que es 8.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>59</span>  <span class='chapter-title'>Ejercicio 12:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio13.html",
    "href": "unidades/ejercicios/ejercicio13.html",
    "title": "Ejercicio 13:",
    "section": "",
    "text": "¿Qué función se utiliza para convertir un valor a tipo int en Python?\n\n\nRespuesta:\n\nLa función utilizada para convertir un valor a tipo int es int(). Por ejemplo:\nnumero = int(\"10\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>60</span>  <span class='chapter-title'>Ejercicio 13:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio14.html",
    "href": "unidades/ejercicios/ejercicio14.html",
    "title": "Ejercicio 14:",
    "section": "",
    "text": "¿Qué método se utiliza para unir elementos de una lista en una cadena?\n\n\nRespuesta:\n\nEl método utilizado para unir elementos de una lista en una cadena es join(). Por ejemplo:\nelementos = [\"a\", \"b\", \"c\"]\ncadena = \"-\".join(elementos)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>61</span>  <span class='chapter-title'>Ejercicio 14:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio15.html",
    "href": "unidades/ejercicios/ejercicio15.html",
    "title": "Ejercicio 15:",
    "section": "",
    "text": "¿Cuál es la salida de este código?\nfor i in range(1, 6):\n    if i == 3:\n        continue\n    print(i)\n\n\nRespuesta:\n\nLa salida es:\n1\n2\n4\n5\nya que el valor 3 es omitido debido al uso de continue.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>62</span>  <span class='chapter-title'>Ejercicio 15:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio16.html",
    "href": "unidades/ejercicios/ejercicio16.html",
    "title": "Ejercicio 16:",
    "section": "",
    "text": "¿Qué método se utiliza para eliminar un elemento específico de una lista?\n\n\nRespuesta:\n\nEl método utilizado para eliminar un elemento específico de una lista es remove(). Por ejemplo:\nmi_lista = [1, 2, 3]\nmi_lista.remove(2)",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>63</span>  <span class='chapter-title'>Ejercicio 16:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio17.html",
    "href": "unidades/ejercicios/ejercicio17.html",
    "title": "Ejercicio 17:",
    "section": "",
    "text": "¿Cómo se define una clase en Python?\n\n\nRespuesta:\n\nUna clase en Python se define utilizando la palabra clave class, seguida del nombre de la clase y los métodos y atributos definidos dentro de la clase. Por ejemplo:\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>64</span>  <span class='chapter-title'>Ejercicio 17:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio18.html",
    "href": "unidades/ejercicios/ejercicio18.html",
    "title": "Ejercicio 18:",
    "section": "",
    "text": "¿Cuál es el resultado de la siguiente expresión?\nx = \"Hola\"\ny = \"Mundo\"\nresultado = x + \" \" + y\n\n\nRespuesta:\n\nEl resultado de la expresión es la cadena “Hola Mundo”, ya que se concatenan las cadenas x y y junto con un espacio.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>65</span>  <span class='chapter-title'>Ejercicio 18:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio19.html",
    "href": "unidades/ejercicios/ejercicio19.html",
    "title": "Ejercicio 19:",
    "section": "",
    "text": "¿Cómo se crea una nueva base de datos en PostgreSQL utilizando SQL?\n\n\nRespuesta:\n\nPara crear una nueva base de datos en PostgreSQL utilizando SQL, se utiliza la siguiente consulta:\nCREATE DATABASE nombre_basededatos;",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>66</span>  <span class='chapter-title'>Ejercicio 19:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejercicio20.html",
    "href": "unidades/ejercicios/ejercicio20.html",
    "title": "Ejercicio 20:",
    "section": "",
    "text": "¿Cuál es la forma correcta de realizar una consulta a una colección en MongoDB?\n\n\nRespuesta:\n\nLa forma correcta de realizar una consulta a una colección en MongoDB es utilizando el método find(). Por ejemplo:\nresultados = db.coleccion.find({\"campo\": valor})",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>67</span>  <span class='chapter-title'>Ejercicio 20:</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-ii-instalación-de-python-y-más-herramientas",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-ii-instalación-de-python-y-más-herramientas",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD II: Instalación de Python y más herramientas",
    "text": "UNIDAD II: Instalación de Python y más herramientas\nEjercicio 6: ¿Cuál es la forma de verificar la versión de Python instalada en tu sistema?\n\n\nRespuesta:\n\nEjecutando el comando python --version en la línea de comandos.\n\nEjercicio 7: ¿Cuál es el propósito de Git en el desarrollo de software?\n\n\nRespuesta:\n\nGit es un sistema de control de versiones que permite rastrear cambios en el código, colaborar con otros desarrolladores y mantener un historial completo de modificaciones en un proyecto.\n\nEjercicio 8: ¿Cómo se instala una extensión (extensión) en Visual Studio Code?\n\n\nRespuesta:\n\nEn Visual Studio Code, puedes instalar extensiones desde la barra lateral izquierda, haciendo clic en el ícono de extensiones (cuatro cuadros) y buscando la extensión que deseas instalar.\n\nEjercicio 9: ¿Cuál es el resultado del siguiente código?\nprint(\"Hola, \" + \"mundo\")\n\n\nRespuesta:\n\nEl resultado es la cadena “Hola, mundo” al concatenar las dos cadenas.\n\nEjercicio 10: ¿Cuál es el propósito de un entorno virtual en Python?\n\n\nRespuesta:\n\nUn entorno virtual en Python permite aislar y gestionar las dependencias y paquetes utilizados en un proyecto específico, evitando conflictos con otros proyectos y asegurando un entorno limpio y controlado.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-iii-introducción-a-python",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-iii-introducción-a-python",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD III: Introducción a Python",
    "text": "UNIDAD III: Introducción a Python\nEjercicio 11: ¿Cuál es la diferencia entre una variable y una constante en programación?\n\n\nRespuesta:\n\nUna variable puede cambiar su valor a lo largo del programa, mientras que una constante mantiene su valor constante durante la ejecución.\n\nEjercicio 12: Escribe un programa que solicite al usuario su nombre y luego imprima un mensaje de bienvenida con el nombre ingresado.\n\n\nRespuesta:\n\nnombre = input(\"Ingresa tu nombre: \")\nprint(\"¡Bienvenido,\", nombre, \"!\")\n\nEjercicio 13: ¿Cuál es el valor de la variable resultado después de ejecutar el siguiente código?\nx = 5\ny = 2\nresultado = x // y\n\n\nRespuesta:\n\nEl valor de la variable resultado será 2, ya que // realiza la división entera de 5 entre 2.\n\nEjercicio 14: Escribe un programa en Python que determine si un número ingresado por el usuario es par o impar.\n\n\nRespuesta:\n\nnumero = int(input(\"Ingresa un número: \"))\nif numero % 2 == 0:\n    print(\"El número es par.\")\nelse:\n    print(\"El número es impar.\")\n\nEjercicio 15: ¿Cuál es la función del operador not en Python?\n\n\nRespuesta:\n\nEl operador not se utiliza para negar una expresión booleana. Si la expresión es verdadera, not la convierte en falsa, y viceversa.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-iv-tipos-de-datos",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-iv-tipos-de-datos",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD IV: Tipos de Datos",
    "text": "UNIDAD IV: Tipos de Datos\nEjercicio 16: ¿Cuál es la diferencia entre una lista y una tupla en Python?\n\n\nRespuesta:\n\nLa principal diferencia es que las listas son mutables (pueden cambiar) y las tuplas son inmutables (no pueden cambiar). En otras palabras, puedes agregar, eliminar y modificar elementos en una lista, pero no en una tupla.\n\nEjercicio 17: Escribe un programa que ordene una lista de números en orden ascendente.\n\n\nRespuesta:\n\nnumeros = [4, 1, 6, 3, 2]\nnumeros.sort()\nprint(numeros)\n\nEjercicio 18: ¿Cómo se accede al tercer elemento de una lista en Python?\n\n\nRespuesta:\n\nUtilizando el índice 2. Por ejemplo, si la lista se llama mi_lista, puedes acceder al tercer elemento con mi_lista[2].\n\nEjercicio 19: ¿Qué método se utiliza para agregar un elemento al final de una lista?\n\n\nRespuesta:\n\nEl método utilizado es append(). Por ejemplo, mi_lista.append(7) agrega el número 7 al final de la lista.\n\nEjercicio 20: Escribe un programa que cuente cuántas veces aparece un elemento específico en una lista.\n\n\nRespuesta:\n\nmi_lista = [2, 4, 6, 4, 8, 4, 10]\nelemento = 4\ncontador = mi_lista.count(elemento)\nprint(\"El elemento\", elemento, \"aparece\", contador, \"veces.\")",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-v-control-de-flujo",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-v-control-de-flujo",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD V: Control de Flujo",
    "text": "UNIDAD V: Control de Flujo\nEjercicio 21: Escribe un programa que determine si un número ingresado por el usuario es positivo, negativo o cero.\n\n\nRespuesta:\n\nnumero = int(input(\"Ingresa un número: \"))\nif numero &gt; 0:\n    print(\"El número es positivo.\")\nelif numero &lt; 0:\n    print(\"El número es negativo.\")\nelse:\n    print(\"El número es cero.\")\n\nEjercicio 22: ¿Qué hace el siguiente código?\ncontador = 0\nwhile contador &lt; 5:\n    print(contador)\n    contador += 1\n\n\nRespuesta:\n\nEl código imprime los números del 0 al 4 en líneas separadas utilizando un bucle while.\n\nEjercicio 23: ¿Cuál es el resultado de la siguiente expresión?\nresultado = 0\nfor i in range(1, 6):\n    resultado += i\nprint(resultado)\n\n\nRespuesta:\n\nEl resultado es 15, ya que se suma los números del 1 al 5 en el bucle for.\n\nEjercicio 24: Escribe un programa que calcule la suma de todos los números pares entre 1 y 100.\n\n\nRespuesta:\n\nsuma = 0\nfor i in range(2, 101, 2):\n    suma += i\nprint(\"La suma de los números pares entre 1 y 100 es:\", suma)\n\nEjercicio 25: ¿Cuál es el propósito de la instrucción break en un bucle?\n\n\nRespuesta:\n\nLa instrucción break se utiliza para salir inmediatamente de un bucle, interrumpiendo su ejecución antes de que termine naturalmente.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-vi-funciones",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-vi-funciones",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD VI: Funciones",
    "text": "UNIDAD VI: Funciones\nEjercicio 26: ¿Qué es una función en programación?\n\n\nRespuesta:\n\nUna función es un bloque de código reutilizable que realiza una tarea específica. Puede recibir argumentos, ejecutar instrucciones y devolver un valor.\n\nEjercicio 27: Escribe una función en Python que calcule el área de un círculo.\n\n\nRespuesta:\n\nimport math\n\ndef area_circulo(radio):\nreturn math.pi * radio ** 2\n\nEjercicio 28: ¿Qué es la recursividad en programación?\n\n\nRespuesta:\n\nLa recursividad es una técnica donde una función se llama a sí misma para resolver un problema. Es útil para resolver problemas que se pueden descomponer en subproblemas similares.\n\nEjercicio 29: Escribe una función recursiva en Python para calcular el factorial de un número.\n\n\nRespuesta:\n\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nEjercicio 30: ¿Por qué es importante utilizar funciones en la programación?\n\n\nRespuesta:\n\nLas funciones permiten dividir el código en bloques más pequeños y manejables, lo que facilita la reutilización, la depuración y la comprensión del código. Además, promueven la modularidad y el diseño limpio.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-vii-objetos-clases-y-herencia",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-vii-objetos-clases-y-herencia",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD VII: Objetos, clases y herencia",
    "text": "UNIDAD VII: Objetos, clases y herencia\nEjercicio 31: ¿Qué es una clase en programación orientada a objetos?\n\n\nRespuesta:\n\nUna clase es un plano o plantilla para crear objetos en programación orientada a objetos. Define las propiedades (atributos) y comportamientos (métodos) que tendrán los objetos creados a partir de ella.\n\nEjercicio 32: Escribe una clase en Python llamada Persona con los atributos nombre y edad, y un método saludar() que imprima un saludo con el nombre de la persona.\n\n\nRespuesta:\n\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\ndef saludar(self):\n    print(\"¡Hola, soy\", self.nombre, \"y tengo\", self.edad, \"años!\")\n\nEjercicio 33: ¿Qué es la herencia en programación orientada a objetos?\n\n\nRespuesta:\n\nLa herencia es un concepto en el que una clase (subclase) puede heredar atributos y métodos de otra clase (superclase). Permite reutilizar y extender el código de una clase existente para crear una nueva clase.\n\nEjercicio 34: Escribe una clase en Python llamada Estudiante que herede de la clase Persona y tenga un atributo adicional curso.\n\n\nRespuesta:\n\nclass Estudiante(Persona):\n    def __init__(self, nombre, edad, curso):\n        super().__init__(nombre, edad)\n        self.curso = curso\n\nEjercicio 35: ¿Por qué es beneficioso utilizar la herencia en programación?\n\n\nRespuesta:\n\nLa herencia permite reutilizar código, promover la coherencia y facilitar la actualización y mantenimiento. También permite crear jerarquías de clases para modelar relaciones entre objetos del mundo real.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-viii-módulos",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-viii-módulos",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD VIII: Módulos",
    "text": "UNIDAD VIII: Módulos\nEjercicio 36: ¿Qué es un módulo en Python?\n\n\nRespuesta:\n\nUn módulo en Python es un archivo que contiene definiciones y declaraciones de variables, funciones y clases. Permite organizar y reutilizar el código en diferentes programas.\n\nEjercicio 37: Escribe un módulo en Python llamado operaciones que contenga una función suma para sumar dos números.\n\n\nRespuesta:\n\nArchivo operaciones.py:\ndef suma(a, b):\n    return a + b\n\nEjercicio 38: ¿Cómo se importa un módulo en Python?\n\n\nRespuesta:\n\nSe importa utilizando la palabra clave import, seguida del nombre del módulo. Por ejemplo, import operaciones importaría el módulo operaciones.\n\nEjercicio 39: Escribe un programa que utilice la función suma del módulo operaciones para sumar dos números ingresados por el usuario.\n\n\nRespuesta:\n\nimport operaciones\n\nnum1 = float(input(\"Ingresa el primer número: \"))\nnum2 = float(input(\"Ingresa el segundo número: \"))\nresultado = operaciones.suma(num1, num2)\nprint(\"La suma es:\", resultado)\n\nEjercicio 40: ¿Cuál es la ventaja de utilizar módulos en Python?\n\n\nRespuesta:\n\nLos módulos permiten la modularidad, la reutilización de código y la organización efectiva del código en componentes separados. También facilitan la colaboración y la mantenibilidad.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-ix-introducción-a-bases-de-datos",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-ix-introducción-a-bases-de-datos",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD IX: Introducción a Bases de Datos",
    "text": "UNIDAD IX: Introducción a Bases de Datos\nEjercicio 41: ¿Qué es una base de datos en el contexto de la programación?\n\n\nRespuesta:\n\nUna base de datos es un sistema organizado para almacenar, administrar y recuperar información de manera eficiente. Se utiliza para almacenar datos estructurados de manera persistente.\n\nEjercicio 42: ¿Qué es PostgreSQL?\n\n\nRespuesta:\n\nPostgreSQL es un sistema de gestión de bases de datos relacional de código abierto y potente. Es conocido por su capacidad de manejar cargas de trabajo complejas y por sus características avanzadas.\n\nEjercicio 43: ¿Qué es MongoDB?\n\n\nRespuesta:\n\nMongoDB es una base de datos NoSQL orientada a documentos. Almacena los datos en documentos JSON flexibles en lugar de en tablas tradicionales, lo que permite una gran flexibilidad y escalabilidad.\n\nEjercicio 44: ¿Cuál es la ventaja de utilizar bases de datos en programas?\n\n\nRespuesta:\n\nLas bases de datos permiten almacenar y administrar grandes cantidades de datos de manera estructurada y eficiente. Esto facilita el acceso y la manipulación de datos en aplicaciones.\n\nEjercicio 45: ¿Cuál es el propósito de una clave primaria en una base de datos?\n\n\nRespuesta:\n\nUna clave primaria es un campo único en una tabla que se utiliza para identificar de manera única cada registro en la tabla. Se utiliza como referencia para relacionar tablas y mantener la integridad de los datos.\n\nUNIDAD X: MySQL, PostgreSQL y MongoDB: Operaciones básicas en bases de datos\nEjercicio 46: ¿Cómo se realiza una consulta básica a una tabla en SQL?\n\n\nRespuesta:\n\nUtilizando la sentencia SELECT. Por ejemplo, SELECT * FROM tabla recuperará todos los registros de la tabla.\n\nEjercicio 47: ¿Qué comando se utiliza para insertar un nuevo registro en una tabla en SQL?\n\n\nRespuesta:\n\nEl comando utilizado es INSERT INTO. Por ejemplo, INSERT INTO tabla (columna1, columna2) VALUES (valor1, valor2) insertará un nuevo registro en la tabla.\n\nEjercicio 48: ¿Cómo se actualiza un registro en una tabla en SQL?\n\n\nRespuesta:\n\nUtilizando el comando UPDATE. Por ejemplo, UPDATE tabla SET columna = valor WHERE condicion actualizará los registros que cumplan con la condición.\n\nEjercicio 49: ¿Cuál es el propósito de la sentencia DELETE en SQL?\n\n\nRespuesta:\n\nLa sentencia DELETE se utiliza para eliminar uno o varios registros de una tabla. Por ejemplo, DELETE FROM tabla WHERE condicion eliminará los registros que cumplan con la condición.\n\nEjercicio 50: ¿Cuál es la ventaja de utilizar bases de datos NoSQL como MongoDB?\n\n\nRespuesta:\n\nLas bases de datos NoSQL, como MongoDB, son flexibles y escalables, lo que las hace ideales para manejar grandes cantidades de datos no estructurados o semiestructurados. Son adecuadas para aplicaciones web y móviles modernas.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "unidades/ejercicios/ejerciciosUnidades.html#unidad-xi-cómo-me-amplío-con-python",
    "href": "unidades/ejercicios/ejerciciosUnidades.html#unidad-xi-cómo-me-amplío-con-python",
    "title": "UNIDAD I: Introducción a la programación",
    "section": "UNIDAD XI: ¿Cómo me amplío con Python?",
    "text": "UNIDAD XI: ¿Cómo me amplío con Python?\nEjercicio 51: ¿Qué es la ciencia de datos y cómo se relaciona con Python?\n\n\nRespuesta:\n\nLa ciencia de datos es el proceso de extracción, transformación y análisis de datos para obtener conocimientos y tomar decisiones informadas. Python es ampliamente utilizado en la ciencia de datos debido a su amplio ecosistema de bibliotecas y herramientas.\n\nEjercicio 52: ¿Qué es Django Framework y para qué se utiliza?\n\n\nRespuesta:\n\nDjango es un framework web de alto nivel en Python que facilita la creación de aplicaciones web robustas y escalables. Se utiliza para construir sitios web y aplicaciones con características como autenticación, seguridad y manejo de bases de datos.\n\nEjercicio 53: ¿Qué es FastAPI y cómo se diferencia de otros frameworks?\n\n\nRespuesta:\n\nFastAPI es un framework web moderno y de alto rendimiento para construir APIs en Python. Se destaca por su velocidad, facilidad de uso y generación automática de documentación interactiva. Utiliza anotaciones de tipo para validar datos y reducir errores.\n\nEjercicio 54: ¿Cuál es el propósito de las APIs en el desarrollo web?\n\n\nRespuesta:\n\nLas APIs (Interfaces de Programación de Aplicaciones) se utilizan para permitir la comunicación y la integración entre diferentes aplicaciones y sistemas. Facilitan el intercambio de datos y funcionalidades entre aplicaciones.\n\nEjercicio 55: ¿Por qué es importante ampliarse en Python más allá de los conceptos básicos?\n\n\nRespuesta:\n\nAmpliarse en Python permite abordar proyectos más complejos y desafiantes, como desarrollo web, análisis de datos, automatización, inteligencia artificial y más. Además, mejora las habilidades y la versatilidad como programador.",
    "crumbs": [
      "Ejercicios",
      "<span class='chapter-number'>68</span>  <span class='chapter-title'>UNIDAD I: Introducción a la programación</span>"
    ]
  },
  {
    "objectID": "about.html#nuestro-objetivo",
    "href": "about.html#nuestro-objetivo",
    "title": "Acerca de Nosotros",
    "section": "Nuestro Objetivo",
    "text": "Nuestro Objetivo\nNuestro objetivo es proporcionarte los conocimientos y las habilidades necesarias para comenzar a programar utilizando Python. Queremos que te sientas cómodo con los conceptos básicos y que estés preparado para abordar proyectos más desafiantes en el futuro."
  },
  {
    "objectID": "about.html#nuestro-equipo",
    "href": "about.html#nuestro-equipo",
    "title": "Acerca de Nosotros",
    "section": "Nuestro Equipo",
    "text": "Nuestro Equipo\nNuestro equipo está formado por apasionados desarrolladores y educadores que tienen una amplia experiencia en el mundo de la programación. Estamos aquí para ayudarte en cada paso del camino y responder a tus preguntas."
  },
  {
    "objectID": "about.html#contacto",
    "href": "about.html#contacto",
    "title": "Acerca de Nosotros",
    "section": "Contacto",
    "text": "Contacto\nSi tienes preguntas, comentarios o sugerencias, no dudes en ponerte en contacto con nosotros a través de nuestro correo electrónico o redes sociales.\n¡Esperamos que disfrutes aprendiendo con nosotros!"
  },
  {
    "objectID": "license.html#uso-permitido",
    "href": "license.html#uso-permitido",
    "title": "Licencia",
    "section": "Uso Permitido",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  }
]