# Control de Flujo

## Introducción a If

### Contenido:

El control de flujo es fundamental en la programación para tomar decisiones basadas en condiciones. Aprenderemos cómo utilizar la estructura if para ejecutar diferentes bloques de código según una condición.

## Conceptos Clave:

### Control de Flujo

Manejo de la ejecución del código basado en condiciones.

### Estructura if

Permite ejecutar un bloque de código si una condición es verdadera.

### Bloque de Código

Conjunto de instrucciones que se ejecutan si la condición es verdadera.

## Ejemplo:

``` python
edad = 18

if edad >= 18:
    print("Eres mayor de edad.")
```

## Explicación:

En este ejemplo, se utiliza la estructura if para verificar si la variable "edad" es mayor o igual a 18.

Si la condición es verdadera, se ejecuta el bloque de código que muestra un mensaje.

::: {.callout-important}

### Actividad Práctica:

Crea una variable que represente tu puntuación en un juego.

Utiliza una estructura if para mostrar un mensaje diferente según si tu puntuación es mayor o igual a 100.
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar la utilización de la estructura if para tomar decisiones basadas en condiciones. Les ayuda a comprender cómo ejecutar diferentes bloques de código según la situación y cómo utilizar el control de flujo en sus programas.

## If y Condicionales

### Contenido:

En esta lección, aprenderemos cómo trabajar con múltiples condiciones utilizando la estructura if, elif y else. Esto permite ejecutar diferentes bloques de código según diferentes condiciones.

## Conceptos Clave

### Estructura elif 

Permite verificar una condición adicional si la condición anterior es falsa.

### Estructura else 

Define un bloque de código que se ejecuta si todas las condiciones anteriores son falsas.

### Anidación de Estructuras if

Es posible anidar múltiples estructuras if para manejar situaciones más complejas.

## Ejemplo:

```python
puntaje = 85

if puntaje >= 90:
    print("¡Excelente trabajo!")
elif puntaje >= 70:
    print("Buen trabajo.")
else:
    print("Necesitas mejorar.")
```

## Explicación:

En este ejemplo, se utiliza la estructura if, elif y else para evaluar diferentes rangos de puntajes y mostrar mensajes correspondientes.

::: {.callout-important}
### Actividad Práctica:

Crea una variable que represente tu calificación en un examen.

Utiliza una estructura if, elif y else para mostrar mensajes diferentes según la calificación obtenida.
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar el uso de la estructura if, elif y else para manejar múltiples condiciones y decisiones en sus programas. Les ayuda a comprender cómo ejecutar diferentes bloques de código en función de los resultados de las pruebas.

## If, elif y else

### Contenido:

En esta lección, continuaremos trabajando con la estructura if, elif y else, pero esta vez exploraremos cómo anidar estas estructuras para manejar situaciones más complejas.

## Conceptos Clave:

### Anidación de Estructuras

Posibilidad de colocar una estructura if, elif y else dentro de otra.

### Jerarquía de Condiciones

Se evalúan las condiciones de manera secuencial y se ejecuta el primer bloque de código correspondiente a una condición verdadera.

## Ejemplo

``` python
edad = 16
permiso_padres = True

if edad >= 18:
    print("Eres mayor de edad.")
else:
    if permiso_padres:
        print("Eres menor de edad pero tienes permiso de tus padres.")
    else:
        print("Eres menor de edad y no tienes permiso de tus padres.")
```
## Explicación:

En este ejemplo, se anidan estructuras if para manejar diferentes casos basados en la edad y el permiso de los padres.

::: {.callout-important}
### Actividad Práctica:

Crea una variable que represente si un usuario está registrado en un sitio web.

Si el usuario está registrado, muestra un mensaje de bienvenida. Si no está registrado, muestra un mensaje que lo invite a registrarse.
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar la anidación de estructuras if, elif y else para manejar situaciones con múltiples condiciones. Les ayuda a comprender cómo trabajar con jerarquías de condiciones y cómo manejar casos más complejos en sus programas.

## And y Or

### Contenido:
En esta lección, exploraremos los operadores lógicos and y or, que permiten combinar condiciones para crear expresiones más complejas en las estructuras if, elif y else.

## Conceptos Clave:

### Operador and 

Retorna True si ambas condiciones son verdaderas.

### Operador or

Retorna True si al menos una de las condiciones es verdadera.

### Combinación de Condiciones

Los operadores and y or permiten combinar múltiples condiciones en una sola expresión.

## Ejemplo:

```python
edad = 20
tiene_permiso = True

if edad >= 18 and tiene_permiso:
    print("Puedes ingresar.")
else:
    print("No puedes ingresar.")
```

## Explicación:

En este ejemplo, se utiliza el operador and para evaluar si la edad es mayor o igual a 18 y si el usuario tiene permiso.

Si ambas condiciones son verdaderas, se permite el ingreso.

::: {.callout-important}
### Actividad Práctica:

Crea dos variables que representen si un usuario tiene una cuenta premium y si su suscripción está activa.

Utiliza una estructura if y el operador and para determinar si el usuario tiene acceso premium.
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar la combinación de condiciones utilizando los operadores and y or. Les ayuda a comprender cómo crear expresiones más complejas para tomar decisiones basadas en múltiples condiciones en sus programas.

## Introducción a While

### Contenido:
En esta lección, introduciremos la estructura while, que permite ejecutar un bloque de código repetidamente mientras se cumpla una condición.

## Conceptos Clave:

### Estructura while

Permite ejecutar un bloque de código mientras una condición sea verdadera.

### Condición

La condición se verifica antes de cada iteración. Si es verdadera, se ejecuta el bloque de código.

## Ejemplo:

``` python
contador = 0

while contador < 5:
    print("Contador:", contador)
    contador += 1
```

## Explicación:

En este ejemplo, se utiliza la estructura while para imprimir el valor del contador mientras sea menor que 5.

Después de cada iteración, se incrementa el contador en 1.

::: {.callout-important}
### Actividad Práctica:

Crea una variable que represente la cantidad de intentos de un usuario para ingresar una contraseña correcta.

Utiliza una estructura while para pedir al usuario que ingrese su contraseña hasta que lo haga correctamente.

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar el uso de la estructura while para crear bucles que se ejecutan repetidamente mientras se cumple una condición. Les ayuda a comprender cómo implementar lógica de repetición en sus programas.

## While loop

### Contenido:

En esta lección, profundizaremos en el uso de la estructura while para crear bucles que se ejecutan repetidamente mientras se cumpla una condición, y aprenderemos a utilizar la sentencia break para salir de un bucle.

## Conceptos Clave:

### Sentencia break: 

Se utiliza para salir de un bucle antes de que la condición sea falsa.

### Bucles Infinitos:

Si no se maneja adecuadamente, un bucle while puede ejecutarse infinitamente.

## Ejemplo:

``` python
contador = 0

while True:
    print("Contador:", contador)
    contador += 1
    if contador >= 5:
        break
```
## Explicación:

En este ejemplo, se utiliza un bucle while que se ejecuta infinitamente.

Se utiliza la sentencia break para salir del bucle cuando el contador llega a 5.

::: {.callout-important}
### Actividad Práctica:

Crea un bucle while que pida al usuario ingresar un número positivo menor que 10.

Utiliza la sentencia break para salir del bucle una vez que el usuario ingrese un número válido.
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar el uso de la sentencia break para controlar la ejecución de un bucle while y evitar bucles infinitos. Les ayuda a comprender cómo manejar situaciones en las que es necesario salir de un bucle antes de que la condición sea falsa.

## While, break y continue

### Contenido:

En esta lección, continuaremos explorando cómo trabajar con la estructura while y aprenderemos a utilizar la sentencia continue para saltar a la siguiente iteración del bucle.

## Conceptos Clave:

### Sentencia continue

Se utiliza para saltar a la siguiente iteración del bucle sin ejecutar el resto del código en esa iteración.

### Saltar Iteraciones

La sentencia continue permite omitir ciertas iteraciones basadas en una condición.

## Ejemplo

``` python
contador = 0

while contador < 5:
    contador += 1
    if contador == 3:
        continue
    print("Contador:", contador)
```

## Explicación:

En este ejemplo, se utiliza un bucle while para imprimir el valor del contador.

Se utiliza la sentencia continue para omitir la iteración cuando el contador es igual a 3.

::: {.callout-important}
### Actividad Práctica:

Crea un bucle while que imprima los números del 1 al 10, pero omite la impresión del número 5.

Utiliza la sentencia continue para lograr esto.
```

## Explicación de la Actividad

Esta actividad permite a los participantes practicar el uso de la sentencia continue para omitir iteraciones específicas en un bucle while. Les ayuda a comprender cómo controlar la ejecución de un bucle y realizar acciones selectivas en cada iteración.

## For Loop

### Contenido:

En esta lección, aprenderemos sobre el bucle for, que se utiliza para iterar sobre secuencias como listas, tuplas o cadenas de texto.

## Conceptos Clave:

### Bucle for

Se utiliza para recorrer elementos en una secuencia uno por uno.

### Iteración

En cada iteración del bucle, se ejecuta un bloque de código con un valor diferente de la secuencia.

### range() con Bucles for

Se puede utilizar la función range() para generar una secuencia de números y recorrerla con un bucle for.

## Ejemplo:

```python
frutas = ["manzana", "banana", "naranja"]

for fruta in frutas:
    print("Me gusta", fruta)
```

## Explicación:

En este ejemplo, se utiliza un bucle for para recorrer una lista de frutas.

En cada iteración, se asigna el valor actual de la lista a la variable fruta.

::: {.callout-important}
### Actividad Práctica:

Crea una lista de colores.

Utiliza un bucle for para imprimir cada color en la lista precedido por la palabra "Color:".
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar el uso del bucle for para iterar sobre elementos en una secuencia. Les ayuda a comprender cómo trabajar con bucles para recorrer listas y otros tipos de secuencias en sus programas.  