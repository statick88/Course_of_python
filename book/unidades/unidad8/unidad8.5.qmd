# Creación de un CRUD de Tareas en Django

En esta lección, aprenderemos cómo crear un CRUD (Crear, Leer, Actualizar, Eliminar) de tareas en Django, utilizando modelos, vistas y formularios.

## Conceptos Clave

### CRUD

CRUD es un acrónimo de "Crear, Leer, Actualizar, Eliminar" y se refiere a las operaciones básicas de manipulación de datos en una aplicación.

### Formularios en Django

Los formularios en Django nos permiten crear y manejar formularios HTML de manera sencilla y eficiente.

**Ejemplo**

```python

# Creación de un modelo Django llamado "Tarea"
from django.db import models

class Tarea(models.Model):
    titulo = models.CharField(max_length=200)
    descripcion = models.TextField()
    fecha_creacion = models.DateTimeField('fecha de creación')
```
```python
# Creación de un formulario en Django para crear una tarea
from django import forms

class TareaForm(forms.ModelForm):
    class Meta:
        model = Tarea
        fields = ['titulo', 'descripcion', 'fecha_creacion']
```
```python
# Creación de una vista para listar, crear y actualizar tareas
from django.shortcuts import render, get_object_or_404, redirect
from .models import Tarea
from .forms import TareaForm

def lista_tareas(request):
    tareas = Tarea.objects.all()
    return render(request, 'lista_tareas.html', {'lista_tareas': tareas})

def crear_tarea(request):
    if request.method == "POST":
        form = TareaForm(request.POST)
        if form.is_valid():
            tarea = form.save()
            return redirect('detalle_tarea', pk=tarea.pk)
    else:
        form = TareaForm()
    return render(request, 'crear_tarea.html', {'form': form})

def detalle_tarea(request, pk):
    tarea = get_object_or_404(Tarea, pk=pk)
    return render(request, 'detalle_tarea.html', {'tarea': tarea})
```
```html
# Creación de plantillas HTML para las vistas
```
### Explicación

En este ejemplo, hemos creado un modelo Tarea para representar las tareas en nuestra base de datos. Luego, creamos un formulario TareaForm utilizando formularios en Django. Además, creamos vistas para listar, crear y ver detalles de tareas. Las plantillas HTML correspondientes se utilizarán para renderizar las páginas web.

:::{.callout-tip}
### Actividad Práctica

1. Crea una vista y un formulario para actualizar tareas existentes.
2. Agrega una función para eliminar tareas.
3. Utiliza las plantillas HTML para mostrar la lista de tareas, el formulario de creación y los detalles de la tarea.

:::
<details>
<summary>Solucion</summary>

**Resumen**:

En esta actividad práctica, se creará una plantilla base llamada "base_notas.html" que contendrá un menú de navegación y un pie de página. Luego, se creará una plantilla específica llamada "lista_notas.html" que heredará de "base_notas.html" y mostrará una lista de notas utilizando Bootstrap.

**Código**:

1. Crear la Plantilla Base "base_notas.html":

En la carpeta de plantillas de tu aplicación ("articulos" en este ejemplo), crea un archivo llamado "base_notas.html" con el siguiente contenido:

```html
<!DOCTYPE html>
<html lang="es">
<head>
    <meta charset="UTF-8">
    <title>{% block title %}Título por Defecto{% endblock %}</title>
    <!-- Agregar enlaces a Bootstrap y otros recursos aquí -->
</head>
<body>
    <nav class="navbar navbar-expand-lg navbar-light bg-light">
        <a class="navbar-brand" href="#">Mi Aplicación de Notas</a>
        <button class="navbar-toggler" type="button" data-toggle="collapse" data-target="#navbarNav" aria-controls="navbarNav" aria-expanded="false" aria-label="Toggle navigation">
            <span class="navbar-toggler-icon"></span>
        </button>
        <div class="collapse navbar-collapse" id="navbarNav">
            <ul class="navbar-nav">
                <li class="nav-item active">
                    <a class="nav-link" href="#">Inicio <span class="sr-only">(current)</span></a>
                </li>
                <li class="nav-item">
                    <a class="nav-link" href="#">Notas</a>
                </li>
                <!-- Agregar más elementos de menú si es necesario -->
            </ul>
        </div>
    </nav>

    <div class="container">
        {% block content %}{% endblock %}
    </div>

    <footer class="footer mt-auto py-3">
        <div class="container">
            <span class="text-muted">© 2023 Mi Aplicación de Notas</span>
        </div>
    </footer>
    <!-- Agregar enlaces a Bootstrap y otros recursos aquí -->
</body>
</html>
```
2. Crear la Plantilla Específica "lista_notas.html":

Crea un archivo llamado "lista_notas.html" en la misma carpeta de plantillas de tu aplicación ("articulos" en este ejemplo). Esta plantilla heredará de "base_notas.html" y mostrará una lista de notas utilizando Bootstrap:

```html
{% extends "base_notas.html" %}

{% block title %}Lista de Notas{% endblock %}

{% block content %}
    <h1>Lista de Notas</h1>
    <ul class="list-group">
        {% for nota in notas %}
            <li class="list-group-item">{{ nota.titulo }}</li>
            <p class="list-group-item">{{ nota.contenido }}</p>
        {% endfor %}
    </ul>
{% endblock %}
```
**Explicación**:

1. Hemos creado una plantilla base llamada "base_notas.html" que incluye un menú de navegación en la parte superior y un pie de página en la parte inferior. Esta plantilla utiliza Bootstrap para el estilo del menú y el pie de página.
2. Luego, hemos creado una plantilla específica llamada "lista_notas.html" que hereda de "base_notas.html" utilizando {% extends "base_notas.html" %}. Esto significa que "lista_notas.html" incluirá todo el contenido de "base_notas.html."
3. En "lista_notas.html," hemos definido bloques {% block ... %} para personalizar el título de la página ("Lista de Notas") y el contenido de la lista de notas. Dentro del bloque de contenido, iteramos sobre las notas y las mostramos utilizando clases de Bootstrap para dar formato a la lista.

Con estos pasos, hemos creado una plantilla base reutilizable ("base_notas.html") y una plantilla específica ("lista_notas.html") que hereda de la base y muestra una lista de notas con estilo Bootstrap. Esto facilitará la creación de páginas similares en tu aplicación Django.
</details>

### ¿Qué aprendimos?

Aprendimos cómo crear un CRUD de tareas en Django utilizando modelos, formularios y vistas. Entendemos cómo Django simplifica la creación de aplicaciones web interactivas.