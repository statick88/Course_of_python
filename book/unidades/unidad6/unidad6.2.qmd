## Recursividad

En esta lección, nos adentraremos en el intrigante concepto de la recursividad. 

La recursión es una técnica en la que una función se llama a sí misma para resolver un problema. 

Aprenderemos cómo implementar **funciones recursivas** y cuándo es apropiado usarlas.

### Conceptos Clave

**Recursividad**:

Es una técnica en la que una función se llama a sí misma para resolver un problema. Puede parecer un enfoque un tanto sorprendente al principio, pero es especialmente útil en situaciones en las que un problema se puede dividir en subproblemas más pequeños.

**Caso Base**:

La recursión debe tener una forma de detenerse. Un caso base es una condición que indica cuándo la recursión debe finalizar. Si no se establece un caso base adecuado, la recursión puede continuar indefinidamente.

**Caso Recursivo**:

En cada llamada recursiva, el problema original se divide en partes más pequeñas. Estas partes más pequeñas se resuelven mediante llamadas recursivas hasta que se alcanza el caso base.
Ejemplo

```python
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

resultado = factorial(5)
print(resultado)
```
### Explicación

En este ejemplo, hemos definido una función recursiva llamada **factorial** para calcular el factorial de un número. 

El factorial de un número entero no negativo n se define como el producto de todos los enteros positivos menores o iguales a n. 

Por ejemplo, 5! (pronunciado "cinco factorial") es igual a 5 × 4 × 3 × 2 × 1.

La función **factorial** utiliza dos componentes clave de la recursión:

**Caso Base**: Cuando **n** es igual a 0, retornamos 1. Este es el caso base que detiene la recursión. Si no lo tuviéramos, la función se llamaría a sí misma infinitamente.

**Caso Recursivo**: En todas las demás situaciones (cuando **n** no es igual a 0), la función se llama a sí misma con **n - 1** y multiplica el resultado por **n**. Esto es lo que hace que la función sea recursiva.

La llamada **factorial(5)** resultará en **5 * 4!**, que a su vez se descompone en **5 * 4 * 3!**, y así sucesivamente hasta que alcance el caso base.

:::{.callout-tip}

**Actividad Práctica**

Tu tarea es crear una función recursiva llamada potencia que calcule la potencia de un número base elevado a un exponente. Utiliza la función para calcular 2^3 y muestra el resultado en la consola.
:::

### Explicación de la Actividad

Esta actividad te permitirá aplicar la recursividad de manera práctica. Aprenderás a definir una función recursiva que resuelve un problema matemático y a comprender cómo se dividen los problemas en subproblemas más pequeños en cada llamada recursiva. La recursión es una técnica poderosa que se utiliza en muchos campos de la informática, como algoritmos, estructuras de datos y más.