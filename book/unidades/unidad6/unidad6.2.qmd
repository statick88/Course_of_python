## Recursividad

En esta lección, exploraremos el concepto de recursividad, que es cuando una función se llama a sí misma para resolver un problema. Aprenderemos cómo implementar funciones recursivas y cuándo es apropiado usarlas.

## Conceptos Clave:

### Recursividad

Técnica en la que una función se llama a sí misma para resolver un problema.

### Caso Base

Condición que indica cuándo la recursión debe detenerse.

### Caso Recursivo

Cómo se divide el problema en partes más pequeñas en cada llamada recursiva.

## Ejemplo:

```python
def factorial(n):
    if n == 0:
        return 1
    else:
        return n * factorial(n - 1)

resultado = factorial(5)
print(resultado)
```
## Explicación:

En este ejemplo, se define una función recursiva llamada factorial para calcular el factorial de un número.

La función utiliza un caso base (cuando n es 0) y un caso recursivo (llamando a la función con n - 1).

:::{.callout-important}
### Actividad Práctica:

Crea una función recursiva llamada potencia que calcule la potencia de un número base elevado a un exponente.

Utiliza la función para calcular 2^3 y muestra el resultado en la consola.
:::

## Explicación de la Actividad:

Esta actividad permite a los participantes practicar la implementación de funciones recursivas y comprender cómo se dividen los problemas en partes más pequeñas para resolverlos. Les ayuda a comprender cómo aplicar la recursividad de manera efectiva en la solución de problemas.