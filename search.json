[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso de Python 2023",
    "section": "",
    "text": "1 Prefacio\n¡Bienvenidos al Curso Completo de Python: Desde Fundamentos hasta Aplicaciones Prácticas!"
  },
  {
    "objectID": "index.html#qué-es-este-curso",
    "href": "index.html#qué-es-este-curso",
    "title": "Curso de Python 2023",
    "section": "1.1 ¿Qué es este Curso?",
    "text": "1.1 ¿Qué es este Curso?\nEste curso exhaustivo te llevará desde los fundamentos básicos de la programación hasta la creación de aplicaciones prácticas utilizando el lenguaje de programación Python. A través de una combinación de teoría y ejercicios prácticos, te sumergirás en los conceptos esenciales de la programación y avanzarás hacia la construcción de proyectos reales. Desde la instalación de herramientas hasta la creación de una API con Django Rest Framework, este curso te proporcionará una comprensión sólida y práctica de Python y su aplicación en el mundo real."
  },
  {
    "objectID": "index.html#a-quién-está-dirigido",
    "href": "index.html#a-quién-está-dirigido",
    "title": "Curso de Python 2023",
    "section": "1.2 ¿A quién está dirigido?",
    "text": "1.2 ¿A quién está dirigido?\nEste curso está diseñado para principiantes y aquellos con poca o ninguna experiencia en programación. No importa si eres un estudiante curioso, un profesional que busca cambiar de carrera o simplemente alguien que desea aprender a programar: este curso es para ti. Desde adolescentes hasta adultos, todos son bienvenidos a participar y explorar el emocionante mundo de la programación a través de Python."
  },
  {
    "objectID": "index.html#cómo-contribuir",
    "href": "index.html#cómo-contribuir",
    "title": "Curso de Python 2023",
    "section": "1.3 ¿Cómo contribuir?",
    "text": "1.3 ¿Cómo contribuir?\nValoramos tu participación en este curso. Si encuentras errores, deseas sugerir mejoras o agregar contenido adicional, ¡nos encantaría escucharte! Puedes contribuir a través de nuestra plataforma en línea, donde puedes compartir tus comentarios y sugerencias. Juntos, podemos mejorar continuamente este recurso educativo para beneficiar a la comunidad de estudiantes y entusiastas de la programación.\nEste libro ha sido creado con el objetivo de brindar acceso gratuito y universal al conocimiento. Estará disponible en línea para que cualquiera, sin importar su ubicación o circunstancias, pueda acceder y aprender a su propio ritmo.\n¡Esperamos que disfrutes este emocionante viaje de aprendizaje y descubrimiento en el mundo de la programación con Python!"
  },
  {
    "objectID": "unidad1.html#contenido",
    "href": "unidad1.html#contenido",
    "title": "2  Introducción a la programación.",
    "section": "2.1 Contenido",
    "text": "2.1 Contenido\nLa programación es el proceso de crear secuencias de instrucciones que le indican a una computadora cómo realizar una tarea específica.\nEstas instrucciones se escriben en lenguajes de programación, que son conjuntos de reglas y símbolos utilizados para comunicarse con la máquina. La programación es una habilidad esencial en la era digital, ya que se aplica en una amplia variedad de campos, desde desarrollo de software y análisis de datos hasta diseño de juegos y automatización."
  },
  {
    "objectID": "unidad1.html#conceptos-clave",
    "href": "unidad1.html#conceptos-clave",
    "title": "2  Introducción a la programación.",
    "section": "2.2 Conceptos Clave",
    "text": "2.2 Conceptos Clave\n\n2.2.1 Instrucciones\nSon comandos específicos que le indican a la computadora qué hacer. Pueden ser simples, como imprimir un mensaje en pantalla, o complejas, como realizar cálculos matemáticos.\n\n\n2.2.2 Lenguajes de Programación\nSon sistemas de comunicación entre humanos y máquinas. Cada lenguaje tiene reglas sintácticas y semánticas que determinan cómo se escriben y ejecutan las instrucciones.\n\n\n2.2.3 Algoritmos\nSon conjuntos ordenados de instrucciones diseñados para resolver un problema específico. Los algoritmos son la base de la programación y se utilizan para desarrollar software eficiente.\n\n\n2.2.4 Depuración\nEs el proceso de identificar y corregir errores en el código. Los programadores pasan tiempo depurando para asegurarse de que sus programas funcionen correctamente.\nEjemplo:\n1print(\"Hola, bienvenido al mundo de la programación.\")\n\n1\n\nEste es un ejemplo sencillo de un programa en Python que imprime un mensaje en pantalla.\n\n\n\n\n2.2.5 Explicación\nEn Python, los comentarios comienzan con el símbolo #. No afectan la ejecución del programa, pero son útiles para documentar el código.\nLa línea print(\"Hola, bienvenido al mundo de la programación.\") es una instrucción de impresión. La función print() muestra el texto entre paréntesis en la consola.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nEscribe un programa que solicite al usuario su nombre y luego imprima un mensaje de bienvenida personalizado.\n\n\n\n\n2.2.6 Explicación de la Actividad\nEl programa utilizará la función input() para recibir la entrada del usuario. Luego, utilizará la entrada proporcionada para imprimir un mensaje de bienvenida personalizado."
  },
  {
    "objectID": "unidad2.html#contenido",
    "href": "unidad2.html#contenido",
    "title": "3  Instalación de Python y más herramientas",
    "section": "3.1 Contenido:",
    "text": "3.1 Contenido:\nLa instalación de Python es el primer paso para comenzar a programar en este lenguaje. Python es un lenguaje de programación versátil y ampliamente utilizado, conocido por su sintaxis clara y legible. Aquí aprenderemos cómo instalar Python en diferentes sistemas operativos."
  },
  {
    "objectID": "unidad2.html#conceptos-clave",
    "href": "unidad2.html#conceptos-clave",
    "title": "3  Instalación de Python y más herramientas",
    "section": "3.2 Conceptos Clave",
    "text": "3.2 Conceptos Clave\n\n3.2.1 Python\nLenguaje de programación de alto nivel que se utiliza para desarrollar aplicaciones web, científicas, de automatización y más.\n\n\n3.2.2 Interprete\nPython es un lenguaje interpretado, lo que significa que se ejecuta línea por línea en tiempo real.\n\n\n3.2.3 IDE\nLos entornos de desarrollo integrados (IDE) como Visual Studio Code (VS Code) o PyCharm brindan herramientas para escribir, depurar y ejecutar código de manera más eficiente."
  },
  {
    "objectID": "unidad2.html#ejemplo",
    "href": "unidad2.html#ejemplo",
    "title": "3  Instalación de Python y más herramientas",
    "section": "3.3 Ejemplo",
    "text": "3.3 Ejemplo\nNo se necesita código para esta lección, ya que se trata de instrucciones para la instalación de Python en diferentes sistemas operativos."
  },
  {
    "objectID": "unidad2.html#explicación",
    "href": "unidad2.html#explicación",
    "title": "3  Instalación de Python y más herramientas",
    "section": "3.4 Explicación",
    "text": "3.4 Explicación\nPara instalar Python en sistemas Windows, macOS y Linux, se pueden seguir las instrucciones detalladas proporcionadas en el sitio web oficial de Python www.python.org/downloads/.\nLa instalación de Python generalmente incluye el intérprete de Python y una serie de herramientas y bibliotecas estándar que hacen que sea fácil comenzar a programar.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nInstala Python en tu sistema operativo siguiendo las instrucciones del sitio web oficial de Python. Luego, verifica que Python esté correctamente instalado ejecutando el intérprete y escribiendo el siguiente código:\nprint(\"Python se ha instalado correctamente.\")"
  },
  {
    "objectID": "unidad2.html#explicación-de-la-actividad",
    "href": "unidad2.html#explicación-de-la-actividad",
    "title": "3  Instalación de Python y más herramientas",
    "section": "3.5 Explicación de la Actividad",
    "text": "3.5 Explicación de la Actividad\nEsta actividad permite a los participantes aplicar lo aprendido instalando Python en su propio sistema y ejecutando un programa sencillo para confirmar que la instalación fue exitosa."
  },
  {
    "objectID": "unidad3.html#distintas-formas-de-trabajar-con-python",
    "href": "unidad3.html#distintas-formas-de-trabajar-con-python",
    "title": "4  Introducción a Python",
    "section": "4.1 Distintas formas de trabajar con Python",
    "text": "4.1 Distintas formas de trabajar con Python"
  },
  {
    "objectID": "unidad3.html#contenido",
    "href": "unidad3.html#contenido",
    "title": "4  Introducción a Python",
    "section": "4.2 Contenido",
    "text": "4.2 Contenido\nde programación versátil que ofrece diferentes formas de interactuar con él. Aprenderemos las dos formas principales de trabajar con Python: el intérprete interactivo y los scripts de Python."
  },
  {
    "objectID": "unidad3.html#conceptos-clave",
    "href": "unidad3.html#conceptos-clave",
    "title": "4  Introducción a Python",
    "section": "4.3 Conceptos Clave:",
    "text": "4.3 Conceptos Clave:\n\n4.3.1 Intérprete Interactivo:\nPermite ejecutar instrucciones de Python en tiempo real y ver los resultados inmediatamente en la consola.\n\n\n4.3.2 Scripts de Python:\nSon archivos que contienen una serie de instrucciones de Python que se pueden ejecutar en conjunto.\n\n\n4.3.3 Ambientes Virtuales\nSon entornos aislados que permiten tener instalaciones y bibliotecas de Python separadas para diferentes proyectos.\n\n\n4.3.4 Ejemplo\n1&gt;&gt;&gt; 2 + 3\n5\n\n2# suma.py\nnumero1 = 5\nnumero2 = 7\nresultado = numero1 + numero2\nprint(\"El resultado de la suma es:\", resultado)\n3# CTRL + S para guardar\n\n1\n\nUso del intérprete interactivo\n\n2\n\nEjecución de un script de Python\n\n3\n\nGuarda este código en un archivo llamado “suma.py”"
  },
  {
    "objectID": "unidad3.html#explicación",
    "href": "unidad3.html#explicación",
    "title": "4  Introducción a Python",
    "section": "4.4 Explicación",
    "text": "4.4 Explicación\nEl intérprete interactivo permite ejecutar expresiones de Python directamente en la consola y ver los resultados en tiempo real.\nLos scripts de Python son archivos que contienen un conjunto de instrucciones. En este ejemplo, se muestra cómo crear un script simple que calcula la suma de dos números y lo imprime en la consola.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nAbre el intérprete interactivo de Python y realiza algunas operaciones matemáticas simples.\nCrea un archivo llamado “operaciones.py” y escribe un programa que realice operaciones aritméticas básicas y las muestre en la consola.\n\n\n\n4.4.1 Explicación de la Actividad\nEsta actividad permite a los participantes experimentar con el intérprete interactivo de Python y crear su propio script para realizar operaciones matemáticas."
  },
  {
    "objectID": "unidad3.html#las-bases-de-python",
    "href": "unidad3.html#las-bases-de-python",
    "title": "4  Introducción a Python",
    "section": "4.5 Las bases de Python",
    "text": "4.5 Las bases de Python"
  },
  {
    "objectID": "unidad3.html#contenido-1",
    "href": "unidad3.html#contenido-1",
    "title": "4  Introducción a Python",
    "section": "4.6 Contenido",
    "text": "4.6 Contenido\nEn esta lección, exploraremos las bases fundamentales de Python. Aprenderemos sobre las variables, tipos de datos y operadores básicos que forman la base de cualquier programa en Python."
  },
  {
    "objectID": "unidad3.html#conceptos-clave-1",
    "href": "unidad3.html#conceptos-clave-1",
    "title": "4  Introducción a Python",
    "section": "4.7 Conceptos Clave",
    "text": "4.7 Conceptos Clave\n\n4.7.1 Variables\nSon nombres que se utilizan para almacenar valores en la memoria de la computadora.\n\n\n4.7.2 Tipos de Datos\nIncluyen enteros, flotantes, cadenas, booleanos y más. Cada tipo de dato tiene sus propias características y operaciones.\n\n\n4.7.3 Operadores\nIncluyen operadores aritméticos, de comparación y lógicos que se utilizan para realizar diferentes tipos de cálculos y comparaciones.\n\n\n4.7.4 Ejemplo\n\n# Variables y tipos de datos\nnombre = \"Juan\"\nedad = 25\naltura = 1.75\nes_mayor_de_edad = True\n\n# Operadores aritméticos\nsuma = 5 + 3\nresta = 10 - 2\nmultiplicacion = 4 * 6\ndivision = 15 / 3\n\n# Operadores de comparación\nigual = 5 == 5\nmayor_que = 10 &gt; 5\nmenor_que = 7 &lt; 12\n\n# Operadores lógicos\nand_logico = True and False\nor_logico = True or False\nnot_logico = not True"
  },
  {
    "objectID": "unidad3.html#explicación-1",
    "href": "unidad3.html#explicación-1",
    "title": "4  Introducción a Python",
    "section": "4.8 Explicación:",
    "text": "4.8 Explicación:\nLas variables se utilizan para almacenar información, como el nombre, la edad, la altura y si una persona es mayor de edad.\nLos operadores aritméticos se utilizan para realizar cálculos matemáticos básicos.\nLos operadores de comparación se utilizan para comparar valores y devuelven un valor booleano (verdadero o falso).\nLos operadores lógicos se utilizan para combinar expresiones booleanas y realizar operaciones lógicas.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea variables que almacenen información sobre ti, como tu nombre, edad y altura.\nRealiza operaciones aritméticas y utiliza operadores de comparación para comparar valores.\nCombina expresiones booleanas utilizando operadores lógicos y observa los resultados."
  },
  {
    "objectID": "unidad3.html#explicación-de-la-actividad-1",
    "href": "unidad3.html#explicación-de-la-actividad-1",
    "title": "4  Introducción a Python",
    "section": "4.9 Explicación de la Actividad",
    "text": "4.9 Explicación de la Actividad\nEsta actividad permite a los participantes aplicar los conceptos de variables, tipos de datos y operadores en ejemplos prácticos. Les ayuda a comprender cómo trabajar con diferentes tipos de datos y cómo realizar operaciones básicas en Python."
  },
  {
    "objectID": "unidad3.html#identación",
    "href": "unidad3.html#identación",
    "title": "4  Introducción a Python",
    "section": "4.10 Identación",
    "text": "4.10 Identación"
  },
  {
    "objectID": "unidad3.html#contenido-2",
    "href": "unidad3.html#contenido-2",
    "title": "4  Introducción a Python",
    "section": "4.11 Contenido",
    "text": "4.11 Contenido\nEn Python, la identación (sangría) juega un papel crucial en la estructura y organización del código. Aprenderemos cómo se utiliza la identación para delimitar bloques de código y mejorar la legibilidad."
  },
  {
    "objectID": "unidad3.html#conceptos-clave-2",
    "href": "unidad3.html#conceptos-clave-2",
    "title": "4  Introducción a Python",
    "section": "4.12 Conceptos Clave",
    "text": "4.12 Conceptos Clave\n\n4.12.1 Identación\n\nEspacios o tabulaciones al comienzo de una línea que indican la estructura del código.\nBloques de Código: Conjuntos de instrucciones que se agrupan juntas y se ejecutan en conjunto.\nPEP 8: Guía de estilo para la escritura de código en Python que recomienda el uso de cuatro espacios para la identación.\n\n\n\n4.12.2 Ejemplo\n# Uso de la identación en un condicional\nnumero = 10\n\nif numero &gt; 5:\n    print(\"El número es mayor que 5\")\nelse:\n    print(\"El número no es mayor que 5\")"
  },
  {
    "objectID": "unidad3.html#explicación-2",
    "href": "unidad3.html#explicación-2",
    "title": "4  Introducción a Python",
    "section": "4.13 Explicación",
    "text": "4.13 Explicación\n\nEn este ejemplo, la identación se utiliza para delimitar los bloques de código dentro de las instrucciones “if” y “else”.\nLa identación es crucial para que Python sepa qué instrucciones están dentro de un bloque y cuáles están fuera.\n\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nEscribe un programa que solicite al usuario su edad y muestre un mensaje según si es mayor de 18 años o no.\nIntenta cambiar la identación incorrectamente y observa cómo afecta al funcionamiento del programa."
  },
  {
    "objectID": "unidad3.html#explicación-de-la-actividad.",
    "href": "unidad3.html#explicación-de-la-actividad.",
    "title": "4  Introducción a Python",
    "section": "4.14 Explicación de la Actividad.",
    "text": "4.14 Explicación de la Actividad.\nEsta actividad permite a los participantes comprender la importancia de la identación en Python al trabajar con bloques de código como los condicionales. Les ayuda a desarrollar el hábito de utilizar la identación adecuada para mantener el código organizado y legible."
  },
  {
    "objectID": "unidad3.html#comentarios",
    "href": "unidad3.html#comentarios",
    "title": "4  Introducción a Python",
    "section": "4.15 Comentarios",
    "text": "4.15 Comentarios"
  },
  {
    "objectID": "unidad3.html#contenido-3",
    "href": "unidad3.html#contenido-3",
    "title": "4  Introducción a Python",
    "section": "4.16 Contenido",
    "text": "4.16 Contenido\nLos comentarios son una herramienta importante en la programación para añadir explicaciones y notas en el código. Aprenderemos cómo agregar comentarios en Python y cómo pueden mejorar la comprensión del código."
  },
  {
    "objectID": "unidad3.html#conceptos-clave-3",
    "href": "unidad3.html#conceptos-clave-3",
    "title": "4  Introducción a Python",
    "section": "4.17 Conceptos Clave:",
    "text": "4.17 Conceptos Clave:\n\n4.17.1 Comentarios\nSon notas en el código que no se ejecutan y se utilizan para explicar el propósito y funcionamiento de partes del programa.\n\n\n4.17.2 Comentarios de una línea\nSe crean con el símbolo “#” y abarcan una sola línea.\n\n\n4.17.3 Comentarios de múltiples líneas\nSe crean entre triple comillas (““” o ’’’) y pueden abarcar múltiples líneas.\n\n\n4.17.4 Ejemplo\n# Este es un comentario de una línea\n\n\"\"\"\nEste es un comentario\nde múltiples líneas.\nPuede abarcar varias líneas.\n\"\"\"\n\nnumero = 42  # Este comentario está después de una instrucción"
  },
  {
    "objectID": "unidad3.html#explicación-3",
    "href": "unidad3.html#explicación-3",
    "title": "4  Introducción a Python",
    "section": "4.18 Explicación:",
    "text": "4.18 Explicación:\nLos comentarios son ignorados por el intérprete y no afectan la ejecución del código.\nLos comentarios son útiles para documentar el código, explicar partes difíciles de entender o dejar notas para otros programadores.\n\n\n\n\n\n\nImportant\n\n\n\nActividad Práctica:\nEscribe un programa que realice una tarea sencilla y agrega comentarios para explicar lo que hace cada parte.\nEscribe un comentario de múltiples líneas que explique el propósito general de tu programa."
  },
  {
    "objectID": "unidad3.html#explicación-de-la-actividad-2",
    "href": "unidad3.html#explicación-de-la-actividad-2",
    "title": "4  Introducción a Python",
    "section": "4.19 Explicación de la Actividad",
    "text": "4.19 Explicación de la Actividad\nEsta actividad permite a los participantes practicar la adición de comentarios en su código para mejorar la legibilidad y la comprensión. Les ayuda a desarrollar la habilidad de documentar su código de manera efectiva para ellos mismos y para otros programadores."
  },
  {
    "objectID": "unidad3.html#variables-1",
    "href": "unidad3.html#variables-1",
    "title": "4  Introducción a Python",
    "section": "4.20 Variables",
    "text": "4.20 Variables"
  },
  {
    "objectID": "unidad3.html#contenido-4",
    "href": "unidad3.html#contenido-4",
    "title": "4  Introducción a Python",
    "section": "4.21 Contenido",
    "text": "4.21 Contenido\nLas variables son fundamentales en la programación ya que permiten almacenar y manipular datos. Aprenderemos cómo declarar y utilizar variables en Python."
  },
  {
    "objectID": "unidad3.html#conceptos-clave-4",
    "href": "unidad3.html#conceptos-clave-4",
    "title": "4  Introducción a Python",
    "section": "4.22 Conceptos Clave:",
    "text": "4.22 Conceptos Clave:\n\n4.22.1 Variables\nNombres que representan ubicaciones de memoria donde se almacenan datos.\n\n\n4.22.2 Declaración de Variables.\n\nAsignación de un valor a un nombre utilizando el operador “=”.\nConvenciones de Nombres: Siguen reglas para ser descriptivos y seguir una estructura (por ejemplo, letras minúsculas y guiones bajos para espacios).\n\n\n\n4.22.3 Ejemplo\nnombre = \"Ana\"\nedad = 30\nsaldo_bancario = 1500.75\nes_mayor_de_edad = True"
  },
  {
    "objectID": "unidad3.html#explicación-4",
    "href": "unidad3.html#explicación-4",
    "title": "4  Introducción a Python",
    "section": "4.23 Explicación:",
    "text": "4.23 Explicación:\nEn este ejemplo, se declaran variables para almacenar el nombre de una persona, su edad, su saldo bancario y un valor booleano que indica si es mayor de edad.\nLos nombres de variables son descriptivos y siguen la convención de nombres recomendada (letras minúsculas y guiones bajos para espacios).\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea variables para almacenar información personal, como tu ciudad, tu edad y tu ocupación.\nDeclara variables para almacenar cantidades numéricas, como el precio de un producto y la cantidad de unidades disponibles."
  },
  {
    "objectID": "unidad3.html#explicación-de-la-actividad-3",
    "href": "unidad3.html#explicación-de-la-actividad-3",
    "title": "4  Introducción a Python",
    "section": "4.24 Explicación de la Actividad",
    "text": "4.24 Explicación de la Actividad\nEsta actividad permite a los participantes practicar la declaración de variables en Python y aplicar el concepto de convenciones de nombres.\nLes ayuda a comprender cómo almacenar y acceder a datos utilizando variables descriptivas y significativas."
  },
  {
    "objectID": "unidad3.html#múltiples-variables",
    "href": "unidad3.html#múltiples-variables",
    "title": "4  Introducción a Python",
    "section": "4.25 Múltiples Variables",
    "text": "4.25 Múltiples Variables"
  },
  {
    "objectID": "unidad3.html#contenido-5",
    "href": "unidad3.html#contenido-5",
    "title": "4  Introducción a Python",
    "section": "4.26 Contenido:",
    "text": "4.26 Contenido:\nEn Python, es posible asignar valores a múltiples variables en una sola línea. Aprenderemos cómo declarar y utilizar múltiples variables de manera eficiente."
  },
  {
    "objectID": "unidad3.html#conceptos-clave-5",
    "href": "unidad3.html#conceptos-clave-5",
    "title": "4  Introducción a Python",
    "section": "4.27 Conceptos Clave:",
    "text": "4.27 Conceptos Clave:\n\n4.27.1 Asignación Múltiple\nPermite asignar valores a varias variables en una línea.\n\n\n4.27.2 Desempaquetado de Valores\nSe pueden asignar valores de una lista o tupla a múltiples variables en una sola operación.\n\n\n4.27.3 Intercambio de Valores\nSe pueden intercambiar los valores de dos variables utilizando asignación múltiple.\n\n\n4.27.4 Ejemplo\nnombre, edad, altura = \"María\", 28, 1.65\nproductos = (\"Manzanas\", \"Peras\", \"Uvas\")\nproducto1, producto2, producto3 = productos"
  },
  {
    "objectID": "unidad3.html#explicación-5",
    "href": "unidad3.html#explicación-5",
    "title": "4  Introducción a Python",
    "section": "4.28 Explicación:",
    "text": "4.28 Explicación:\nEn el primer ejemplo, se utilizó la asignación múltiple para declarar tres variables en una sola línea.\nEn el segundo ejemplo, se desempaquetaron los valores de una tupla en variables individuales.\n::: {.callout-important} ### Actividad Práctica:\nCrea una lista con los nombres de tus tres colores favoritos.\nUtiliza la asignación múltiple para asignar los valores de la lista a tres variables individuales."
  },
  {
    "objectID": "unidad3.html#explicación-de-la-actividad-4",
    "href": "unidad3.html#explicación-de-la-actividad-4",
    "title": "4  Introducción a Python",
    "section": "4.29 Explicación de la Actividad",
    "text": "4.29 Explicación de la Actividad\nEsta actividad permite a los participantes practicar la asignación múltiple y el desempaquetado de valores.\nLes ayuda a comprender cómo trabajar eficientemente con múltiples variables y cómo aprovechar estas técnicas para simplificar el código."
  },
  {
    "objectID": "unidad3.html#concatenación",
    "href": "unidad3.html#concatenación",
    "title": "4  Introducción a Python",
    "section": "4.30 Concatenación",
    "text": "4.30 Concatenación"
  },
  {
    "objectID": "unidad3.html#contenido-6",
    "href": "unidad3.html#contenido-6",
    "title": "4  Introducción a Python",
    "section": "4.31 Contenido:",
    "text": "4.31 Contenido:\nLa concatenación es la unión de cadenas de texto. Aprenderemos cómo combinar cadenas de texto en Python para crear mensajes más complejos."
  },
  {
    "objectID": "unidad3.html#conceptos-clave-6",
    "href": "unidad3.html#conceptos-clave-6",
    "title": "4  Introducción a Python",
    "section": "4.32 Conceptos Clave:",
    "text": "4.32 Conceptos Clave:\n\n4.32.1 Concatenación:\nOperación que combina dos o más cadenas de texto para formar una cadena más larga.\n\n\n4.32.2 Operador +\nSe utiliza para concatenar cadenas de texto.\n\n\n4.32.3 Conversión a Cadena\nEs necesario convertir valores no string a cadenas antes de concatenarlos.\n\n\n4.32.4 Ejemplo\nnombre = \"Luisa\"\nmensaje = \"Hola, \" + nombre + \". ¿Cómo estás?\"\nedad = 25\nmensaje_edad = \"Tienes \" + str(edad) + \" años.\""
  },
  {
    "objectID": "unidad3.html#explicación-6",
    "href": "unidad3.html#explicación-6",
    "title": "4  Introducción a Python",
    "section": "4.33 Explicación:",
    "text": "4.33 Explicación:\nEn este ejemplo, se utilizó el operador “+” para concatenar cadenas de texto.\nLa variable “edad” se convirtió a una cadena utilizando la función “str()” antes de concatenarla.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una variable con tu comida favorita. Utiliza la concatenación para crear un mensaje que incluya tu comida favorita."
  },
  {
    "objectID": "unidad3.html#explicación-de-la-actividad-5",
    "href": "unidad3.html#explicación-de-la-actividad-5",
    "title": "4  Introducción a Python",
    "section": "4.34 Explicación de la Actividad",
    "text": "4.34 Explicación de la Actividad\nEsta actividad permite a los participantes practicar la concatenación de cadenas de texto y comprender cómo construir mensajes más complejos utilizando variables y texto. Les ayuda a mejorar su capacidad para crear mensajes personalizados en sus programas."
  },
  {
    "objectID": "unidad4.html#string-y-números",
    "href": "unidad4.html#string-y-números",
    "title": "5  Tipos de Datos",
    "section": "5.1 String y Números",
    "text": "5.1 String y Números"
  },
  {
    "objectID": "unidad4.html#contenido",
    "href": "unidad4.html#contenido",
    "title": "5  Tipos de Datos",
    "section": "5.2 Contenido:",
    "text": "5.2 Contenido:\nLos strings y los números son dos tipos de datos fundamentales en Python. Aprenderemos cómo trabajar con strings (cadenas de texto) y los diferentes tipos de números en Python."
  },
  {
    "objectID": "unidad4.html#conceptos-clave",
    "href": "unidad4.html#conceptos-clave",
    "title": "5  Tipos de Datos",
    "section": "5.3 Conceptos Clave:",
    "text": "5.3 Conceptos Clave:\n\n5.3.1 String:\nSecuencia de caracteres alfanuméricos. Se pueden definir utilizando comillas simples o dobles.\n\n\n5.3.2 Números Enteros (int)\nRepresentan números enteros positivos o negativos.\n\n\n5.3.3 Números de Punto Flotante (float)\nRepresentan números con decimales."
  },
  {
    "objectID": "unidad4.html#ejemplo",
    "href": "unidad4.html#ejemplo",
    "title": "5  Tipos de Datos",
    "section": "5.4 Ejemplo:",
    "text": "5.4 Ejemplo:\n# Strings\nmensaje = \"Hola, bienvenido al curso de Python.\"\nnombre = 'María'\n\n# Números\nedad = 25\nsaldo = 1500.75"
  },
  {
    "objectID": "unidad4.html#explicación",
    "href": "unidad4.html#explicación",
    "title": "5  Tipos de Datos",
    "section": "5.5 Explicación:",
    "text": "5.5 Explicación:\nEn este ejemplo, se crean variables que almacenan strings y números.\nLos strings se definen utilizando comillas simples o dobles.\nLos números enteros y de punto flotante se asignan directamente a variables.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una variable con tu canción favorita.\nAsigna tu edad a una variable y tu altura a otra variable.\nCombina las variables para crear un mensaje personalizado."
  },
  {
    "objectID": "unidad4.html#explicación-de-la-actividad",
    "href": "unidad4.html#explicación-de-la-actividad",
    "title": "5  Tipos de Datos",
    "section": "5.6 Explicación de la Actividad:",
    "text": "5.6 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de strings y trabajar con números enteros y de punto flotante.\nLes ayuda a comprender cómo almacenar y manipular diferentes tipos de datos en Python."
  },
  {
    "objectID": "unidad4.html#listas",
    "href": "unidad4.html#listas",
    "title": "5  Tipos de Datos",
    "section": "5.7 Listas",
    "text": "5.7 Listas\n\n5.7.1 Contenido:\nLas listas son estructuras de datos que permiten almacenar varios elementos en una sola variable. Aprenderemos cómo crear y manipular listas en Python."
  },
  {
    "objectID": "unidad4.html#conceptos-clave-1",
    "href": "unidad4.html#conceptos-clave-1",
    "title": "5  Tipos de Datos",
    "section": "5.8 Conceptos Clave:",
    "text": "5.8 Conceptos Clave:\n\n5.8.1 Listas\nSecuencias ordenadas de elementos que pueden ser de diferentes tipos.\n\n\n5.8.2 Índices\nNúmeros que indican la posición de un elemento en la lista.\n\n\n5.8.3 Acceso a Elementos\nSe utiliza el índice para acceder a un elemento específico de la lista."
  },
  {
    "objectID": "unidad4.html#ejemplo-1",
    "href": "unidad4.html#ejemplo-1",
    "title": "5  Tipos de Datos",
    "section": "5.9 Ejemplo",
    "text": "5.9 Ejemplo\nfrutas = [\"manzana\", \"banana\", \"naranja\", \"uva\"]\nprimer_fruta = frutas[0]\nsegunda_fruta = frutas[1]"
  },
  {
    "objectID": "unidad4.html#explicación-1",
    "href": "unidad4.html#explicación-1",
    "title": "5  Tipos de Datos",
    "section": "5.10 Explicación:",
    "text": "5.10 Explicación:\nEn este ejemplo, se crea una lista de frutas y se accede a elementos individuales utilizando índices.\nLos índices comienzan desde 0, por lo que la primera fruta tiene el índice 0.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una lista con los nombres de tus tres películas favoritas.\nAccede al segundo elemento de la lista e imprímelo en la consola."
  },
  {
    "objectID": "unidad4.html#explicación-de-la-actividad-1",
    "href": "unidad4.html#explicación-de-la-actividad-1",
    "title": "5  Tipos de Datos",
    "section": "5.11 Explicación de la Actividad:",
    "text": "5.11 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de listas y el acceso a elementos utilizando índices. Les ayuda a comprender cómo organizar y acceder a múltiples elementos en una sola variable."
  },
  {
    "objectID": "unidad4.html#tuplas",
    "href": "unidad4.html#tuplas",
    "title": "5  Tipos de Datos",
    "section": "5.12 Tuplas",
    "text": "5.12 Tuplas\n\n5.12.1 Contenido:\nLas tuplas son estructuras de datos similares a las listas, pero son inmutables, lo que significa que no se pueden modificar después de ser creadas. Aprenderemos cómo trabajar con tuplas en Python."
  },
  {
    "objectID": "unidad4.html#conceptos-clave-2",
    "href": "unidad4.html#conceptos-clave-2",
    "title": "5  Tipos de Datos",
    "section": "5.13 Conceptos Clave:",
    "text": "5.13 Conceptos Clave:\n\n5.13.1 Tuplas\nSecuencias ordenadas de elementos que, a diferencia de las listas, no se pueden modificar.\n\n\n5.13.2 Inmutabilidad\nUna vez creada una tupla, no se pueden agregar, modificar o eliminar elementos.\n\n\n5.13.3 Acceso a Elementos\nSe utiliza el índice para acceder a un elemento específico de la tupla."
  },
  {
    "objectID": "unidad4.html#ejemplo-2",
    "href": "unidad4.html#ejemplo-2",
    "title": "5  Tipos de Datos",
    "section": "5.14 Ejemplo:",
    "text": "5.14 Ejemplo:\ncoordenadas = (3, 5)\nx = coordenadas[0]\ny = coordenadas[1]"
  },
  {
    "objectID": "unidad4.html#explicación-2",
    "href": "unidad4.html#explicación-2",
    "title": "5  Tipos de Datos",
    "section": "5.15 Explicación:",
    "text": "5.15 Explicación:\nEn este ejemplo, se crea una tupla que almacena coordenadas (x, y) y se accede a los valores individuales utilizando índices.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una tupla con las estaciones del año.\nIntenta modificar un elemento de la tupla y observa el error que se produce."
  },
  {
    "objectID": "unidad4.html#explicación-de-la-actividad-2",
    "href": "unidad4.html#explicación-de-la-actividad-2",
    "title": "5  Tipos de Datos",
    "section": "5.16 Explicación de la Actividad:",
    "text": "5.16 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de tuplas y comprender la diferencia entre listas y tuplas en términos de inmutabilidad. Les ayuda a comprender cómo utilizar tuplas cuando necesitan almacenar datos que no deben cambiar."
  },
  {
    "objectID": "unidad4.html#range",
    "href": "unidad4.html#range",
    "title": "5  Tipos de Datos",
    "section": "5.17 Range",
    "text": "5.17 Range\n\n5.17.1 Contenido\nEl tipo de dato range se utiliza para generar secuencias de números. Aprenderemos cómo utilizar range en Python para crear secuencias de números en rangos específicos."
  },
  {
    "objectID": "unidad4.html#conceptos-clave-3",
    "href": "unidad4.html#conceptos-clave-3",
    "title": "5  Tipos de Datos",
    "section": "5.18 Conceptos Clave:",
    "text": "5.18 Conceptos Clave:\n\n5.18.1 range\nTipo de dato utilizado para generar secuencias de números en un rango.\n\n\n5.18.2 Parámetros de range\nSe pueden especificar el valor inicial, valor final y paso de la secuencia.\n\n\n5.18.3 Conversión a Listas\nEs posible convertir un objeto range en una lista utilizando la función list()."
  },
  {
    "objectID": "unidad4.html#ejemplo-3",
    "href": "unidad4.html#ejemplo-3",
    "title": "5  Tipos de Datos",
    "section": "5.19 Ejemplo",
    "text": "5.19 Ejemplo\n# Generación de secuencias de números\nsecuencia1 = range(5)          # 0, 1, 2, 3, 4\nsecuencia2 = range(2, 10)      # 2, 3, 4, 5, 6, 7, 8, 9\nsecuencia3 = range(1, 11, 2)   # 1, 3, 5, 7, 9\n\n# Conversión a lista\nlista_secuencia1 = list(secuencia1)"
  },
  {
    "objectID": "unidad4.html#explicación-3",
    "href": "unidad4.html#explicación-3",
    "title": "5  Tipos de Datos",
    "section": "5.20 Explicación:",
    "text": "5.20 Explicación:\nEn este ejemplo, se utilizan diferentes valores para crear secuencias de números utilizando el tipo de dato range.\nLa función list() se utiliza para convertir una secuencia de range en una lista.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una secuencia de números del 10 al 20 con un paso de 2.\nConvierte la secuencia de números en una lista y muestra los elementos en la consola."
  },
  {
    "objectID": "unidad4.html#explicación-de-la-actividad-3",
    "href": "unidad4.html#explicación-de-la-actividad-3",
    "title": "5  Tipos de Datos",
    "section": "5.21 Explicación de la Actividad:",
    "text": "5.21 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de secuencias de números utilizando range y cómo convertirlas en listas para trabajar con los elementos individualmente. Les ayuda a comprender cómo generar secuencias de números en diferentes rangos."
  },
  {
    "objectID": "unidad4.html#diccionarios",
    "href": "unidad4.html#diccionarios",
    "title": "5  Tipos de Datos",
    "section": "5.22 Diccionarios",
    "text": "5.22 Diccionarios\n\n5.22.1 Contenido:\nLos diccionarios son estructuras de datos que permiten almacenar pares clave-valor. Aprenderemos cómo crear y trabajar con diccionarios en Python."
  },
  {
    "objectID": "unidad4.html#conceptos-clave-4",
    "href": "unidad4.html#conceptos-clave-4",
    "title": "5  Tipos de Datos",
    "section": "5.23 Conceptos Clave:",
    "text": "5.23 Conceptos Clave:\n\n5.23.1 Diccionarios\nEstructuras de datos que almacenan pares clave-valor.\n\n\n5.23.2 Claves\nSon los nombres o etiquetas utilizados para acceder a los valores en el diccionario.\n\n\n5.23.3 Valores\nSon los datos asociados a cada clave en el diccionario."
  },
  {
    "objectID": "unidad4.html#ejemplo-4",
    "href": "unidad4.html#ejemplo-4",
    "title": "5  Tipos de Datos",
    "section": "5.24 Ejemplo:",
    "text": "5.24 Ejemplo:\n# Creación de un diccionario\npersona = {\n    \"nombre\": \"Juan\",\n    \"edad\": 30,\n    \"ciudad\": \"México\"\n}\n\n# Acceso a valores utilizando claves\nnombre = persona[\"nombre\"]\nedad = persona[\"edad\"]"
  },
  {
    "objectID": "unidad4.html#explicación-4",
    "href": "unidad4.html#explicación-4",
    "title": "5  Tipos de Datos",
    "section": "5.25 Explicación:",
    "text": "5.25 Explicación:\nEn este ejemplo, se crea un diccionario que almacena información de una persona, como nombre, edad y ciudad.\nSe accede a los valores del diccionario utilizando las claves correspondientes.\n\n\n\n\n\n\nActividad Práctica\n\n\n\nCrea un diccionario que almacene información de tus libros favoritos, incluyendo título y autor.\nAccede a los valores del diccionario utilizando las claves y muestra la información en la consola."
  },
  {
    "objectID": "unidad4.html#explicación-de-la-actividad-4",
    "href": "unidad4.html#explicación-de-la-actividad-4",
    "title": "5  Tipos de Datos",
    "section": "5.26 Explicación de la Actividad:",
    "text": "5.26 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de diccionarios y acceder a los valores utilizando las claves. Les ayuda a comprender cómo organizar datos en pares clave-valor y cómo acceder a la información de manera eficiente."
  },
  {
    "objectID": "unidad4.html#booleanos",
    "href": "unidad4.html#booleanos",
    "title": "5  Tipos de Datos",
    "section": "5.27 Booleanos",
    "text": "5.27 Booleanos\n\n5.27.1 Contenido\nLos booleanos son un tipo de dato que puede tener dos valores: True (verdadero) o False (falso). Aprenderemos cómo trabajar con booleanos en Python y cómo utilizarlos en expresiones lógicas."
  },
  {
    "objectID": "unidad4.html#conceptos-clave-5",
    "href": "unidad4.html#conceptos-clave-5",
    "title": "5  Tipos de Datos",
    "section": "5.28 Conceptos Clave:",
    "text": "5.28 Conceptos Clave:\n\n5.28.1 Booleanos\nTipo de dato que representa valores de verdad (True o False).\nExpresiones Lógicas: Combinaciones de valores booleanos utilizando operadores lógicos como and, or y not."
  },
  {
    "objectID": "unidad4.html#ejemplo-5",
    "href": "unidad4.html#ejemplo-5",
    "title": "5  Tipos de Datos",
    "section": "5.29 Ejemplo:",
    "text": "5.29 Ejemplo:\n# Variables booleanas\nes_mayor_de_edad = True\ntiene_tarjeta = False\n\n# Expresiones lógicas\npuede_ingresar = es_mayor_de_edad and tiene_tarjeta"
  },
  {
    "objectID": "unidad4.html#explicación-5",
    "href": "unidad4.html#explicación-5",
    "title": "5  Tipos de Datos",
    "section": "5.30 Explicación:",
    "text": "5.30 Explicación:\nEn este ejemplo, se utilizan variables booleanas para representar si alguien es mayor de edad y si tiene una tarjeta.\nSe utiliza una expresión lógica para evaluar si alguien puede ingresar basado en ambas condiciones.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea variables booleanas que representen si tienes una mascota y si te gusta el deporte.\nUtiliza expresiones lógicas para determinar si puedes llevar a tu mascota a un lugar que requiere tu atención durante un partido de tu deporte favorito."
  },
  {
    "objectID": "unidad4.html#explicación-de-la-actividad-5",
    "href": "unidad4.html#explicación-de-la-actividad-5",
    "title": "5  Tipos de Datos",
    "section": "5.31 Explicación de la Actividad:",
    "text": "5.31 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar el uso de variables booleanas y expresiones lógicas para tomar decisiones basadas en condiciones booleanas. Les ayuda a comprender cómo trabajar con valores de verdad y cómo utilizarlos para evaluar situaciones en el código."
  },
  {
    "objectID": "unidad5.html#introducción-a-if",
    "href": "unidad5.html#introducción-a-if",
    "title": "6  Control de Flujo",
    "section": "6.1 Introducción a If",
    "text": "6.1 Introducción a If\n\n6.1.1 Contenido:\nEl control de flujo es fundamental en la programación para tomar decisiones basadas en condiciones. Aprenderemos cómo utilizar la estructura if para ejecutar diferentes bloques de código según una condición."
  },
  {
    "objectID": "unidad5.html#conceptos-clave",
    "href": "unidad5.html#conceptos-clave",
    "title": "6  Control de Flujo",
    "section": "6.2 Conceptos Clave:",
    "text": "6.2 Conceptos Clave:\n\n6.2.1 Control de Flujo\nManejo de la ejecución del código basado en condiciones.\n\n\n6.2.2 Estructura if\nPermite ejecutar un bloque de código si una condición es verdadera.\n\n\n6.2.3 Bloque de Código\nConjunto de instrucciones que se ejecutan si la condición es verdadera."
  },
  {
    "objectID": "unidad5.html#ejemplo",
    "href": "unidad5.html#ejemplo",
    "title": "6  Control de Flujo",
    "section": "6.3 Ejemplo:",
    "text": "6.3 Ejemplo:\nedad = 18\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad.\")"
  },
  {
    "objectID": "unidad5.html#explicación",
    "href": "unidad5.html#explicación",
    "title": "6  Control de Flujo",
    "section": "6.4 Explicación:",
    "text": "6.4 Explicación:\nEn este ejemplo, se utiliza la estructura if para verificar si la variable “edad” es mayor o igual a 18.\nSi la condición es verdadera, se ejecuta el bloque de código que muestra un mensaje.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una variable que represente tu puntuación en un juego.\nUtiliza una estructura if para mostrar un mensaje diferente según si tu puntuación es mayor o igual a 100."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad",
    "href": "unidad5.html#explicación-de-la-actividad",
    "title": "6  Control de Flujo",
    "section": "6.5 Explicación de la Actividad:",
    "text": "6.5 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la utilización de la estructura if para tomar decisiones basadas en condiciones. Les ayuda a comprender cómo ejecutar diferentes bloques de código según la situación y cómo utilizar el control de flujo en sus programas."
  },
  {
    "objectID": "unidad5.html#if-y-condicionales",
    "href": "unidad5.html#if-y-condicionales",
    "title": "6  Control de Flujo",
    "section": "6.6 If y Condicionales",
    "text": "6.6 If y Condicionales\n\n6.6.1 Contenido:\nEn esta lección, aprenderemos cómo trabajar con múltiples condiciones utilizando la estructura if, elif y else. Esto permite ejecutar diferentes bloques de código según diferentes condiciones."
  },
  {
    "objectID": "unidad5.html#conceptos-clave-1",
    "href": "unidad5.html#conceptos-clave-1",
    "title": "6  Control de Flujo",
    "section": "6.7 Conceptos Clave",
    "text": "6.7 Conceptos Clave\n\n6.7.1 Estructura elif\nPermite verificar una condición adicional si la condición anterior es falsa.\n\n\n6.7.2 Estructura else\nDefine un bloque de código que se ejecuta si todas las condiciones anteriores son falsas.\n\n\n6.7.3 Anidación de Estructuras if\nEs posible anidar múltiples estructuras if para manejar situaciones más complejas."
  },
  {
    "objectID": "unidad5.html#ejemplo-1",
    "href": "unidad5.html#ejemplo-1",
    "title": "6  Control de Flujo",
    "section": "6.8 Ejemplo:",
    "text": "6.8 Ejemplo:\npuntaje = 85\n\nif puntaje &gt;= 90:\n    print(\"¡Excelente trabajo!\")\nelif puntaje &gt;= 70:\n    print(\"Buen trabajo.\")\nelse:\n    print(\"Necesitas mejorar.\")"
  },
  {
    "objectID": "unidad5.html#explicación-1",
    "href": "unidad5.html#explicación-1",
    "title": "6  Control de Flujo",
    "section": "6.9 Explicación:",
    "text": "6.9 Explicación:\nEn este ejemplo, se utiliza la estructura if, elif y else para evaluar diferentes rangos de puntajes y mostrar mensajes correspondientes.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una variable que represente tu calificación en un examen.\nUtiliza una estructura if, elif y else para mostrar mensajes diferentes según la calificación obtenida."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad-1",
    "href": "unidad5.html#explicación-de-la-actividad-1",
    "title": "6  Control de Flujo",
    "section": "6.10 Explicación de la Actividad:",
    "text": "6.10 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar el uso de la estructura if, elif y else para manejar múltiples condiciones y decisiones en sus programas. Les ayuda a comprender cómo ejecutar diferentes bloques de código en función de los resultados de las pruebas."
  },
  {
    "objectID": "unidad5.html#if-elif-y-else",
    "href": "unidad5.html#if-elif-y-else",
    "title": "6  Control de Flujo",
    "section": "6.11 If, elif y else",
    "text": "6.11 If, elif y else\n\n6.11.1 Contenido:\nEn esta lección, continuaremos trabajando con la estructura if, elif y else, pero esta vez exploraremos cómo anidar estas estructuras para manejar situaciones más complejas."
  },
  {
    "objectID": "unidad5.html#conceptos-clave-2",
    "href": "unidad5.html#conceptos-clave-2",
    "title": "6  Control de Flujo",
    "section": "6.12 Conceptos Clave:",
    "text": "6.12 Conceptos Clave:\n\n6.12.1 Anidación de Estructuras\nPosibilidad de colocar una estructura if, elif y else dentro de otra.\n\n\n6.12.2 Jerarquía de Condiciones\nSe evalúan las condiciones de manera secuencial y se ejecuta el primer bloque de código correspondiente a una condición verdadera."
  },
  {
    "objectID": "unidad5.html#ejemplo-2",
    "href": "unidad5.html#ejemplo-2",
    "title": "6  Control de Flujo",
    "section": "6.13 Ejemplo",
    "text": "6.13 Ejemplo\nedad = 16\npermiso_padres = True\n\nif edad &gt;= 18:\n    print(\"Eres mayor de edad.\")\nelse:\n    if permiso_padres:\n        print(\"Eres menor de edad pero tienes permiso de tus padres.\")\n    else:\n        print(\"Eres menor de edad y no tienes permiso de tus padres.\")"
  },
  {
    "objectID": "unidad5.html#explicación-2",
    "href": "unidad5.html#explicación-2",
    "title": "6  Control de Flujo",
    "section": "6.14 Explicación:",
    "text": "6.14 Explicación:\nEn este ejemplo, se anidan estructuras if para manejar diferentes casos basados en la edad y el permiso de los padres.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una variable que represente si un usuario está registrado en un sitio web.\nSi el usuario está registrado, muestra un mensaje de bienvenida. Si no está registrado, muestra un mensaje que lo invite a registrarse."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad-2",
    "href": "unidad5.html#explicación-de-la-actividad-2",
    "title": "6  Control de Flujo",
    "section": "6.15 Explicación de la Actividad:",
    "text": "6.15 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la anidación de estructuras if, elif y else para manejar situaciones con múltiples condiciones. Les ayuda a comprender cómo trabajar con jerarquías de condiciones y cómo manejar casos más complejos en sus programas."
  },
  {
    "objectID": "unidad5.html#and-y-or",
    "href": "unidad5.html#and-y-or",
    "title": "6  Control de Flujo",
    "section": "6.16 And y Or",
    "text": "6.16 And y Or\n\n6.16.1 Contenido:\nEn esta lección, exploraremos los operadores lógicos and y or, que permiten combinar condiciones para crear expresiones más complejas en las estructuras if, elif y else."
  },
  {
    "objectID": "unidad5.html#conceptos-clave-3",
    "href": "unidad5.html#conceptos-clave-3",
    "title": "6  Control de Flujo",
    "section": "6.17 Conceptos Clave:",
    "text": "6.17 Conceptos Clave:\n\n6.17.1 Operador and\nRetorna True si ambas condiciones son verdaderas.\n\n\n6.17.2 Operador or\nRetorna True si al menos una de las condiciones es verdadera.\n\n\n6.17.3 Combinación de Condiciones\nLos operadores and y or permiten combinar múltiples condiciones en una sola expresión."
  },
  {
    "objectID": "unidad5.html#ejemplo-3",
    "href": "unidad5.html#ejemplo-3",
    "title": "6  Control de Flujo",
    "section": "6.18 Ejemplo:",
    "text": "6.18 Ejemplo:\nedad = 20\ntiene_permiso = True\n\nif edad &gt;= 18 and tiene_permiso:\n    print(\"Puedes ingresar.\")\nelse:\n    print(\"No puedes ingresar.\")"
  },
  {
    "objectID": "unidad5.html#explicación-3",
    "href": "unidad5.html#explicación-3",
    "title": "6  Control de Flujo",
    "section": "6.19 Explicación:",
    "text": "6.19 Explicación:\nEn este ejemplo, se utiliza el operador and para evaluar si la edad es mayor o igual a 18 y si el usuario tiene permiso.\nSi ambas condiciones son verdaderas, se permite el ingreso.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea dos variables que representen si un usuario tiene una cuenta premium y si su suscripción está activa.\nUtiliza una estructura if y el operador and para determinar si el usuario tiene acceso premium."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad-3",
    "href": "unidad5.html#explicación-de-la-actividad-3",
    "title": "6  Control de Flujo",
    "section": "6.20 Explicación de la Actividad:",
    "text": "6.20 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la combinación de condiciones utilizando los operadores and y or. Les ayuda a comprender cómo crear expresiones más complejas para tomar decisiones basadas en múltiples condiciones en sus programas."
  },
  {
    "objectID": "unidad5.html#introducción-a-while",
    "href": "unidad5.html#introducción-a-while",
    "title": "6  Control de Flujo",
    "section": "6.21 Introducción a While",
    "text": "6.21 Introducción a While\n\n6.21.1 Contenido:\nEn esta lección, introduciremos la estructura while, que permite ejecutar un bloque de código repetidamente mientras se cumpla una condición."
  },
  {
    "objectID": "unidad5.html#conceptos-clave-4",
    "href": "unidad5.html#conceptos-clave-4",
    "title": "6  Control de Flujo",
    "section": "6.22 Conceptos Clave:",
    "text": "6.22 Conceptos Clave:\n\n6.22.1 Estructura while\nPermite ejecutar un bloque de código mientras una condición sea verdadera.\n\n\n6.22.2 Condición\nLa condición se verifica antes de cada iteración. Si es verdadera, se ejecuta el bloque de código."
  },
  {
    "objectID": "unidad5.html#ejemplo-4",
    "href": "unidad5.html#ejemplo-4",
    "title": "6  Control de Flujo",
    "section": "6.23 Ejemplo:",
    "text": "6.23 Ejemplo:\ncontador = 0\n\nwhile contador &lt; 5:\n    print(\"Contador:\", contador)\n    contador += 1"
  },
  {
    "objectID": "unidad5.html#explicación-4",
    "href": "unidad5.html#explicación-4",
    "title": "6  Control de Flujo",
    "section": "6.24 Explicación:",
    "text": "6.24 Explicación:\nEn este ejemplo, se utiliza la estructura while para imprimir el valor del contador mientras sea menor que 5.\nDespués de cada iteración, se incrementa el contador en 1.\n::: {.callout-important} ### Actividad Práctica:\nCrea una variable que represente la cantidad de intentos de un usuario para ingresar una contraseña correcta.\nUtiliza una estructura while para pedir al usuario que ingrese su contraseña hasta que lo haga correctamente."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad-4",
    "href": "unidad5.html#explicación-de-la-actividad-4",
    "title": "6  Control de Flujo",
    "section": "6.25 Explicación de la Actividad:",
    "text": "6.25 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar el uso de la estructura while para crear bucles que se ejecutan repetidamente mientras se cumple una condición. Les ayuda a comprender cómo implementar lógica de repetición en sus programas."
  },
  {
    "objectID": "unidad5.html#while-loop",
    "href": "unidad5.html#while-loop",
    "title": "6  Control de Flujo",
    "section": "6.26 While loop",
    "text": "6.26 While loop\n\n6.26.1 Contenido:\nEn esta lección, profundizaremos en el uso de la estructura while para crear bucles que se ejecutan repetidamente mientras se cumpla una condición, y aprenderemos a utilizar la sentencia break para salir de un bucle."
  },
  {
    "objectID": "unidad5.html#conceptos-clave-5",
    "href": "unidad5.html#conceptos-clave-5",
    "title": "6  Control de Flujo",
    "section": "6.27 Conceptos Clave:",
    "text": "6.27 Conceptos Clave:\n\n6.27.1 Sentencia break:\nSe utiliza para salir de un bucle antes de que la condición sea falsa.\n\n\n6.27.2 Bucles Infinitos:\nSi no se maneja adecuadamente, un bucle while puede ejecutarse infinitamente."
  },
  {
    "objectID": "unidad5.html#ejemplo-5",
    "href": "unidad5.html#ejemplo-5",
    "title": "6  Control de Flujo",
    "section": "6.28 Ejemplo:",
    "text": "6.28 Ejemplo:\ncontador = 0\n\nwhile True:\n    print(\"Contador:\", contador)\n    contador += 1\n    if contador &gt;= 5:\n        break"
  },
  {
    "objectID": "unidad5.html#explicación-5",
    "href": "unidad5.html#explicación-5",
    "title": "6  Control de Flujo",
    "section": "6.29 Explicación:",
    "text": "6.29 Explicación:\nEn este ejemplo, se utiliza un bucle while que se ejecuta infinitamente.\nSe utiliza la sentencia break para salir del bucle cuando el contador llega a 5.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea un bucle while que pida al usuario ingresar un número positivo menor que 10.\nUtiliza la sentencia break para salir del bucle una vez que el usuario ingrese un número válido."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad-5",
    "href": "unidad5.html#explicación-de-la-actividad-5",
    "title": "6  Control de Flujo",
    "section": "6.30 Explicación de la Actividad:",
    "text": "6.30 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar el uso de la sentencia break para controlar la ejecución de un bucle while y evitar bucles infinitos. Les ayuda a comprender cómo manejar situaciones en las que es necesario salir de un bucle antes de que la condición sea falsa."
  },
  {
    "objectID": "unidad5.html#while-break-y-continue",
    "href": "unidad5.html#while-break-y-continue",
    "title": "6  Control de Flujo",
    "section": "6.31 While, break y continue",
    "text": "6.31 While, break y continue\n\n6.31.1 Contenido:\nEn esta lección, continuaremos explorando cómo trabajar con la estructura while y aprenderemos a utilizar la sentencia continue para saltar a la siguiente iteración del bucle."
  },
  {
    "objectID": "unidad5.html#conceptos-clave-6",
    "href": "unidad5.html#conceptos-clave-6",
    "title": "6  Control de Flujo",
    "section": "6.32 Conceptos Clave:",
    "text": "6.32 Conceptos Clave:\n\n6.32.1 Sentencia continue\nSe utiliza para saltar a la siguiente iteración del bucle sin ejecutar el resto del código en esa iteración.\n\n\n6.32.2 Saltar Iteraciones\nLa sentencia continue permite omitir ciertas iteraciones basadas en una condición."
  },
  {
    "objectID": "unidad5.html#ejemplo-6",
    "href": "unidad5.html#ejemplo-6",
    "title": "6  Control de Flujo",
    "section": "6.33 Ejemplo",
    "text": "6.33 Ejemplo\ncontador = 0\n\nwhile contador &lt; 5:\n    contador += 1\n    if contador == 3:\n        continue\n    print(\"Contador:\", contador)"
  },
  {
    "objectID": "unidad5.html#explicación-6",
    "href": "unidad5.html#explicación-6",
    "title": "6  Control de Flujo",
    "section": "6.34 Explicación:",
    "text": "6.34 Explicación:\nEn este ejemplo, se utiliza un bucle while para imprimir el valor del contador.\nSe utiliza la sentencia continue para omitir la iteración cuando el contador es igual a 3.\n::: {.callout-important} ### Actividad Práctica:\nCrea un bucle while que imprima los números del 1 al 10, pero omite la impresión del número 5.\nUtiliza la sentencia continue para lograr esto.\n\n## Explicación de la Actividad\n\nEsta actividad permite a los participantes practicar el uso de la sentencia continue para omitir iteraciones específicas en un bucle while. Les ayuda a comprender cómo controlar la ejecución de un bucle y realizar acciones selectivas en cada iteración.\n\n## For Loop\n\n### Contenido:\n\nEn esta lección, aprenderemos sobre el bucle for, que se utiliza para iterar sobre secuencias como listas, tuplas o cadenas de texto.\n\n## Conceptos Clave:\n\n### Bucle for\n\nSe utiliza para recorrer elementos en una secuencia uno por uno.\n\n### Iteración\n\nEn cada iteración del bucle, se ejecuta un bloque de código con un valor diferente de la secuencia.\n\n### range() con Bucles for\n\nSe puede utilizar la función range() para generar una secuencia de números y recorrerla con un bucle for.\n\n## Ejemplo:\n\n```python\nfrutas = [\"manzana\", \"banana\", \"naranja\"]\n\nfor fruta in frutas:\n    print(\"Me gusta\", fruta)"
  },
  {
    "objectID": "unidad5.html#explicación-7",
    "href": "unidad5.html#explicación-7",
    "title": "6  Control de Flujo",
    "section": "6.35 Explicación:",
    "text": "6.35 Explicación:\nEn este ejemplo, se utiliza un bucle for para recorrer una lista de frutas.\nEn cada iteración, se asigna el valor actual de la lista a la variable fruta.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una lista de colores.\nUtiliza un bucle for para imprimir cada color en la lista precedido por la palabra “Color:”."
  },
  {
    "objectID": "unidad5.html#explicación-de-la-actividad-6",
    "href": "unidad5.html#explicación-de-la-actividad-6",
    "title": "6  Control de Flujo",
    "section": "6.36 Explicación de la Actividad:",
    "text": "6.36 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar el uso del bucle for para iterar sobre elementos en una secuencia. Les ayuda a comprender cómo trabajar con bucles para recorrer listas y otros tipos de secuencias en sus programas."
  },
  {
    "objectID": "unidad6.html#introducción-a-funciones",
    "href": "unidad6.html#introducción-a-funciones",
    "title": "7  Funciones",
    "section": "7.1 Introducción a Funciones",
    "text": "7.1 Introducción a Funciones\n\n7.1.1 Contenido:\nEn esta lección, exploraremos el concepto de funciones en Python. Aprenderemos cómo definir funciones, pasar argumentos y cómo retornar valores."
  },
  {
    "objectID": "unidad6.html#conceptos-clave",
    "href": "unidad6.html#conceptos-clave",
    "title": "7  Funciones",
    "section": "7.2 Conceptos Clave:",
    "text": "7.2 Conceptos Clave:\n\n7.2.1 Funciones.\nBloques de código reutilizables que realizan una tarea específica.\n\n\n7.2.2 Definición de Funciones\nSe utiliza la palabra clave def para definir una función.\n\n\n7.2.3 Argumentos\nValores que se pasan a una función para que trabaje con ellos."
  },
  {
    "objectID": "unidad6.html#retorno-de-valores",
    "href": "unidad6.html#retorno-de-valores",
    "title": "7  Funciones",
    "section": "7.3 Retorno de Valores",
    "text": "7.3 Retorno de Valores\nUna función puede retornar un valor utilizando la palabra clave return."
  },
  {
    "objectID": "unidad6.html#ejemplo",
    "href": "unidad6.html#ejemplo",
    "title": "7  Funciones",
    "section": "7.4 Ejemplo:",
    "text": "7.4 Ejemplo:\ndef saludar(nombre):\n    return \"Hola, \" + nombre\n\nmensaje = saludar(\"Juan\")\nprint(mensaje)"
  },
  {
    "objectID": "unidad6.html#explicación",
    "href": "unidad6.html#explicación",
    "title": "7  Funciones",
    "section": "7.5 Explicación:",
    "text": "7.5 Explicación:\nEn este ejemplo, se define una función llamada saludar que toma un argumento nombre.\nLa función retorna un saludo personalizado utilizando el argumento.\nEl resultado se asigna a la variable mensaje y se muestra en la consola.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una función llamada calcular_cuadrado que reciba un número como argumento y retorne el cuadrado de ese número.\nUtiliza la función para calcular el cuadrado de un número y mostrarlo en la consola."
  },
  {
    "objectID": "unidad6.html#explicación-de-la-actividad",
    "href": "unidad6.html#explicación-de-la-actividad",
    "title": "7  Funciones",
    "section": "7.6 Explicación de la Actividad:",
    "text": "7.6 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación y uso de funciones en Python. Les ayuda a comprender cómo definir funciones, pasar argumentos y cómo trabajar con valores retornados por las funciones."
  },
  {
    "objectID": "unidad6.html#recursividad",
    "href": "unidad6.html#recursividad",
    "title": "7  Funciones",
    "section": "7.7 Recursividad",
    "text": "7.7 Recursividad\n\n7.7.1 Contenido:\nEn esta lección, exploraremos el concepto de recursividad, que es cuando una función se llama a sí misma para resolver un problema. Aprenderemos cómo implementar funciones recursivas y cuándo es apropiado usarlas."
  },
  {
    "objectID": "unidad6.html#conceptos-clave-1",
    "href": "unidad6.html#conceptos-clave-1",
    "title": "7  Funciones",
    "section": "7.8 Conceptos Clave:",
    "text": "7.8 Conceptos Clave:\n\n7.8.1 Recursividad\nTécnica en la que una función se llama a sí misma para resolver un problema.\n\n\n7.8.2 Caso Base\nCondición que indica cuándo la recursión debe detenerse.\n\n\n7.8.3 Caso Recursivo\nCómo se divide el problema en partes más pequeñas en cada llamada recursiva."
  },
  {
    "objectID": "unidad6.html#ejemplo-1",
    "href": "unidad6.html#ejemplo-1",
    "title": "7  Funciones",
    "section": "7.9 Ejemplo:",
    "text": "7.9 Ejemplo:\ndef factorial(n):\n    if n == 0:\n        return 1\n    else:\n        return n * factorial(n - 1)\n\nresultado = factorial(5)\nprint(resultado)"
  },
  {
    "objectID": "unidad6.html#explicación-1",
    "href": "unidad6.html#explicación-1",
    "title": "7  Funciones",
    "section": "7.10 Explicación:",
    "text": "7.10 Explicación:\nEn este ejemplo, se define una función recursiva llamada factorial para calcular el factorial de un número.\nLa función utiliza un caso base (cuando n es 0) y un caso recursivo (llamando a la función con n - 1).\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una función recursiva llamada potencia que calcule la potencia de un número base elevado a un exponente.\nUtiliza la función para calcular 2^3 y muestra el resultado en la consola."
  },
  {
    "objectID": "unidad6.html#explicación-de-la-actividad-1",
    "href": "unidad6.html#explicación-de-la-actividad-1",
    "title": "7  Funciones",
    "section": "7.11 Explicación de la Actividad:",
    "text": "7.11 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la implementación de funciones recursivas y comprender cómo se dividen los problemas en partes más pequeñas para resolverlos. Les ayuda a comprender cómo aplicar la recursividad de manera efectiva en la solución de problemas."
  },
  {
    "objectID": "unidad7.html#introducción",
    "href": "unidad7.html#introducción",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.1 Introducción",
    "text": "8.1 Introducción"
  },
  {
    "objectID": "unidad7.html#contenido",
    "href": "unidad7.html#contenido",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.2 Contenido:",
    "text": "8.2 Contenido:\nEn esta lección, exploraremos el concepto de programación orientada a objetos (POO). Aprenderemos sobre objetos, clases y cómo la POO nos permite organizar y estructurar nuestro código de manera más eficiente."
  },
  {
    "objectID": "unidad7.html#conceptos-clave",
    "href": "unidad7.html#conceptos-clave",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.3 Conceptos Clave:",
    "text": "8.3 Conceptos Clave:\n\n8.3.1 Programación Orientada a Objetos (POO)\nParadigma de programación que se basa en el uso de objetos y clases.\n\n\n8.3.2 Objetos\nInstancias de clases que representan entidades en el mundo real.\n\n\n8.3.3 Clases\nPlantillas o moldes que definen la estructura y el comportamiento de los objetos.\n\n\n8.3.4 Atributos\nCaracterísticas o propiedades de un objeto.\n\n\n8.3.5 Métodos\nFunciones que definen el comportamiento de un objeto."
  },
  {
    "objectID": "unidad7.html#ejemplo",
    "href": "unidad7.html#ejemplo",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.4 Ejemplo:",
    "text": "8.4 Ejemplo:\nclass Persona:\n    def __init__(self, nombre, edad):\n        self.nombre = nombre\n        self.edad = edad\n\n    def saludar(self):\n        print(f\"Hola, mi nombre es {self.nombre} y tengo {self.edad} años.\")\n\npersona1 = Persona(\"Juan\", 25)\npersona1.saludar()"
  },
  {
    "objectID": "unidad7.html#explicación",
    "href": "unidad7.html#explicación",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.5 Explicación:",
    "text": "8.5 Explicación:\nEn este ejemplo, se define una clase llamada Persona con un constructor (init) que inicializa atributos.\nLa clase tiene un método llamado saludar que muestra un mensaje con el nombre y edad del objeto.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una clase llamada Libro con atributos titulo y autor, y un método mostrar_info que imprima los atributos.\nCrea una instancia de la clase Libro y llama al método mostrar_info."
  },
  {
    "objectID": "unidad7.html#explicación-de-la-actividad",
    "href": "unidad7.html#explicación-de-la-actividad",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.6 Explicación de la Actividad:",
    "text": "8.6 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la definición de clases y la creación de objetos. Les ayuda a comprender cómo la POO nos permite modelar entidades y organizar el código de manera más estructurada y eficiente."
  },
  {
    "objectID": "unidad7.html#objetos-y-clases",
    "href": "unidad7.html#objetos-y-clases",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.7 Objetos y Clases",
    "text": "8.7 Objetos y Clases\n\n8.7.1 Contenido:\nEn esta lección, continuaremos explorando los conceptos de objetos y clases en la programación orientada a objetos. Aprenderemos cómo crear múltiples objetos a partir de una misma clase y cómo trabajar con sus atributos y métodos."
  },
  {
    "objectID": "unidad7.html#conceptos-clave-1",
    "href": "unidad7.html#conceptos-clave-1",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.8 Conceptos Clave:",
    "text": "8.8 Conceptos Clave:\n\n8.8.1 Instancias de Clase\nCuando se crea un objeto a partir de una clase, se crea una instancia de esa clase.\n\n\n8.8.2 Atributos de Instancia:\nCaracterísticas específicas de un objeto que se almacenan como variables en la instancia.\n\n\n8.8.3 Métodos de Instancia\nFunciones definidas en la clase que operan en los atributos de la instancia."
  },
  {
    "objectID": "unidad7.html#ejemplo-1",
    "href": "unidad7.html#ejemplo-1",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.9 Ejemplo:",
    "text": "8.9 Ejemplo:\nclass Perro:\n    def __init__(self, nombre, raza):\n        self.nombre = nombre\n        self.raza = raza\n\n    def ladrar(self):\n        print(f\"{self.nombre} está ladrando.\")\n\nperro1 = Perro(\"Max\", \"Labrador\")\nperro2 = Perro(\"Buddy\", \"Chihuahua\")\n\nperro1.ladrar()\nperro2.ladrar()"
  },
  {
    "objectID": "unidad7.html#explicación-1",
    "href": "unidad7.html#explicación-1",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.10 Explicación:",
    "text": "8.10 Explicación:\nEn este ejemplo, se define una clase Perro con un constructor y un método ladrar.\nSe crean dos objetos (perro1 y perro2) a partir de la misma clase y se les asignan diferentes valores para sus atributos.\nLos métodos de instancia son llamados en cada objeto para realizar acciones específicas.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una clase Rectangulo con atributos ancho y alto, y un método calcular_area que calcule y retorne el área del rectángulo.\nCrea dos instancias de la clase Rectangulo con diferentes valores de ancho y alto, y llama al método calcular_area en cada una."
  },
  {
    "objectID": "unidad7.html#explicación-de-la-actividad-1",
    "href": "unidad7.html#explicación-de-la-actividad-1",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.11 Explicación de la Actividad:",
    "text": "8.11 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de instancias de clase y trabajar con sus atributos y métodos. Les ayuda a comprender cómo cada objeto puede tener valores diferentes para sus atributos y cómo ejecutar acciones específicas en cada objeto."
  },
  {
    "objectID": "unidad7.html#métodos-1",
    "href": "unidad7.html#métodos-1",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.12 Métodos",
    "text": "8.12 Métodos\n\n8.12.1 Contenido:\nEn esta lección, profundizaremos en el concepto de métodos en la programación orientada a objetos. Aprenderemos cómo definir y utilizar métodos en una clase, y cómo acceder a los atributos de instancia dentro de los métodos."
  },
  {
    "objectID": "unidad7.html#conceptos-clave-2",
    "href": "unidad7.html#conceptos-clave-2",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.13 Conceptos Clave:",
    "text": "8.13 Conceptos Clave:\n\n8.13.1 Métodos de Clase\nFunciones definidas dentro de una clase que operan en los atributos de instancia.\n\n\n8.13.2 Acceso a Atributos\nDentro de un método, se puede acceder a los atributos de instancia utilizando self.atributo."
  },
  {
    "objectID": "unidad7.html#ejemplo-2",
    "href": "unidad7.html#ejemplo-2",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.14 Ejemplo:",
    "text": "8.14 Ejemplo:\nclass Circulo:\n    def __init__(self, radio):\n        self.radio = radio\n\n    def calcular_area(self):\n        area = 3.14 * self.radio ** 2\n        return area\n\ncirculo1 = Circulo(5)\narea_circulo = circulo1.calcular_area()\nprint(\"Área del círculo:\", area_circulo)"
  },
  {
    "objectID": "unidad7.html#explicación-2",
    "href": "unidad7.html#explicación-2",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.15 Explicación:",
    "text": "8.15 Explicación:\nEn este ejemplo, se define una clase Circulo con un constructor y un método calcular_area.\nDentro del método, se accede al atributo de instancia radio utilizando self.radio para calcular el área.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una clase Triangulo con atributos base y altura, y un método calcular_area que calcule y retorne el área del triángulo.\nCrea una instancia de la clase Triangulo y llama al método calcular_area para calcular el área."
  },
  {
    "objectID": "unidad7.html#explicación-de-la-actividad-2",
    "href": "unidad7.html#explicación-de-la-actividad-2",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.16 Explicación de la Actividad:",
    "text": "8.16 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la definición y uso de métodos en una clase. Les ayuda a comprender cómo trabajar con atributos de instancia dentro de los métodos y cómo implementar lógica específica para cada objeto."
  },
  {
    "objectID": "unidad7.html#self-eliminar-propiedades-y-objetos",
    "href": "unidad7.html#self-eliminar-propiedades-y-objetos",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.17 Self, Eliminar Propiedades y Objetos",
    "text": "8.17 Self, Eliminar Propiedades y Objetos\n\n8.17.1 Contenido:\nEn esta lección, aprenderemos más sobre el uso de self en los métodos de clase. También exploraremos cómo eliminar atributos de instancia y objetos en Python."
  },
  {
    "objectID": "unidad7.html#conceptos-clave-3",
    "href": "unidad7.html#conceptos-clave-3",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.18 Conceptos Clave:",
    "text": "8.18 Conceptos Clave:\n\n8.18.1 self\nReferencia al objeto actual en un método de clase.\n\n\n8.18.2 Eliminar Atributos\nSe puede usar la palabra clave del para eliminar un atributo de instancia.\n\n\n8.18.3 Eliminar Objetos\nSe utiliza la función del para eliminar un objeto y liberar memoria."
  },
  {
    "objectID": "unidad7.html#ejemplo-3",
    "href": "unidad7.html#ejemplo-3",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.19 Ejemplo:",
    "text": "8.19 Ejemplo:\nclass Coche:\n    def __init__(self, marca, modelo):\n        self.marca = marca\n        self.modelo = modelo\n\n    def mostrar_info(self):\n        print(f\"Coche {self.marca} {self.modelo}\")\n\ncoche1 = Coche(\"Toyota\", \"Corolla\")\ncoche1.mostrar_info()\n\n# Eliminar el atributo 'modelo'\ndel coche1.modelo\n\n# Intentar acceder al atributo eliminado generará un error\n# print(coche1.modelo)"
  },
  {
    "objectID": "unidad7.html#explicación-3",
    "href": "unidad7.html#explicación-3",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.20 Explicación:",
    "text": "8.20 Explicación:\nEn este ejemplo, se define una clase Coche con un constructor y un método mostrar_info.\nSe crea una instancia coche1 y se muestra su información. Luego, se elimina el atributo modelo utilizando del.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una clase Estudiante con atributos nombre y edad, y un método mostrar_info para mostrar la información del estudiante.\nCrea una instancia de la clase Estudiante y llama al método mostrar_info.\nUtiliza del para eliminar el atributo nombre de la instancia y verifica el resultado."
  },
  {
    "objectID": "unidad7.html#explicación-de-la-actividad-3",
    "href": "unidad7.html#explicación-de-la-actividad-3",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.21 Explicación de la Actividad:",
    "text": "8.21 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar el uso de self en los métodos de clase y cómo eliminar atributos de instancia. Les ayuda a comprender cómo trabajar con objetos y atributos, y cómo gestionar la memoria en Python."
  },
  {
    "objectID": "unidad7.html#herencia",
    "href": "unidad7.html#herencia",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.22 Herencia",
    "text": "8.22 Herencia"
  },
  {
    "objectID": "unidad7.html#contenido-4",
    "href": "unidad7.html#contenido-4",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.23 Contenido:",
    "text": "8.23 Contenido:\nEn esta lección, exploraremos el concepto de herencia en la programación orientada a objetos. Aprenderemos cómo crear clases que heredan atributos y métodos de una clase base."
  },
  {
    "objectID": "unidad7.html#conceptos-clave-4",
    "href": "unidad7.html#conceptos-clave-4",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.24 Conceptos Clave:",
    "text": "8.24 Conceptos Clave:\n\n8.24.1 Herencia\nMecanismo que permite que una clase herede atributos y métodos de otra clase base.\n\n\n8.24.2 Clase Padre (o Base)\nLa clase de la que se heredan atributos y métodos.\n\n\n8.24.3 Clase Hija (o Derivada)\nLa clase que hereda de la clase base."
  },
  {
    "objectID": "unidad7.html#ejemplo-4",
    "href": "unidad7.html#ejemplo-4",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.25 Ejemplo:",
    "text": "8.25 Ejemplo:\nclass Animal:\n    def __init__(self, nombre):\n        self.nombre = nombre\n\n    def saludar(self):\n        print(f\"{self.nombre} saluda\")\n\nclass Perro(Animal):\n    def ladrar(self):\n        print(f\"{self.nombre} está ladrando\")\n\nperro1 = Perro(\"Buddy\")\nperro1.saludar()\nperro1.ladrar()\n\n8.25.1 Explicación:\nEn este ejemplo, se define una clase base Animal con un constructor y un método saludar.\nSe define una clase derivada Perro que hereda de Animal y agrega un método adicional ladrar.\nSe crea una instancia perro1 de la clase Perro y se llama a sus métodos.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea una clase Figura con un atributo color y un método mostrar_color para mostrar el color.\nCrea una clase derivada Circulo que herede de Figura y agrega un atributo radio y un método calcular_area para calcular el área del círculo.\nCrea una instancia de la clase Circulo, establece su color y calcula el área."
  },
  {
    "objectID": "unidad7.html#explicación-de-la-actividad-4",
    "href": "unidad7.html#explicación-de-la-actividad-4",
    "title": "8  Objetos, Clases y Herencia",
    "section": "8.26 Explicación de la Actividad:",
    "text": "8.26 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de clases derivadas y la herencia de atributos y métodos. Les ayuda a comprender cómo utilizar la herencia para reutilizar código y extender funcionalidades en las clases derivadas."
  },
  {
    "objectID": "unidad8.html#introducción",
    "href": "unidad8.html#introducción",
    "title": "9  Módulos",
    "section": "9.1 Introducción",
    "text": "9.1 Introducción\n\n9.1.1 Contenido:\nEn esta lección, exploraremos cómo trabajar con módulos en Python. Aprenderemos cómo dividir nuestro código en módulos reutilizables y cómo importarlos en otros programas."
  },
  {
    "objectID": "unidad8.html#conceptos-clave",
    "href": "unidad8.html#conceptos-clave",
    "title": "9  Módulos",
    "section": "9.2 Conceptos Clave:",
    "text": "9.2 Conceptos Clave:\n\n9.2.1 Módulos\nArchivos que contienen código Python y se utilizan para organizar y reutilizar funciones, clases y variables.\n\n\n9.2.2 Importar Módulos\nSe utiliza la palabra clave import para cargar un módulo en un programa.\n\n\n9.2.3 Usar Funciones y Clases\nDespués de importar un módulo, sus funciones y clases pueden ser utilizadas como si estuvieran definidas en el mismo archivo."
  },
  {
    "objectID": "unidad8.html#ejemplo",
    "href": "unidad8.html#ejemplo",
    "title": "9  Módulos",
    "section": "9.3 Ejemplo:",
    "text": "9.3 Ejemplo:\n# En el archivo calculadora.py\ndef suma(a, b):\n    return a + b\n\n# En otro archivo\nimport calculadora\n\nresultado = calculadora.suma(3, 5)\nprint(\"Resultado:\", resultado)"
  },
  {
    "objectID": "unidad8.html#explicación",
    "href": "unidad8.html#explicación",
    "title": "9  Módulos",
    "section": "9.4 Explicación:",
    "text": "9.4 Explicación:\nEn este ejemplo, se define una función suma en el módulo calculadora.py.\nEn otro archivo, se importa el módulo calculadora utilizando import y se utiliza la función suma del módulo.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea un módulo llamado matematicas con una función multiplicacion que multiplique dos números.\nImporta el módulo en otro archivo y utiliza la función multiplicacion para calcular el producto de dos números."
  },
  {
    "objectID": "unidad8.html#explicación-de-la-actividad",
    "href": "unidad8.html#explicación-de-la-actividad",
    "title": "9  Módulos",
    "section": "9.5 Explicación de la Actividad:",
    "text": "9.5 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación y uso de módulos en Python. Les ayuda a comprender cómo organizar su código en módulos reutilizables y cómo importar funciones y clases desde otros archivos."
  },
  {
    "objectID": "unidad8.html#creando-nuestro-primer-módulo",
    "href": "unidad8.html#creando-nuestro-primer-módulo",
    "title": "9  Módulos",
    "section": "9.6 Creando Nuestro Primer Módulo",
    "text": "9.6 Creando Nuestro Primer Módulo\n\n9.6.1 Contenido:\nEn esta lección, aprenderemos a crear nuestro propio módulo en Python. Crearemos un módulo que contenga funciones y clases para realizar operaciones matemáticas básicas."
  },
  {
    "objectID": "unidad8.html#pasos-para-crear-un-módulo",
    "href": "unidad8.html#pasos-para-crear-un-módulo",
    "title": "9  Módulos",
    "section": "9.7 Pasos para Crear un Módulo:",
    "text": "9.7 Pasos para Crear un Módulo:\nCrea un archivo de Python con la extensión .py.\nDefine funciones y clases en el archivo.\nGuarda el archivo en una ubicación accesible."
  },
  {
    "objectID": "unidad8.html#ejemplo-1",
    "href": "unidad8.html#ejemplo-1",
    "title": "9  Módulos",
    "section": "9.8 Ejemplo:",
    "text": "9.8 Ejemplo:\n# En el archivo operaciones.py\ndef suma(a, b):\n    return a + b\n\ndef resta(a, b):\n    return a - b\n\nclass Calculadora:\n    def multiplicacion(self, a, b):\n        return a * b"
  },
  {
    "objectID": "unidad8.html#explicación-1",
    "href": "unidad8.html#explicación-1",
    "title": "9  Módulos",
    "section": "9.9 Explicación:",
    "text": "9.9 Explicación:\nEn este ejemplo, se crea un módulo llamado operaciones.py.\nSe define una función suma y una función resta, junto con una clase Calculadora que tiene un método multiplicacion.\n\n\n\n\n\n\nActividad Práctica:\n\n\n\nCrea un módulo llamado geometria con funciones para calcular el área de un círculo y el perímetro de un cuadrado.\nEn otro archivo, importa el módulo geometria y utiliza las funciones para realizar cálculos geométricos."
  },
  {
    "objectID": "unidad8.html#explicación-de-la-actividad-1",
    "href": "unidad8.html#explicación-de-la-actividad-1",
    "title": "9  Módulos",
    "section": "9.10 Explicación de la Actividad:",
    "text": "9.10 Explicación de la Actividad:\nEsta actividad permite a los participantes practicar la creación de módulos con funciones y clases. Les ayuda a comprender cómo organizar diferentes funcionalidades en módulos separados y cómo importar esas funcionalidades en otros archivos."
  },
  {
    "objectID": "about.html#nuestro-objetivo",
    "href": "about.html#nuestro-objetivo",
    "title": "Acerca de Nosotros",
    "section": "Nuestro Objetivo",
    "text": "Nuestro Objetivo\nNuestro objetivo es proporcionarte los conocimientos y las habilidades necesarias para comenzar a programar utilizando Python. Queremos que te sientas cómodo con los conceptos básicos y que estés preparado para abordar proyectos más desafiantes en el futuro."
  },
  {
    "objectID": "about.html#nuestro-equipo",
    "href": "about.html#nuestro-equipo",
    "title": "Acerca de Nosotros",
    "section": "Nuestro Equipo",
    "text": "Nuestro Equipo\nNuestro equipo está formado por apasionados desarrolladores y educadores que tienen una amplia experiencia en el mundo de la programación. Estamos aquí para ayudarte en cada paso del camino y responder a tus preguntas."
  },
  {
    "objectID": "about.html#contacto",
    "href": "about.html#contacto",
    "title": "Acerca de Nosotros",
    "section": "Contacto",
    "text": "Contacto\nSi tienes preguntas, comentarios o sugerencias, no dudes en ponerte en contacto con nosotros a través de nuestro correo electrónico o redes sociales.\n¡Esperamos que disfrutes aprendiendo con nosotros!"
  },
  {
    "objectID": "license.html#uso-permitido",
    "href": "license.html#uso-permitido",
    "title": "Licencia",
    "section": "Uso Permitido",
    "text": "Uso Permitido\nPuedes utilizar el contenido de este curso con fines educativos y personales. Puedes modificar los ejemplos y el código proporcionado para tus propias necesidades de aprendizaje."
  },
  {
    "objectID": "license.html#restricciones",
    "href": "license.html#restricciones",
    "title": "Licencia",
    "section": "Restricciones",
    "text": "Restricciones\nNo tienes permitido redistribuir, vender o utilizar el contenido de este curso para fines comerciales sin el permiso explícito de [Nombre de la Compañía]. Además, no tienes permitido copiar o duplicar el contenido del curso y presentarlo como propio."
  },
  {
    "objectID": "license.html#atribución",
    "href": "license.html#atribución",
    "title": "Licencia",
    "section": "Atribución",
    "text": "Atribución\nSi compartes los ejemplos, los fragmentos de código o el contenido de este curso en línea, te pedimos que proporciones la atribución adecuada a [Nombre de la Compañía]."
  },
  {
    "objectID": "license.html#cambios-en-la-licencia",
    "href": "license.html#cambios-en-la-licencia",
    "title": "Licencia",
    "section": "Cambios en la Licencia",
    "text": "Cambios en la Licencia\n[Nombre de la Compañía] se reserva el derecho de modificar los términos de esta licencia en cualquier momento. Cualquier cambio se reflejará en esta página.\nGracias por respetar nuestros derechos de autor y por tu comprensión."
  }
]